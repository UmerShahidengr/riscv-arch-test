
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877fffc0; valaddr_reg:x3; val_offset:81024*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81024*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877fffe0; valaddr_reg:x3; val_offset:81027*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81027*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877ffff0; valaddr_reg:x3; val_offset:81030*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81030*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877ffff8; valaddr_reg:x3; val_offset:81033*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81033*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877ffffc; valaddr_reg:x3; val_offset:81036*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81036*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877ffffe; valaddr_reg:x3; val_offset:81039*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81039*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0020 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0020; op2val:0x80000000;
op3val:0x877fffff; valaddr_reg:x3; val_offset:81042*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81042*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27000000; valaddr_reg:x3; val_offset:81045*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81045*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27000001; valaddr_reg:x3; val_offset:81048*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81048*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27000003; valaddr_reg:x3; val_offset:81051*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81051*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27000007; valaddr_reg:x3; val_offset:81054*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81054*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2700000f; valaddr_reg:x3; val_offset:81057*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81057*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2700001f; valaddr_reg:x3; val_offset:81060*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81060*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2700003f; valaddr_reg:x3; val_offset:81063*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81063*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2700007f; valaddr_reg:x3; val_offset:81066*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81066*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x270000ff; valaddr_reg:x3; val_offset:81069*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81069*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x270001ff; valaddr_reg:x3; val_offset:81072*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81072*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x270003ff; valaddr_reg:x3; val_offset:81075*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81075*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x270007ff; valaddr_reg:x3; val_offset:81078*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81078*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27000fff; valaddr_reg:x3; val_offset:81081*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81081*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27001fff; valaddr_reg:x3; val_offset:81084*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81084*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27003fff; valaddr_reg:x3; val_offset:81087*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81087*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27007fff; valaddr_reg:x3; val_offset:81090*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81090*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2700ffff; valaddr_reg:x3; val_offset:81093*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81093*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2701ffff; valaddr_reg:x3; val_offset:81096*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81096*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2703ffff; valaddr_reg:x3; val_offset:81099*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81099*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x2707ffff; valaddr_reg:x3; val_offset:81102*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81102*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x270fffff; valaddr_reg:x3; val_offset:81105*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81105*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x271fffff; valaddr_reg:x3; val_offset:81108*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81108*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x273fffff; valaddr_reg:x3; val_offset:81111*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81111*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27400000; valaddr_reg:x3; val_offset:81114*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81114*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27600000; valaddr_reg:x3; val_offset:81117*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81117*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27700000; valaddr_reg:x3; val_offset:81120*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81120*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x27780000; valaddr_reg:x3; val_offset:81123*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81123*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277c0000; valaddr_reg:x3; val_offset:81126*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81126*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277e0000; valaddr_reg:x3; val_offset:81129*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81129*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277f0000; valaddr_reg:x3; val_offset:81132*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81132*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277f8000; valaddr_reg:x3; val_offset:81135*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81135*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fc000; valaddr_reg:x3; val_offset:81138*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81138*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fe000; valaddr_reg:x3; val_offset:81141*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81141*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ff000; valaddr_reg:x3; val_offset:81144*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81144*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ff800; valaddr_reg:x3; val_offset:81147*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81147*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffc00; valaddr_reg:x3; val_offset:81150*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81150*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffe00; valaddr_reg:x3; val_offset:81153*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81153*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fff00; valaddr_reg:x3; val_offset:81156*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81156*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fff80; valaddr_reg:x3; val_offset:81159*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81159*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fffc0; valaddr_reg:x3; val_offset:81162*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81162*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fffe0; valaddr_reg:x3; val_offset:81165*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81165*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffff0; valaddr_reg:x3; val_offset:81168*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81168*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffff8; valaddr_reg:x3; val_offset:81171*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81171*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffffc; valaddr_reg:x3; val_offset:81174*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81174*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277ffffe; valaddr_reg:x3; val_offset:81177*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81177*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x4e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x277fffff; valaddr_reg:x3; val_offset:81180*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81180*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3f800001; valaddr_reg:x3; val_offset:81183*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81183*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3f800003; valaddr_reg:x3; val_offset:81186*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81186*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3f800007; valaddr_reg:x3; val_offset:81189*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81189*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3f999999; valaddr_reg:x3; val_offset:81192*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81192*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:81195*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81195*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:81198*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81198*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:81201*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81201*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:81204*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81204*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:81207*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81207*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:81210*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81210*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:81213*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81213*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:81216*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81216*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:81219*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81219*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:81222*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81222*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:81225*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81225*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c0b79 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a7edc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c0b79; op2val:0x3a7edc;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:81228*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81228*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:81231*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81231*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:81234*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81234*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:81237*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81237*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:81240*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81240*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:81243*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81243*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:81246*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81246*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:81249*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81249*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:81252*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81252*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:81255*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81255*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:81258*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81258*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:81261*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81261*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:81264*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81264*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:81267*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81267*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:81270*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81270*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:81273*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81273*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:81276*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81276*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7800000; valaddr_reg:x3; val_offset:81279*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81279*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7800001; valaddr_reg:x3; val_offset:81282*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81282*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7800003; valaddr_reg:x3; val_offset:81285*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81285*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7800007; valaddr_reg:x3; val_offset:81288*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81288*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x780000f; valaddr_reg:x3; val_offset:81291*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81291*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x780001f; valaddr_reg:x3; val_offset:81294*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81294*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x780003f; valaddr_reg:x3; val_offset:81297*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81297*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x780007f; valaddr_reg:x3; val_offset:81300*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81300*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x78000ff; valaddr_reg:x3; val_offset:81303*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81303*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x78001ff; valaddr_reg:x3; val_offset:81306*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81306*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x78003ff; valaddr_reg:x3; val_offset:81309*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81309*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x78007ff; valaddr_reg:x3; val_offset:81312*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81312*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7800fff; valaddr_reg:x3; val_offset:81315*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81315*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7801fff; valaddr_reg:x3; val_offset:81318*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81318*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7803fff; valaddr_reg:x3; val_offset:81321*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81321*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7807fff; valaddr_reg:x3; val_offset:81324*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81324*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x780ffff; valaddr_reg:x3; val_offset:81327*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81327*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x781ffff; valaddr_reg:x3; val_offset:81330*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81330*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x783ffff; valaddr_reg:x3; val_offset:81333*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81333*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x787ffff; valaddr_reg:x3; val_offset:81336*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81336*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x78fffff; valaddr_reg:x3; val_offset:81339*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81339*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x79fffff; valaddr_reg:x3; val_offset:81342*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81342*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7bfffff; valaddr_reg:x3; val_offset:81345*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81345*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7c00000; valaddr_reg:x3; val_offset:81348*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81348*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7e00000; valaddr_reg:x3; val_offset:81351*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81351*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7f00000; valaddr_reg:x3; val_offset:81354*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81354*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7f80000; valaddr_reg:x3; val_offset:81357*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81357*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fc0000; valaddr_reg:x3; val_offset:81360*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81360*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fe0000; valaddr_reg:x3; val_offset:81363*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81363*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ff0000; valaddr_reg:x3; val_offset:81366*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81366*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ff8000; valaddr_reg:x3; val_offset:81369*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81369*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffc000; valaddr_reg:x3; val_offset:81372*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81372*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffe000; valaddr_reg:x3; val_offset:81375*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81375*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fff000; valaddr_reg:x3; val_offset:81378*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81378*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fff800; valaddr_reg:x3; val_offset:81381*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81381*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffc00; valaddr_reg:x3; val_offset:81384*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81384*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffe00; valaddr_reg:x3; val_offset:81387*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81387*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffff00; valaddr_reg:x3; val_offset:81390*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81390*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffff80; valaddr_reg:x3; val_offset:81393*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81393*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffffc0; valaddr_reg:x3; val_offset:81396*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81396*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffffe0; valaddr_reg:x3; val_offset:81399*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81399*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffff0; valaddr_reg:x3; val_offset:81402*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81402*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffff8; valaddr_reg:x3; val_offset:81405*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81405*0 + 3*211*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312704,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312736,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312752,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312760,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312764,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312766,32,FLEN)
NAN_BOXED(2131492896,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312767,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311424,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311425,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311427,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311431,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311439,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311455,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311487,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311551,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311679,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654311935,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654312447,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654313471,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654315519,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654319615,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654327807,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654344191,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654376959,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654442495,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654573567,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(654835711,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(655359999,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(656408575,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(658505727,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(658505728,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(660602880,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(661651456,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662175744,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662437888,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662568960,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662634496,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662667264,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662683648,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662691840,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662695936,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662697984,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662699008,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662699520,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662699776,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662699904,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662699968,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700000,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700016,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700024,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700028,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700030,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(662700031,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131495801,32,FLEN)
NAN_BOXED(3833564,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829120,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829121,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829123,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829127,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829135,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829151,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829183,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829247,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829375,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829631,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125830143,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125831167,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125833215,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125837311,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125845503,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125861887,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125894655,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125960191,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126091263,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126353407,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(126877695,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127926271,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023423,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(130023424,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(132120576,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133169152,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133693440,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(133955584,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134086656,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134152192,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134184960,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134201344,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134209536,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134213632,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134215680,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134216704,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217216,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217472,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217600,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217664,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217696,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217712,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217720,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
