
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffffc; valaddr_reg:x3; val_offset:81408*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81408*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7fffffe; valaddr_reg:x3; val_offset:81411*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81411*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c23da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c23da; op2val:0x0;
op3val:0x7ffffff; valaddr_reg:x3; val_offset:81414*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81414*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3f800001; valaddr_reg:x3; val_offset:81417*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81417*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3f800003; valaddr_reg:x3; val_offset:81420*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81420*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3f800007; valaddr_reg:x3; val_offset:81423*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81423*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3f999999; valaddr_reg:x3; val_offset:81426*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81426*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:81429*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81429*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:81432*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81432*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:81435*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81435*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:81438*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81438*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:81441*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81441*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:81444*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81444*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:81447*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81447*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:81450*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81450*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:81453*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81453*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:81456*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81456*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:81459*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81459*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:81462*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81462*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42800000; valaddr_reg:x3; val_offset:81465*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81465*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42800001; valaddr_reg:x3; val_offset:81468*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81468*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42800003; valaddr_reg:x3; val_offset:81471*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81471*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42800007; valaddr_reg:x3; val_offset:81474*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81474*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4280000f; valaddr_reg:x3; val_offset:81477*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81477*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4280001f; valaddr_reg:x3; val_offset:81480*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81480*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4280003f; valaddr_reg:x3; val_offset:81483*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81483*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4280007f; valaddr_reg:x3; val_offset:81486*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81486*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x428000ff; valaddr_reg:x3; val_offset:81489*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81489*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x428001ff; valaddr_reg:x3; val_offset:81492*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81492*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x428003ff; valaddr_reg:x3; val_offset:81495*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81495*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x428007ff; valaddr_reg:x3; val_offset:81498*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81498*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42800fff; valaddr_reg:x3; val_offset:81501*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81501*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42801fff; valaddr_reg:x3; val_offset:81504*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81504*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42803fff; valaddr_reg:x3; val_offset:81507*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81507*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42807fff; valaddr_reg:x3; val_offset:81510*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81510*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4280ffff; valaddr_reg:x3; val_offset:81513*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81513*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4281ffff; valaddr_reg:x3; val_offset:81516*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81516*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4283ffff; valaddr_reg:x3; val_offset:81519*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81519*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x4287ffff; valaddr_reg:x3; val_offset:81522*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81522*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x428fffff; valaddr_reg:x3; val_offset:81525*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81525*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x429fffff; valaddr_reg:x3; val_offset:81528*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81528*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42bfffff; valaddr_reg:x3; val_offset:81531*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81531*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42c00000; valaddr_reg:x3; val_offset:81534*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81534*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42e00000; valaddr_reg:x3; val_offset:81537*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81537*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42f00000; valaddr_reg:x3; val_offset:81540*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81540*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42f80000; valaddr_reg:x3; val_offset:81543*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81543*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fc0000; valaddr_reg:x3; val_offset:81546*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81546*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fe0000; valaddr_reg:x3; val_offset:81549*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81549*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ff0000; valaddr_reg:x3; val_offset:81552*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81552*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ff8000; valaddr_reg:x3; val_offset:81555*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81555*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffc000; valaddr_reg:x3; val_offset:81558*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81558*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffe000; valaddr_reg:x3; val_offset:81561*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81561*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fff000; valaddr_reg:x3; val_offset:81564*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81564*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fff800; valaddr_reg:x3; val_offset:81567*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81567*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffc00; valaddr_reg:x3; val_offset:81570*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81570*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffe00; valaddr_reg:x3; val_offset:81573*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81573*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffff00; valaddr_reg:x3; val_offset:81576*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81576*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffff80; valaddr_reg:x3; val_offset:81579*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81579*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffffc0; valaddr_reg:x3; val_offset:81582*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81582*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffffe0; valaddr_reg:x3; val_offset:81585*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81585*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffff0; valaddr_reg:x3; val_offset:81588*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81588*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffff8; valaddr_reg:x3; val_offset:81591*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81591*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffffc; valaddr_reg:x3; val_offset:81594*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81594*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42fffffe; valaddr_reg:x3; val_offset:81597*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81597*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c3070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a6f70 and fs3 == 0 and fe3 == 0x85 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c3070; op2val:0x3a6f70;
op3val:0x42ffffff; valaddr_reg:x3; val_offset:81600*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81600*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7800000; valaddr_reg:x3; val_offset:81603*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81603*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7800001; valaddr_reg:x3; val_offset:81606*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81606*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7800003; valaddr_reg:x3; val_offset:81609*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81609*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7800007; valaddr_reg:x3; val_offset:81612*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81612*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf780000f; valaddr_reg:x3; val_offset:81615*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81615*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf780001f; valaddr_reg:x3; val_offset:81618*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81618*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf780003f; valaddr_reg:x3; val_offset:81621*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81621*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf780007f; valaddr_reg:x3; val_offset:81624*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81624*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf78000ff; valaddr_reg:x3; val_offset:81627*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81627*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf78001ff; valaddr_reg:x3; val_offset:81630*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81630*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf78003ff; valaddr_reg:x3; val_offset:81633*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81633*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf78007ff; valaddr_reg:x3; val_offset:81636*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81636*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7800fff; valaddr_reg:x3; val_offset:81639*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81639*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7801fff; valaddr_reg:x3; val_offset:81642*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81642*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7803fff; valaddr_reg:x3; val_offset:81645*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81645*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7807fff; valaddr_reg:x3; val_offset:81648*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81648*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf780ffff; valaddr_reg:x3; val_offset:81651*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81651*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf781ffff; valaddr_reg:x3; val_offset:81654*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81654*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf783ffff; valaddr_reg:x3; val_offset:81657*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81657*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf787ffff; valaddr_reg:x3; val_offset:81660*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81660*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf78fffff; valaddr_reg:x3; val_offset:81663*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81663*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf79fffff; valaddr_reg:x3; val_offset:81666*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81666*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7bfffff; valaddr_reg:x3; val_offset:81669*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81669*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7c00000; valaddr_reg:x3; val_offset:81672*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81672*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7e00000; valaddr_reg:x3; val_offset:81675*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81675*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7f00000; valaddr_reg:x3; val_offset:81678*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81678*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7f80000; valaddr_reg:x3; val_offset:81681*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81681*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fc0000; valaddr_reg:x3; val_offset:81684*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81684*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fe0000; valaddr_reg:x3; val_offset:81687*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81687*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ff0000; valaddr_reg:x3; val_offset:81690*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81690*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ff8000; valaddr_reg:x3; val_offset:81693*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81693*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffc000; valaddr_reg:x3; val_offset:81696*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81696*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffe000; valaddr_reg:x3; val_offset:81699*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81699*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fff000; valaddr_reg:x3; val_offset:81702*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81702*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fff800; valaddr_reg:x3; val_offset:81705*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81705*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffc00; valaddr_reg:x3; val_offset:81708*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81708*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffe00; valaddr_reg:x3; val_offset:81711*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81711*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffff00; valaddr_reg:x3; val_offset:81714*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81714*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffff80; valaddr_reg:x3; val_offset:81717*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81717*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffffc0; valaddr_reg:x3; val_offset:81720*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81720*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffffe0; valaddr_reg:x3; val_offset:81723*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81723*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffff0; valaddr_reg:x3; val_offset:81726*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81726*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffff8; valaddr_reg:x3; val_offset:81729*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81729*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffffc; valaddr_reg:x3; val_offset:81732*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81732*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7fffffe; valaddr_reg:x3; val_offset:81735*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81735*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xf7ffffff; valaddr_reg:x3; val_offset:81738*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81738*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff000001; valaddr_reg:x3; val_offset:81741*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81741*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff000003; valaddr_reg:x3; val_offset:81744*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81744*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff000007; valaddr_reg:x3; val_offset:81747*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81747*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff199999; valaddr_reg:x3; val_offset:81750*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81750*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff249249; valaddr_reg:x3; val_offset:81753*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81753*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff333333; valaddr_reg:x3; val_offset:81756*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81756*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:81759*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81759*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:81762*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81762*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff444444; valaddr_reg:x3; val_offset:81765*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81765*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:81768*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81768*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:81771*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81771*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff666666; valaddr_reg:x3; val_offset:81774*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81774*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:81777*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81777*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:81780*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81780*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:81783*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81783*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c9b2a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x690c54 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c9b2a; op2val:0xbfe90c54;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:81786*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81786*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:81789*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81789*0 + 3*212*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217724,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217726,32,FLEN)
NAN_BOXED(2131502042,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217727,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684864,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684865,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684867,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684871,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684879,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684895,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684927,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115684991,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115685119,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115685375,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115685887,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115686911,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115688959,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115693055,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115701247,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115717631,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115750399,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115815935,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1115947007,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1116209151,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1116733439,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1117782015,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1119879167,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1119879168,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1121976320,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1123024896,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1123549184,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1123811328,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1123942400,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124007936,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124040704,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124057088,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124065280,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124069376,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124071424,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124072448,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124072960,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073216,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073344,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073408,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073440,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073456,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073464,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073468,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073470,32,FLEN)
NAN_BOXED(2131505264,32,FLEN)
NAN_BOXED(3829616,32,FLEN)
NAN_BOXED(1124073471,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360960,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360961,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360963,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360967,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360975,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152360991,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152361023,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152361087,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152361215,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152361471,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152361983,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152363007,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152365055,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152369151,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152377343,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152393727,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152426495,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152492031,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152623103,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4152885247,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4153409535,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4154458111,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4156555263,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4156555264,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4158652416,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4159700992,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160225280,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160487424,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160618496,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160684032,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160716800,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160733184,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160741376,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160745472,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160747520,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160748544,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749056,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749312,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749440,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749504,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749536,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749552,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749560,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749564,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749566,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4160749567,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131532586,32,FLEN)
NAN_BOXED(3219721300,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
