
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:81792*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81792*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:81795*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81795*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:81798*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81798*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:81801*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81801*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:81804*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81804*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:81807*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81807*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:81810*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81810*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:81813*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81813*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:81816*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81816*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:81819*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81819*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:81822*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81822*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:81825*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81825*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:81828*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81828*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:81831*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81831*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:81834*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81834*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000000; valaddr_reg:x3; val_offset:81837*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81837*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000001; valaddr_reg:x3; val_offset:81840*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81840*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000003; valaddr_reg:x3; val_offset:81843*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81843*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000007; valaddr_reg:x3; val_offset:81846*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81846*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000000f; valaddr_reg:x3; val_offset:81849*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81849*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000001f; valaddr_reg:x3; val_offset:81852*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81852*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000003f; valaddr_reg:x3; val_offset:81855*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81855*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000007f; valaddr_reg:x3; val_offset:81858*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81858*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900000ff; valaddr_reg:x3; val_offset:81861*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81861*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900001ff; valaddr_reg:x3; val_offset:81864*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81864*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900003ff; valaddr_reg:x3; val_offset:81867*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81867*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900007ff; valaddr_reg:x3; val_offset:81870*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81870*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90000fff; valaddr_reg:x3; val_offset:81873*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81873*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90001fff; valaddr_reg:x3; val_offset:81876*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81876*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90003fff; valaddr_reg:x3; val_offset:81879*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81879*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90007fff; valaddr_reg:x3; val_offset:81882*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81882*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9000ffff; valaddr_reg:x3; val_offset:81885*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81885*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9001ffff; valaddr_reg:x3; val_offset:81888*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81888*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9003ffff; valaddr_reg:x3; val_offset:81891*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81891*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x9007ffff; valaddr_reg:x3; val_offset:81894*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81894*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x900fffff; valaddr_reg:x3; val_offset:81897*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81897*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x901fffff; valaddr_reg:x3; val_offset:81900*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81900*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x903fffff; valaddr_reg:x3; val_offset:81903*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81903*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90400000; valaddr_reg:x3; val_offset:81906*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81906*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x3; val_offset:81909*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81909*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x3; val_offset:81912*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81912*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x3; val_offset:81915*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81915*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x3; val_offset:81918*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81918*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x3; val_offset:81921*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81921*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x3; val_offset:81924*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81924*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x3; val_offset:81927*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81927*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x3; val_offset:81930*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81930*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x3; val_offset:81933*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81933*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x3; val_offset:81936*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81936*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x3; val_offset:81939*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81939*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x3; val_offset:81942*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81942*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x3; val_offset:81945*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81945*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x3; val_offset:81948*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81948*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x3; val_offset:81951*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81951*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x3; val_offset:81954*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81954*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x3; val_offset:81957*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81957*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x3; val_offset:81960*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81960*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x3; val_offset:81963*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81963*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x3; val_offset:81966*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81966*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x3; val_offset:81969*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81969*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cb0e7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cb0e7; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x3; val_offset:81972*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81972*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75000000; valaddr_reg:x3; val_offset:81975*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81975*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75000001; valaddr_reg:x3; val_offset:81978*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81978*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75000003; valaddr_reg:x3; val_offset:81981*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81981*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75000007; valaddr_reg:x3; val_offset:81984*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81984*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7500000f; valaddr_reg:x3; val_offset:81987*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81987*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7500001f; valaddr_reg:x3; val_offset:81990*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81990*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7500003f; valaddr_reg:x3; val_offset:81993*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81993*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7500007f; valaddr_reg:x3; val_offset:81996*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81996*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x750000ff; valaddr_reg:x3; val_offset:81999*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81999*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x750001ff; valaddr_reg:x3; val_offset:82002*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82002*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x750003ff; valaddr_reg:x3; val_offset:82005*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82005*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x750007ff; valaddr_reg:x3; val_offset:82008*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82008*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75000fff; valaddr_reg:x3; val_offset:82011*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82011*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75001fff; valaddr_reg:x3; val_offset:82014*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82014*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75003fff; valaddr_reg:x3; val_offset:82017*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82017*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75007fff; valaddr_reg:x3; val_offset:82020*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82020*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7500ffff; valaddr_reg:x3; val_offset:82023*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82023*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7501ffff; valaddr_reg:x3; val_offset:82026*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82026*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7503ffff; valaddr_reg:x3; val_offset:82029*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82029*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7507ffff; valaddr_reg:x3; val_offset:82032*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82032*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x750fffff; valaddr_reg:x3; val_offset:82035*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82035*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x751fffff; valaddr_reg:x3; val_offset:82038*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82038*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x753fffff; valaddr_reg:x3; val_offset:82041*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82041*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75400000; valaddr_reg:x3; val_offset:82044*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82044*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75600000; valaddr_reg:x3; val_offset:82047*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82047*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75700000; valaddr_reg:x3; val_offset:82050*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82050*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x75780000; valaddr_reg:x3; val_offset:82053*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82053*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757c0000; valaddr_reg:x3; val_offset:82056*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82056*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757e0000; valaddr_reg:x3; val_offset:82059*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82059*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757f0000; valaddr_reg:x3; val_offset:82062*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82062*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757f8000; valaddr_reg:x3; val_offset:82065*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82065*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fc000; valaddr_reg:x3; val_offset:82068*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82068*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fe000; valaddr_reg:x3; val_offset:82071*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82071*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ff000; valaddr_reg:x3; val_offset:82074*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82074*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ff800; valaddr_reg:x3; val_offset:82077*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82077*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffc00; valaddr_reg:x3; val_offset:82080*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82080*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffe00; valaddr_reg:x3; val_offset:82083*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82083*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fff00; valaddr_reg:x3; val_offset:82086*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82086*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fff80; valaddr_reg:x3; val_offset:82089*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82089*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fffc0; valaddr_reg:x3; val_offset:82092*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82092*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fffe0; valaddr_reg:x3; val_offset:82095*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82095*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffff0; valaddr_reg:x3; val_offset:82098*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82098*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffff8; valaddr_reg:x3; val_offset:82101*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82101*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffffc; valaddr_reg:x3; val_offset:82104*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82104*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757ffffe; valaddr_reg:x3; val_offset:82107*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82107*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xea and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x757fffff; valaddr_reg:x3; val_offset:82110*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82110*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f000001; valaddr_reg:x3; val_offset:82113*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82113*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f000003; valaddr_reg:x3; val_offset:82116*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82116*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f000007; valaddr_reg:x3; val_offset:82119*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82119*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f199999; valaddr_reg:x3; val_offset:82122*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82122*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f249249; valaddr_reg:x3; val_offset:82125*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82125*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f333333; valaddr_reg:x3; val_offset:82128*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82128*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:82131*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82131*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:82134*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82134*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f444444; valaddr_reg:x3; val_offset:82137*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82137*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:82140*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82140*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:82143*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82143*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f666666; valaddr_reg:x3; val_offset:82146*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82146*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:82149*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82149*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:82152*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82152*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:82155*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82155*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0ce53f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x6891cb and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0ce53f; op2val:0x3fe891cb;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:82158*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82158*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d22f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x682c17 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d22f7; op2val:0xbfe82c17;
op3val:0xec000000; valaddr_reg:x3; val_offset:82161*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82161*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d22f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x682c17 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d22f7; op2val:0xbfe82c17;
op3val:0xec000001; valaddr_reg:x3; val_offset:82164*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82164*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d22f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x682c17 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d22f7; op2val:0xbfe82c17;
op3val:0xec000003; valaddr_reg:x3; val_offset:82167*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82167*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d22f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x682c17 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d22f7; op2val:0xbfe82c17;
op3val:0xec000007; valaddr_reg:x3; val_offset:82170*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82170*0 + 3*213*FLEN/8, x4, x1, x2)

inst_27391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d22f7 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x682c17 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d22f7; op2val:0xbfe82c17;
op3val:0xec00000f; valaddr_reg:x3; val_offset:82173*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82173*0 + 3*213*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919104,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919105,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919107,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919111,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919119,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919135,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919167,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919231,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919359,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415919615,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415920127,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415921151,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415923199,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415927295,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415935487,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415951871,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2415984639,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416050175,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416181247,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416443391,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2416967679,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2418016255,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113407,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2420113408,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2422210560,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423259136,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2423783424,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424045568,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424176640,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424242176,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424274944,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424291328,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424299520,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424303616,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424305664,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424306688,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307200,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307456,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307584,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307648,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307680,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307696,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307704,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307708,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307710,32,FLEN)
NAN_BOXED(2131538151,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307711,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934272,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934273,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934275,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934279,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934287,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934303,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934335,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934399,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934527,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962934783,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962935295,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962936319,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962938367,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962942463,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962950655,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962967039,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1962999807,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1963065343,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1963196415,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1963458559,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1963982847,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1965031423,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1967128575,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1967128576,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1969225728,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1970274304,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1970798592,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971060736,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971191808,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971257344,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971290112,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971306496,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971314688,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971318784,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971320832,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971321856,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322368,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322624,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322752,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322816,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322848,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322864,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322872,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322876,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322878,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(1971322879,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131551551,32,FLEN)
NAN_BOXED(1072206283,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131567351,32,FLEN)
NAN_BOXED(3219663895,32,FLEN)
NAN_BOXED(3959422976,32,FLEN)
NAN_BOXED(2131567351,32,FLEN)
NAN_BOXED(3219663895,32,FLEN)
NAN_BOXED(3959422977,32,FLEN)
NAN_BOXED(2131567351,32,FLEN)
NAN_BOXED(3219663895,32,FLEN)
NAN_BOXED(3959422979,32,FLEN)
NAN_BOXED(2131567351,32,FLEN)
NAN_BOXED(3219663895,32,FLEN)
NAN_BOXED(3959422983,32,FLEN)
NAN_BOXED(2131567351,32,FLEN)
NAN_BOXED(3219663895,32,FLEN)
NAN_BOXED(3959422991,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
