
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:82560*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82560*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:82563*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82563*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:82566*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82566*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:82569*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82569*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:82572*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82572*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:82575*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82575*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:82578*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82578*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c800000; valaddr_reg:x3; val_offset:82581*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82581*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c800001; valaddr_reg:x3; val_offset:82584*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82584*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c800003; valaddr_reg:x3; val_offset:82587*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82587*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c800007; valaddr_reg:x3; val_offset:82590*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82590*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c80000f; valaddr_reg:x3; val_offset:82593*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82593*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c80001f; valaddr_reg:x3; val_offset:82596*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82596*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c80003f; valaddr_reg:x3; val_offset:82599*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82599*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c80007f; valaddr_reg:x3; val_offset:82602*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82602*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c8000ff; valaddr_reg:x3; val_offset:82605*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82605*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c8001ff; valaddr_reg:x3; val_offset:82608*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82608*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c8003ff; valaddr_reg:x3; val_offset:82611*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82611*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c8007ff; valaddr_reg:x3; val_offset:82614*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82614*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c800fff; valaddr_reg:x3; val_offset:82617*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82617*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c801fff; valaddr_reg:x3; val_offset:82620*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82620*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c803fff; valaddr_reg:x3; val_offset:82623*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82623*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c807fff; valaddr_reg:x3; val_offset:82626*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82626*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c80ffff; valaddr_reg:x3; val_offset:82629*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82629*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c81ffff; valaddr_reg:x3; val_offset:82632*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82632*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c83ffff; valaddr_reg:x3; val_offset:82635*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82635*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c87ffff; valaddr_reg:x3; val_offset:82638*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82638*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c8fffff; valaddr_reg:x3; val_offset:82641*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82641*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8c9fffff; valaddr_reg:x3; val_offset:82644*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82644*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cbfffff; valaddr_reg:x3; val_offset:82647*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82647*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cc00000; valaddr_reg:x3; val_offset:82650*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82650*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8ce00000; valaddr_reg:x3; val_offset:82653*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82653*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cf00000; valaddr_reg:x3; val_offset:82656*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82656*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cf80000; valaddr_reg:x3; val_offset:82659*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82659*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfc0000; valaddr_reg:x3; val_offset:82662*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82662*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfe0000; valaddr_reg:x3; val_offset:82665*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82665*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cff0000; valaddr_reg:x3; val_offset:82668*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82668*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cff8000; valaddr_reg:x3; val_offset:82671*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82671*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffc000; valaddr_reg:x3; val_offset:82674*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82674*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffe000; valaddr_reg:x3; val_offset:82677*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82677*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfff000; valaddr_reg:x3; val_offset:82680*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82680*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfff800; valaddr_reg:x3; val_offset:82683*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82683*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffc00; valaddr_reg:x3; val_offset:82686*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82686*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffe00; valaddr_reg:x3; val_offset:82689*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82689*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffff00; valaddr_reg:x3; val_offset:82692*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82692*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffff80; valaddr_reg:x3; val_offset:82695*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82695*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffffc0; valaddr_reg:x3; val_offset:82698*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82698*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffffe0; valaddr_reg:x3; val_offset:82701*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82701*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffff0; valaddr_reg:x3; val_offset:82704*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82704*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffff8; valaddr_reg:x3; val_offset:82707*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82707*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffffc; valaddr_reg:x3; val_offset:82710*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82710*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cfffffe; valaddr_reg:x3; val_offset:82713*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82713*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0dbcc3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0dbcc3; op2val:0x80000000;
op3val:0x8cffffff; valaddr_reg:x3; val_offset:82716*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82716*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee000000; valaddr_reg:x3; val_offset:82719*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82719*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee000001; valaddr_reg:x3; val_offset:82722*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82722*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee000003; valaddr_reg:x3; val_offset:82725*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82725*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee000007; valaddr_reg:x3; val_offset:82728*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82728*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee00000f; valaddr_reg:x3; val_offset:82731*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82731*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee00001f; valaddr_reg:x3; val_offset:82734*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82734*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee00003f; valaddr_reg:x3; val_offset:82737*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82737*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee00007f; valaddr_reg:x3; val_offset:82740*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82740*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee0000ff; valaddr_reg:x3; val_offset:82743*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82743*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee0001ff; valaddr_reg:x3; val_offset:82746*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82746*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee0003ff; valaddr_reg:x3; val_offset:82749*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82749*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee0007ff; valaddr_reg:x3; val_offset:82752*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82752*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee000fff; valaddr_reg:x3; val_offset:82755*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82755*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee001fff; valaddr_reg:x3; val_offset:82758*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82758*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee003fff; valaddr_reg:x3; val_offset:82761*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82761*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee007fff; valaddr_reg:x3; val_offset:82764*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82764*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee00ffff; valaddr_reg:x3; val_offset:82767*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82767*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee01ffff; valaddr_reg:x3; val_offset:82770*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82770*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee03ffff; valaddr_reg:x3; val_offset:82773*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82773*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee07ffff; valaddr_reg:x3; val_offset:82776*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82776*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee0fffff; valaddr_reg:x3; val_offset:82779*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82779*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee1fffff; valaddr_reg:x3; val_offset:82782*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82782*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee3fffff; valaddr_reg:x3; val_offset:82785*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82785*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee400000; valaddr_reg:x3; val_offset:82788*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82788*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee600000; valaddr_reg:x3; val_offset:82791*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82791*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee700000; valaddr_reg:x3; val_offset:82794*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82794*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee780000; valaddr_reg:x3; val_offset:82797*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82797*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7c0000; valaddr_reg:x3; val_offset:82800*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82800*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7e0000; valaddr_reg:x3; val_offset:82803*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82803*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7f0000; valaddr_reg:x3; val_offset:82806*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82806*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7f8000; valaddr_reg:x3; val_offset:82809*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82809*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fc000; valaddr_reg:x3; val_offset:82812*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82812*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fe000; valaddr_reg:x3; val_offset:82815*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82815*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ff000; valaddr_reg:x3; val_offset:82818*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82818*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ff800; valaddr_reg:x3; val_offset:82821*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82821*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffc00; valaddr_reg:x3; val_offset:82824*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82824*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffe00; valaddr_reg:x3; val_offset:82827*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82827*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fff00; valaddr_reg:x3; val_offset:82830*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82830*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fff80; valaddr_reg:x3; val_offset:82833*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82833*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fffc0; valaddr_reg:x3; val_offset:82836*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82836*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fffe0; valaddr_reg:x3; val_offset:82839*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82839*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffff0; valaddr_reg:x3; val_offset:82842*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82842*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffff8; valaddr_reg:x3; val_offset:82845*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82845*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffffc; valaddr_reg:x3; val_offset:82848*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82848*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7ffffe; valaddr_reg:x3; val_offset:82851*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82851*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xee7fffff; valaddr_reg:x3; val_offset:82854*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82854*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff000001; valaddr_reg:x3; val_offset:82857*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82857*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff000003; valaddr_reg:x3; val_offset:82860*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82860*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff000007; valaddr_reg:x3; val_offset:82863*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82863*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff199999; valaddr_reg:x3; val_offset:82866*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82866*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff249249; valaddr_reg:x3; val_offset:82869*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82869*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff333333; valaddr_reg:x3; val_offset:82872*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82872*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:82875*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82875*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:82878*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82878*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff444444; valaddr_reg:x3; val_offset:82881*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82881*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:82884*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82884*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:82887*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82887*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff666666; valaddr_reg:x3; val_offset:82890*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82890*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:82893*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82893*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:82896*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82896*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:82899*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82899*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e0cda and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66add1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e0cda; op2val:0xbfe6add1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:82902*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82902*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:82905*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82905*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:82908*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82908*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:82911*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82911*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:82914*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82914*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:82917*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82917*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:82920*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82920*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:82923*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82923*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:82926*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82926*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:82929*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82929*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:82932*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82932*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:82935*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82935*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:82938*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82938*0 + 3*215*FLEN/8, x4, x1, x2)

inst_27647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0eaf24 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0eaf24; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:82941*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82941*0 + 3*215*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198848,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198849,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198851,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198855,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198863,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198879,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198911,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198975,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199103,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199359,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199871,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357200895,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357202943,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357207039,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357215231,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357231615,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357264383,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357329919,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357460991,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357723135,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2358247423,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2359295999,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393151,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393152,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2363490304,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2364538880,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365063168,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365325312,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365456384,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365521920,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365554688,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365571072,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365579264,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365583360,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365585408,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586432,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586944,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587200,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587328,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587392,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587424,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587440,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587448,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587452,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587454,32,FLEN)
NAN_BOXED(2131606723,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587455,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977408,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977409,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977411,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977415,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977423,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977439,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977471,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977535,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977663,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992977919,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992978431,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992979455,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992981503,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992985599,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3992993791,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3993010175,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3993042943,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3993108479,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3993239551,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3993501695,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3994025983,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3995074559,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3997171711,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3997171712,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(3999268864,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4000317440,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4000841728,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001103872,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001234944,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001300480,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001333248,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001349632,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001357824,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001361920,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001363968,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001364992,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001365504,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001365760,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001365888,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001365952,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001365984,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001366000,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001366008,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001366012,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001366014,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4001366015,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131627226,32,FLEN)
NAN_BOXED(3219566033,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131668772,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
