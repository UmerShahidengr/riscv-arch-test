
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84000fff; valaddr_reg:x3; val_offset:8064*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8064*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84001fff; valaddr_reg:x3; val_offset:8067*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8067*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84003fff; valaddr_reg:x3; val_offset:8070*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8070*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84007fff; valaddr_reg:x3; val_offset:8073*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8073*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8400ffff; valaddr_reg:x3; val_offset:8076*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8076*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8401ffff; valaddr_reg:x3; val_offset:8079*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8079*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8403ffff; valaddr_reg:x3; val_offset:8082*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8082*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x8407ffff; valaddr_reg:x3; val_offset:8085*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8085*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x840fffff; valaddr_reg:x3; val_offset:8088*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8088*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x841fffff; valaddr_reg:x3; val_offset:8091*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8091*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:8094*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8094*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:8097*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8097*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:8100*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8100*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:8103*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8103*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:8106*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8106*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:8109*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8109*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:8112*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8112*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:8115*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8115*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:8118*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8118*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:8121*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8121*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:8124*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8124*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:8127*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8127*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:8130*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8130*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:8133*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8133*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:8136*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8136*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:8139*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8139*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:8142*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8142*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:8145*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8145*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:8148*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8148*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:8151*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8151*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:8154*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8154*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:8157*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8157*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:8160*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8160*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0d6124 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8d6124; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:8163*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8163*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4800000; valaddr_reg:x3; val_offset:8166*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8166*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4800001; valaddr_reg:x3; val_offset:8169*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8169*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4800003; valaddr_reg:x3; val_offset:8172*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8172*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4800007; valaddr_reg:x3; val_offset:8175*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8175*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe480000f; valaddr_reg:x3; val_offset:8178*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8178*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe480001f; valaddr_reg:x3; val_offset:8181*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8181*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe480003f; valaddr_reg:x3; val_offset:8184*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8184*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe480007f; valaddr_reg:x3; val_offset:8187*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8187*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe48000ff; valaddr_reg:x3; val_offset:8190*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8190*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe48001ff; valaddr_reg:x3; val_offset:8193*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8193*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe48003ff; valaddr_reg:x3; val_offset:8196*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8196*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe48007ff; valaddr_reg:x3; val_offset:8199*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8199*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4800fff; valaddr_reg:x3; val_offset:8202*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8202*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4801fff; valaddr_reg:x3; val_offset:8205*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8205*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4803fff; valaddr_reg:x3; val_offset:8208*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8208*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4807fff; valaddr_reg:x3; val_offset:8211*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8211*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe480ffff; valaddr_reg:x3; val_offset:8214*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8214*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe481ffff; valaddr_reg:x3; val_offset:8217*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8217*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe483ffff; valaddr_reg:x3; val_offset:8220*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8220*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe487ffff; valaddr_reg:x3; val_offset:8223*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8223*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe48fffff; valaddr_reg:x3; val_offset:8226*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8226*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe49fffff; valaddr_reg:x3; val_offset:8229*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8229*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4bfffff; valaddr_reg:x3; val_offset:8232*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8232*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4c00000; valaddr_reg:x3; val_offset:8235*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8235*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4e00000; valaddr_reg:x3; val_offset:8238*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8238*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4f00000; valaddr_reg:x3; val_offset:8241*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8241*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4f80000; valaddr_reg:x3; val_offset:8244*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8244*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fc0000; valaddr_reg:x3; val_offset:8247*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8247*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fe0000; valaddr_reg:x3; val_offset:8250*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8250*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ff0000; valaddr_reg:x3; val_offset:8253*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8253*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ff8000; valaddr_reg:x3; val_offset:8256*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8256*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffc000; valaddr_reg:x3; val_offset:8259*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8259*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffe000; valaddr_reg:x3; val_offset:8262*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8262*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fff000; valaddr_reg:x3; val_offset:8265*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8265*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fff800; valaddr_reg:x3; val_offset:8268*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8268*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffc00; valaddr_reg:x3; val_offset:8271*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8271*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffe00; valaddr_reg:x3; val_offset:8274*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8274*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffff00; valaddr_reg:x3; val_offset:8277*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8277*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffff80; valaddr_reg:x3; val_offset:8280*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8280*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffffc0; valaddr_reg:x3; val_offset:8283*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8283*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffffe0; valaddr_reg:x3; val_offset:8286*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8286*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffff0; valaddr_reg:x3; val_offset:8289*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8289*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffff8; valaddr_reg:x3; val_offset:8292*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8292*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffffc; valaddr_reg:x3; val_offset:8295*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8295*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4fffffe; valaddr_reg:x3; val_offset:8298*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8298*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xe4ffffff; valaddr_reg:x3; val_offset:8301*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8301*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff000001; valaddr_reg:x3; val_offset:8304*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8304*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff000003; valaddr_reg:x3; val_offset:8307*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8307*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff000007; valaddr_reg:x3; val_offset:8310*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8310*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff199999; valaddr_reg:x3; val_offset:8313*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8313*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff249249; valaddr_reg:x3; val_offset:8316*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8316*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff333333; valaddr_reg:x3; val_offset:8319*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8319*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:8322*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8322*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:8325*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8325*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff444444; valaddr_reg:x3; val_offset:8328*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8328*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:8331*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8331*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:8334*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8334*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff666666; valaddr_reg:x3; val_offset:8337*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8337*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:8340*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8340*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:8343*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8343*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:8346*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8346*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x0eee19 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x654249 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d8eee19; op2val:0xc1654249;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:8349*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8349*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0800000; valaddr_reg:x3; val_offset:8352*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8352*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0800001; valaddr_reg:x3; val_offset:8355*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8355*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0800003; valaddr_reg:x3; val_offset:8358*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8358*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0800007; valaddr_reg:x3; val_offset:8361*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8361*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb080000f; valaddr_reg:x3; val_offset:8364*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8364*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb080001f; valaddr_reg:x3; val_offset:8367*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8367*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb080003f; valaddr_reg:x3; val_offset:8370*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8370*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb080007f; valaddr_reg:x3; val_offset:8373*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8373*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb08000ff; valaddr_reg:x3; val_offset:8376*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8376*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb08001ff; valaddr_reg:x3; val_offset:8379*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8379*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb08003ff; valaddr_reg:x3; val_offset:8382*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8382*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb08007ff; valaddr_reg:x3; val_offset:8385*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8385*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0800fff; valaddr_reg:x3; val_offset:8388*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8388*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0801fff; valaddr_reg:x3; val_offset:8391*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8391*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0803fff; valaddr_reg:x3; val_offset:8394*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8394*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0807fff; valaddr_reg:x3; val_offset:8397*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8397*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb080ffff; valaddr_reg:x3; val_offset:8400*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8400*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb081ffff; valaddr_reg:x3; val_offset:8403*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8403*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb083ffff; valaddr_reg:x3; val_offset:8406*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8406*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb087ffff; valaddr_reg:x3; val_offset:8409*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8409*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb08fffff; valaddr_reg:x3; val_offset:8412*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8412*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb09fffff; valaddr_reg:x3; val_offset:8415*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8415*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0bfffff; valaddr_reg:x3; val_offset:8418*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8418*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0c00000; valaddr_reg:x3; val_offset:8421*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8421*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0e00000; valaddr_reg:x3; val_offset:8424*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8424*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0f00000; valaddr_reg:x3; val_offset:8427*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8427*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0f80000; valaddr_reg:x3; val_offset:8430*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8430*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fc0000; valaddr_reg:x3; val_offset:8433*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8433*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fe0000; valaddr_reg:x3; val_offset:8436*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8436*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ff0000; valaddr_reg:x3; val_offset:8439*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8439*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ff8000; valaddr_reg:x3; val_offset:8442*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8442*0 + 3*21*FLEN/8, x4, x1, x2)

inst_2815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffc000; valaddr_reg:x3; val_offset:8445*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8445*0 + 3*21*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214596607,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214600703,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214608895,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214625279,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214658047,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214723583,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214854655,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215116799,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215641087,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2216689663,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786815,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786816,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2220883968,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2221932544,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222456832,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222718976,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222850048,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222915584,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222948352,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222964736,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222972928,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222977024,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222979072,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980096,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980608,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980864,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980992,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981056,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2106417444,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593856,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593857,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593859,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593863,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593871,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593887,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593919,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833593983,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833594111,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833594367,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833594879,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833595903,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833597951,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833602047,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833610239,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833626623,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833659391,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833724927,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3833855999,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3834118143,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3834642431,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3835691007,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3837788159,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3837788160,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3839885312,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3840933888,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841458176,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841720320,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841851392,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841916928,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841949696,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841966080,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841974272,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841978368,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841980416,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841981440,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841981952,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982208,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982336,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982400,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982432,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982448,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982456,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982460,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982462,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(3841982463,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2106519065,32,FLEN)
NAN_BOXED(3244638793,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178624,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178625,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178627,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178631,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178639,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178655,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178687,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178751,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961178879,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961179135,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961179647,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961180671,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961182719,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961186815,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961195007,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961211391,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961244159,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961309695,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961440767,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2961702911,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2962227199,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2963275775,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2965372927,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2965372928,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2967470080,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2968518656,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969042944,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969305088,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969436160,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969501696,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969534464,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969550848,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
