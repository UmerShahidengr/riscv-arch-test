
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5f8fffff; valaddr_reg:x3; val_offset:85248*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85248*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5f9fffff; valaddr_reg:x3; val_offset:85251*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85251*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fbfffff; valaddr_reg:x3; val_offset:85254*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85254*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fc00000; valaddr_reg:x3; val_offset:85257*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85257*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fe00000; valaddr_reg:x3; val_offset:85260*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85260*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ff00000; valaddr_reg:x3; val_offset:85263*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85263*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ff80000; valaddr_reg:x3; val_offset:85266*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85266*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffc0000; valaddr_reg:x3; val_offset:85269*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85269*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffe0000; valaddr_reg:x3; val_offset:85272*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85272*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fff0000; valaddr_reg:x3; val_offset:85275*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85275*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fff8000; valaddr_reg:x3; val_offset:85278*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85278*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffc000; valaddr_reg:x3; val_offset:85281*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85281*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffe000; valaddr_reg:x3; val_offset:85284*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85284*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffff000; valaddr_reg:x3; val_offset:85287*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85287*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffff800; valaddr_reg:x3; val_offset:85290*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85290*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffc00; valaddr_reg:x3; val_offset:85293*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85293*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffe00; valaddr_reg:x3; val_offset:85296*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85296*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffff00; valaddr_reg:x3; val_offset:85299*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85299*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffff80; valaddr_reg:x3; val_offset:85302*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85302*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffffc0; valaddr_reg:x3; val_offset:85305*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85305*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffffe0; valaddr_reg:x3; val_offset:85308*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85308*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffff0; valaddr_reg:x3; val_offset:85311*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85311*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffff8; valaddr_reg:x3; val_offset:85314*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85314*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffffc; valaddr_reg:x3; val_offset:85317*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85317*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5ffffffe; valaddr_reg:x3; val_offset:85320*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85320*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xbf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x5fffffff; valaddr_reg:x3; val_offset:85323*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85323*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f000001; valaddr_reg:x3; val_offset:85326*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85326*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f000003; valaddr_reg:x3; val_offset:85329*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85329*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f000007; valaddr_reg:x3; val_offset:85332*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85332*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f199999; valaddr_reg:x3; val_offset:85335*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85335*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f249249; valaddr_reg:x3; val_offset:85338*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85338*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f333333; valaddr_reg:x3; val_offset:85341*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85341*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:85344*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85344*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:85347*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85347*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f444444; valaddr_reg:x3; val_offset:85350*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85350*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:85353*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85353*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:85356*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85356*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f666666; valaddr_reg:x3; val_offset:85359*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85359*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:85362*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85362*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:85365*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85365*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:85368*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85368*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x121fe5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x603f39 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f121fe5; op2val:0x3fe03f39;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:85371*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85371*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:85374*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85374*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:85377*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85377*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:85380*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85380*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:85383*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85383*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:85386*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85386*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:85389*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85389*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:85392*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85392*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:85395*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85395*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:85398*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85398*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:85401*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85401*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:85404*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85404*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:85407*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85407*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:85410*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85410*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:85413*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85413*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:85416*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85416*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:85419*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85419*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b800000; valaddr_reg:x3; val_offset:85422*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85422*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b800001; valaddr_reg:x3; val_offset:85425*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85425*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b800003; valaddr_reg:x3; val_offset:85428*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85428*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b800007; valaddr_reg:x3; val_offset:85431*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85431*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b80000f; valaddr_reg:x3; val_offset:85434*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85434*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:85437*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85437*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:85440*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85440*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:85443*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85443*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:85446*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85446*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:85449*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85449*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:85452*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85452*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:85455*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85455*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:85458*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85458*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:85461*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85461*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:85464*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85464*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:85467*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85467*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:85470*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85470*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:85473*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85473*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:85476*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85476*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:85479*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85479*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:85482*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85482*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:85485*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85485*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:85488*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85488*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:85491*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85491*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:85494*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85494*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:85497*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85497*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:85500*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85500*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:85503*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85503*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:85506*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85506*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:85509*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85509*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:85512*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85512*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:85515*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85515*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:85518*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85518*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:85521*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85521*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:85524*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85524*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:85527*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85527*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:85530*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85530*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:85533*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85533*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:85536*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85536*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:85539*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85539*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:85542*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85542*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:85545*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85545*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:85548*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85548*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:85551*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85551*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:85554*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85554*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x128886 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f128886; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:85557*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85557*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:85560*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85560*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:85563*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85563*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:85566*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85566*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:85569*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85569*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:85572*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85572*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:85575*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85575*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:85578*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85578*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:85581*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85581*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:85584*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85584*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:85587*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85587*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:85590*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85590*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:85593*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85593*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:85596*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85596*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:85599*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85599*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:85602*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85602*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:85605*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85605*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:85608*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85608*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:85611*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85611*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:85614*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85614*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:85617*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85617*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:85620*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85620*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:85623*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85623*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:85626*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85626*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:85629*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85629*0 + 3*222*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1603272703,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1604321279,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1606418431,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1606418432,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1608515584,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1609564160,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610088448,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610350592,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610481664,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610547200,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610579968,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610596352,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610604544,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610608640,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610610688,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610611712,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612224,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612480,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612608,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612672,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612704,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612720,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612728,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612732,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612734,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(1610612735,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131894245,32,FLEN)
NAN_BOXED(1071660857,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421632,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421633,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421635,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421639,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421647,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421663,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421695,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421759,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2131921030,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
