
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:85632*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85632*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:85635*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85635*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:85638*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85638*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:85641*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85641*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:85644*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85644*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:85647*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85647*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:85650*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85650*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:85653*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85653*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:85656*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85656*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:85659*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85659*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:85662*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85662*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:85665*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85665*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:85668*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85668*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:85671*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85671*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:85674*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85674*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:85677*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85677*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:85680*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85680*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:85683*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85683*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:85686*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85686*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:85689*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85689*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:85692*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85692*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:85695*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85695*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:85698*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85698*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:85701*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85701*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:85704*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85704*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:85707*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85707*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:85710*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85710*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:85713*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85713*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:85716*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85716*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:85719*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85719*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:85722*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85722*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:85725*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85725*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:85728*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85728*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:85731*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85731*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:85734*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85734*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:85737*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85737*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:85740*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85740*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x12a16e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f12a16e; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:85743*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85743*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:85746*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85746*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:85749*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85749*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:85752*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85752*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:85755*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85755*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:85758*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85758*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:85761*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85761*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:85764*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85764*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:85767*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85767*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:85770*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85770*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:85773*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85773*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:85776*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85776*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:85779*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85779*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:85782*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85782*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:85785*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85785*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:85788*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85788*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:85791*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85791*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:85794*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85794*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:85797*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85797*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:85800*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85800*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:85803*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85803*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:85806*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85806*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:85809*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85809*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:85812*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85812*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:85815*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85815*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:85818*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85818*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:85821*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85821*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:85824*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85824*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:85827*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85827*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:85830*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85830*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:85833*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85833*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:85836*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85836*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:85839*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85839*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:85842*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85842*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:85845*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85845*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:85848*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85848*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:85851*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85851*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:85854*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85854*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:85857*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85857*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:85860*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85860*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:85863*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85863*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:85866*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85866*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:85869*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85869*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:85872*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85872*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:85875*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85875*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:85878*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85878*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:85881*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85881*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:85884*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85884*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:85887*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85887*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:85890*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85890*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:85893*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85893*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:85896*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85896*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:85899*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85899*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:85902*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85902*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:85905*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85905*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:85908*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85908*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:85911*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85911*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:85914*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85914*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:85917*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85917*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:85920*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85920*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:85923*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85923*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:85926*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85926*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x134b54 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f134b54; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:85929*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85929*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c000000; valaddr_reg:x3; val_offset:85932*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85932*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c000001; valaddr_reg:x3; val_offset:85935*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85935*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c000003; valaddr_reg:x3; val_offset:85938*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85938*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c000007; valaddr_reg:x3; val_offset:85941*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85941*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c00000f; valaddr_reg:x3; val_offset:85944*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85944*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c00001f; valaddr_reg:x3; val_offset:85947*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85947*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c00003f; valaddr_reg:x3; val_offset:85950*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85950*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c00007f; valaddr_reg:x3; val_offset:85953*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85953*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c0000ff; valaddr_reg:x3; val_offset:85956*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85956*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c0001ff; valaddr_reg:x3; val_offset:85959*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85959*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c0003ff; valaddr_reg:x3; val_offset:85962*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85962*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c0007ff; valaddr_reg:x3; val_offset:85965*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85965*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c000fff; valaddr_reg:x3; val_offset:85968*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85968*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c001fff; valaddr_reg:x3; val_offset:85971*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85971*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c003fff; valaddr_reg:x3; val_offset:85974*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85974*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c007fff; valaddr_reg:x3; val_offset:85977*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85977*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c00ffff; valaddr_reg:x3; val_offset:85980*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85980*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c01ffff; valaddr_reg:x3; val_offset:85983*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85983*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c03ffff; valaddr_reg:x3; val_offset:85986*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85986*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c07ffff; valaddr_reg:x3; val_offset:85989*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85989*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c0fffff; valaddr_reg:x3; val_offset:85992*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85992*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c1fffff; valaddr_reg:x3; val_offset:85995*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85995*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c3fffff; valaddr_reg:x3; val_offset:85998*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85998*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c400000; valaddr_reg:x3; val_offset:86001*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86001*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c600000; valaddr_reg:x3; val_offset:86004*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86004*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c700000; valaddr_reg:x3; val_offset:86007*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86007*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c780000; valaddr_reg:x3; val_offset:86010*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86010*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5e5df6 and fs3 == 0 and fe3 == 0xf8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135c25; op2val:0x3fde5df6;
op3val:0x7c7c0000; valaddr_reg:x3; val_offset:86013*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86013*0 + 3*223*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2131927406,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2131970900,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374784,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374785,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374787,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374791,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374799,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374815,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374847,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080374911,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080375039,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080375295,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080375807,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080376831,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080378879,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080382975,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080391167,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080407551,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080440319,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080505855,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080636927,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2080899071,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2081423359,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2082471935,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2084569087,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2084569088,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2086666240,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2087714816,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2088239104,32,FLEN)
NAN_BOXED(2131975205,32,FLEN)
NAN_BOXED(1071537654,32,FLEN)
NAN_BOXED(2088501248,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
