
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:86784*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86784*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:86787*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86787*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:86790*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86790*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:86793*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86793*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:86796*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86796*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:86799*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86799*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:86802*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86802*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:86805*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86805*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:86808*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86808*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:86811*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86811*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:86814*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86814*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:86817*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86817*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:86820*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86820*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:86823*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86823*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:86826*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86826*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:86829*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86829*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:86832*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86832*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:86835*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86835*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:86838*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86838*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:86841*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86841*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:86844*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86844*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:86847*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86847*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:86850*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86850*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:86853*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86853*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:86856*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86856*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x14f5f8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f14f5f8; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:86859*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86859*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a800000; valaddr_reg:x3; val_offset:86862*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86862*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a800001; valaddr_reg:x3; val_offset:86865*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86865*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a800003; valaddr_reg:x3; val_offset:86868*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86868*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a800007; valaddr_reg:x3; val_offset:86871*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86871*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a80000f; valaddr_reg:x3; val_offset:86874*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86874*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a80001f; valaddr_reg:x3; val_offset:86877*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86877*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a80003f; valaddr_reg:x3; val_offset:86880*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86880*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a80007f; valaddr_reg:x3; val_offset:86883*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86883*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a8000ff; valaddr_reg:x3; val_offset:86886*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86886*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a8001ff; valaddr_reg:x3; val_offset:86889*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86889*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a8003ff; valaddr_reg:x3; val_offset:86892*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86892*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a8007ff; valaddr_reg:x3; val_offset:86895*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86895*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a800fff; valaddr_reg:x3; val_offset:86898*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86898*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a801fff; valaddr_reg:x3; val_offset:86901*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86901*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a803fff; valaddr_reg:x3; val_offset:86904*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86904*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a807fff; valaddr_reg:x3; val_offset:86907*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86907*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a80ffff; valaddr_reg:x3; val_offset:86910*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86910*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a81ffff; valaddr_reg:x3; val_offset:86913*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86913*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a83ffff; valaddr_reg:x3; val_offset:86916*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86916*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a87ffff; valaddr_reg:x3; val_offset:86919*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86919*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a8fffff; valaddr_reg:x3; val_offset:86922*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86922*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2a9fffff; valaddr_reg:x3; val_offset:86925*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86925*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2abfffff; valaddr_reg:x3; val_offset:86928*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86928*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2ac00000; valaddr_reg:x3; val_offset:86931*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86931*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2ae00000; valaddr_reg:x3; val_offset:86934*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86934*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2af00000; valaddr_reg:x3; val_offset:86937*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86937*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2af80000; valaddr_reg:x3; val_offset:86940*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86940*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afc0000; valaddr_reg:x3; val_offset:86943*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86943*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afe0000; valaddr_reg:x3; val_offset:86946*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86946*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2aff0000; valaddr_reg:x3; val_offset:86949*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86949*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2aff8000; valaddr_reg:x3; val_offset:86952*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86952*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affc000; valaddr_reg:x3; val_offset:86955*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86955*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affe000; valaddr_reg:x3; val_offset:86958*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86958*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afff000; valaddr_reg:x3; val_offset:86961*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86961*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afff800; valaddr_reg:x3; val_offset:86964*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86964*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffc00; valaddr_reg:x3; val_offset:86967*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86967*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffe00; valaddr_reg:x3; val_offset:86970*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86970*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affff00; valaddr_reg:x3; val_offset:86973*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86973*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affff80; valaddr_reg:x3; val_offset:86976*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86976*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affffc0; valaddr_reg:x3; val_offset:86979*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86979*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affffe0; valaddr_reg:x3; val_offset:86982*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86982*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffff0; valaddr_reg:x3; val_offset:86985*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86985*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffff8; valaddr_reg:x3; val_offset:86988*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86988*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffffc; valaddr_reg:x3; val_offset:86991*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86991*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2afffffe; valaddr_reg:x3; val_offset:86994*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86994*0 + 3*226*FLEN/8, x4, x1, x2)

inst_28999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x2affffff; valaddr_reg:x3; val_offset:86997*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86997*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:87000*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87000*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:87003*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87003*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:87006*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87006*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:87009*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87009*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:87012*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87012*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:87015*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87015*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:87018*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87018*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:87021*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87021*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:87024*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87024*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:87027*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87027*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:87030*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87030*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:87033*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87033*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:87036*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87036*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:87039*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87039*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:87042*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87042*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15429f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x36e24d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15429f; op2val:0x36e24d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:87045*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87045*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:87048*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87048*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:87051*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87051*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:87054*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87054*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:87057*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87057*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:87060*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87060*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:87063*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87063*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:87066*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87066*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:87069*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87069*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:87072*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87072*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:87075*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87075*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:87078*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87078*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:87081*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87081*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:87084*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87084*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:87087*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87087*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:87090*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87090*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:87093*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87093*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:87096*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87096*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:87099*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87099*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:87102*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87102*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:87105*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87105*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:87108*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87108*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:87111*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87111*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:87114*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87114*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:87117*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87117*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:87120*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87120*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:87123*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87123*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:87126*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87126*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:87129*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87129*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:87132*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87132*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:87135*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87135*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:87138*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87138*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:87141*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87141*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:87144*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87144*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:87147*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87147*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:87150*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87150*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:87153*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87153*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:87156*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87156*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:87159*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87159*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:87162*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87162*0 + 3*226*FLEN/8, x4, x1, x2)

inst_29055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:87165*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87165*0 + 3*226*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2132080120,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031680,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031681,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031683,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031687,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031695,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031711,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031743,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031807,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713031935,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713032191,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713032703,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713033727,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713035775,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713039871,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713048063,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713064447,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713097215,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713162751,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713293823,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(713555967,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(714080255,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(715128831,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(717225983,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(717225984,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(719323136,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(720371712,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(720896000,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721158144,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721289216,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721354752,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721387520,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721403904,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721412096,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721416192,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721418240,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721419264,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721419776,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420032,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420160,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420224,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420256,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420272,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420280,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420284,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420286,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(721420287,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132099743,32,FLEN)
NAN_BOXED(3596877,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
