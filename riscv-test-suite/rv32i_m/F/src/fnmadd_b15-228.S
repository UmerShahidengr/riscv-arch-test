
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:87168*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87168*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:87171*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87171*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:87174*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87174*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:87177*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87177*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:87180*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87180*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:87183*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87183*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:87186*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87186*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:87189*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87189*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:87192*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87192*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:87195*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87195*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:87198*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87198*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:87201*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87201*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:87204*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87204*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:87207*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87207*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:87210*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87210*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:87213*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87213*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:87216*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87216*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:87219*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87219*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:87222*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87222*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:87225*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87225*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:87228*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87228*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1553c3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1553c3; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:87231*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87231*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc000000; valaddr_reg:x3; val_offset:87234*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87234*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc000001; valaddr_reg:x3; val_offset:87237*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87237*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc000003; valaddr_reg:x3; val_offset:87240*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87240*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc000007; valaddr_reg:x3; val_offset:87243*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87243*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc00000f; valaddr_reg:x3; val_offset:87246*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87246*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc00001f; valaddr_reg:x3; val_offset:87249*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87249*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc00003f; valaddr_reg:x3; val_offset:87252*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87252*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc00007f; valaddr_reg:x3; val_offset:87255*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87255*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc0000ff; valaddr_reg:x3; val_offset:87258*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87258*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc0001ff; valaddr_reg:x3; val_offset:87261*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87261*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc0003ff; valaddr_reg:x3; val_offset:87264*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87264*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc0007ff; valaddr_reg:x3; val_offset:87267*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87267*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc000fff; valaddr_reg:x3; val_offset:87270*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87270*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc001fff; valaddr_reg:x3; val_offset:87273*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87273*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc003fff; valaddr_reg:x3; val_offset:87276*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87276*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc007fff; valaddr_reg:x3; val_offset:87279*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87279*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc00ffff; valaddr_reg:x3; val_offset:87282*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87282*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc01ffff; valaddr_reg:x3; val_offset:87285*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87285*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc03ffff; valaddr_reg:x3; val_offset:87288*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87288*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc07ffff; valaddr_reg:x3; val_offset:87291*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87291*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc0fffff; valaddr_reg:x3; val_offset:87294*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87294*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc1fffff; valaddr_reg:x3; val_offset:87297*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87297*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc3fffff; valaddr_reg:x3; val_offset:87300*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87300*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc400000; valaddr_reg:x3; val_offset:87303*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87303*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc600000; valaddr_reg:x3; val_offset:87306*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87306*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc700000; valaddr_reg:x3; val_offset:87309*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87309*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc780000; valaddr_reg:x3; val_offset:87312*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87312*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7c0000; valaddr_reg:x3; val_offset:87315*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87315*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7e0000; valaddr_reg:x3; val_offset:87318*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87318*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7f0000; valaddr_reg:x3; val_offset:87321*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87321*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7f8000; valaddr_reg:x3; val_offset:87324*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87324*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fc000; valaddr_reg:x3; val_offset:87327*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87327*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fe000; valaddr_reg:x3; val_offset:87330*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87330*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ff000; valaddr_reg:x3; val_offset:87333*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87333*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ff800; valaddr_reg:x3; val_offset:87336*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87336*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffc00; valaddr_reg:x3; val_offset:87339*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87339*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffe00; valaddr_reg:x3; val_offset:87342*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87342*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fff00; valaddr_reg:x3; val_offset:87345*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87345*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fff80; valaddr_reg:x3; val_offset:87348*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87348*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fffc0; valaddr_reg:x3; val_offset:87351*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87351*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fffe0; valaddr_reg:x3; val_offset:87354*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87354*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffff0; valaddr_reg:x3; val_offset:87357*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87357*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffff8; valaddr_reg:x3; val_offset:87360*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87360*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffffc; valaddr_reg:x3; val_offset:87363*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87363*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7ffffe; valaddr_reg:x3; val_offset:87366*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87366*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xf8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xfc7fffff; valaddr_reg:x3; val_offset:87369*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87369*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff000001; valaddr_reg:x3; val_offset:87372*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87372*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff000003; valaddr_reg:x3; val_offset:87375*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87375*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff000007; valaddr_reg:x3; val_offset:87378*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87378*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff199999; valaddr_reg:x3; val_offset:87381*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87381*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff249249; valaddr_reg:x3; val_offset:87384*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87384*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff333333; valaddr_reg:x3; val_offset:87387*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87387*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:87390*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87390*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:87393*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87393*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff444444; valaddr_reg:x3; val_offset:87396*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87396*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:87399*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87399*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:87402*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87402*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff666666; valaddr_reg:x3; val_offset:87405*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87405*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:87408*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87408*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:87411*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87411*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:87414*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87414*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x157706 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x5b3c40 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f157706; op2val:0xbfdb3c40;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:87417*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87417*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb000000; valaddr_reg:x3; val_offset:87420*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87420*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb000001; valaddr_reg:x3; val_offset:87423*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87423*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb000003; valaddr_reg:x3; val_offset:87426*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87426*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb000007; valaddr_reg:x3; val_offset:87429*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87429*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb00000f; valaddr_reg:x3; val_offset:87432*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87432*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb00001f; valaddr_reg:x3; val_offset:87435*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87435*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb00003f; valaddr_reg:x3; val_offset:87438*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87438*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb00007f; valaddr_reg:x3; val_offset:87441*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87441*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb0000ff; valaddr_reg:x3; val_offset:87444*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87444*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb0001ff; valaddr_reg:x3; val_offset:87447*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87447*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb0003ff; valaddr_reg:x3; val_offset:87450*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87450*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb0007ff; valaddr_reg:x3; val_offset:87453*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87453*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb000fff; valaddr_reg:x3; val_offset:87456*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87456*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb001fff; valaddr_reg:x3; val_offset:87459*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87459*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb003fff; valaddr_reg:x3; val_offset:87462*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87462*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb007fff; valaddr_reg:x3; val_offset:87465*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87465*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb00ffff; valaddr_reg:x3; val_offset:87468*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87468*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb01ffff; valaddr_reg:x3; val_offset:87471*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87471*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb03ffff; valaddr_reg:x3; val_offset:87474*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87474*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb07ffff; valaddr_reg:x3; val_offset:87477*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87477*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb0fffff; valaddr_reg:x3; val_offset:87480*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87480*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb1fffff; valaddr_reg:x3; val_offset:87483*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87483*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb3fffff; valaddr_reg:x3; val_offset:87486*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87486*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb400000; valaddr_reg:x3; val_offset:87489*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87489*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb600000; valaddr_reg:x3; val_offset:87492*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87492*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb700000; valaddr_reg:x3; val_offset:87495*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87495*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb780000; valaddr_reg:x3; val_offset:87498*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87498*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7c0000; valaddr_reg:x3; val_offset:87501*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87501*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7e0000; valaddr_reg:x3; val_offset:87504*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87504*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7f0000; valaddr_reg:x3; val_offset:87507*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87507*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7f8000; valaddr_reg:x3; val_offset:87510*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87510*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fc000; valaddr_reg:x3; val_offset:87513*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87513*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fe000; valaddr_reg:x3; val_offset:87516*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87516*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ff000; valaddr_reg:x3; val_offset:87519*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87519*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ff800; valaddr_reg:x3; val_offset:87522*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87522*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ffc00; valaddr_reg:x3; val_offset:87525*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87525*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ffe00; valaddr_reg:x3; val_offset:87528*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87528*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fff00; valaddr_reg:x3; val_offset:87531*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87531*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fff80; valaddr_reg:x3; val_offset:87534*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87534*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fffc0; valaddr_reg:x3; val_offset:87537*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87537*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7fffe0; valaddr_reg:x3; val_offset:87540*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87540*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ffff0; valaddr_reg:x3; val_offset:87543*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87543*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ffff8; valaddr_reg:x3; val_offset:87546*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87546*0 + 3*227*FLEN/8, x4, x1, x2)

inst_29183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15abf0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x36bbaf and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15abf0; op2val:0x8036bbaf;
op3val:0xbb7ffffc; valaddr_reg:x3; val_offset:87549*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87549*0 + 3*227*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340420608,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421120,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421376,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421504,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421568,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421600,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421616,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421624,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421628,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421630,32,FLEN)
NAN_BOXED(2132104131,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421631,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858432,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858433,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858435,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858439,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858447,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858463,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858495,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858559,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858687,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227858943,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227859455,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227860479,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227862527,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227866623,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227874815,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227891199,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227923967,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4227989503,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4228120575,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4228382719,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4228907007,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4229955583,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4232052735,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4232052736,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4234149888,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4235198464,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4235722752,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4235984896,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236115968,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236181504,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236214272,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236230656,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236238848,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236242944,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236244992,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236246016,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236246528,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236246784,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236246912,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236246976,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247008,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247024,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247032,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247036,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247038,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4236247039,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132113158,32,FLEN)
NAN_BOXED(3218816064,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339392,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339393,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339395,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339399,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339407,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339423,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339455,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339519,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339647,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137339903,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137340415,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137341439,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137343487,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137347583,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137355775,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137372159,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137404927,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137470463,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137601535,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3137863679,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3138387967,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3139436543,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3141533695,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3141533696,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3143630848,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3144679424,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145203712,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145465856,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145596928,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145662464,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145695232,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145711616,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145719808,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145723904,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145725952,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145726976,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727488,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727744,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727872,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727936,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727968,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727984,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727992,32,FLEN)
NAN_BOXED(2132126704,32,FLEN)
NAN_BOXED(2151070639,32,FLEN)
NAN_BOXED(3145727996,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
