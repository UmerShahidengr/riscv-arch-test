
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffe000; valaddr_reg:x3; val_offset:8448*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8448*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fff000; valaddr_reg:x3; val_offset:8451*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8451*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fff800; valaddr_reg:x3; val_offset:8454*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8454*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffc00; valaddr_reg:x3; val_offset:8457*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8457*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffe00; valaddr_reg:x3; val_offset:8460*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8460*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffff00; valaddr_reg:x3; val_offset:8463*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8463*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffff80; valaddr_reg:x3; val_offset:8466*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8466*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffffc0; valaddr_reg:x3; val_offset:8469*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8469*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffffe0; valaddr_reg:x3; val_offset:8472*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8472*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffff0; valaddr_reg:x3; val_offset:8475*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8475*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffff8; valaddr_reg:x3; val_offset:8478*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8478*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffffc; valaddr_reg:x3; val_offset:8481*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8481*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0fffffe; valaddr_reg:x3; val_offset:8484*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8484*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x61 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xb0ffffff; valaddr_reg:x3; val_offset:8487*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8487*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:8490*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8490*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:8493*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8493*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:8496*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8496*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:8499*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8499*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:8502*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8502*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:8505*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8505*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:8508*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8508*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:8511*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8511*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:8514*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8514*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:8517*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8517*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:8520*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8520*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:8523*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8523*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:8526*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8526*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:8529*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8529*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:8532*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8532*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x141406 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x5d49d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d941406; op2val:0x815d49d6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:8535*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8535*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800000; valaddr_reg:x3; val_offset:8538*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8538*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800001; valaddr_reg:x3; val_offset:8541*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8541*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800003; valaddr_reg:x3; val_offset:8544*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8544*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800007; valaddr_reg:x3; val_offset:8547*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8547*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080000f; valaddr_reg:x3; val_offset:8550*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8550*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080001f; valaddr_reg:x3; val_offset:8553*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8553*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080003f; valaddr_reg:x3; val_offset:8556*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8556*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080007f; valaddr_reg:x3; val_offset:8559*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8559*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08000ff; valaddr_reg:x3; val_offset:8562*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8562*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08001ff; valaddr_reg:x3; val_offset:8565*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8565*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08003ff; valaddr_reg:x3; val_offset:8568*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8568*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08007ff; valaddr_reg:x3; val_offset:8571*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8571*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0800fff; valaddr_reg:x3; val_offset:8574*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8574*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0801fff; valaddr_reg:x3; val_offset:8577*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8577*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0803fff; valaddr_reg:x3; val_offset:8580*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8580*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0807fff; valaddr_reg:x3; val_offset:8583*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8583*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe080ffff; valaddr_reg:x3; val_offset:8586*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8586*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe081ffff; valaddr_reg:x3; val_offset:8589*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8589*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe083ffff; valaddr_reg:x3; val_offset:8592*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8592*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe087ffff; valaddr_reg:x3; val_offset:8595*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8595*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe08fffff; valaddr_reg:x3; val_offset:8598*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8598*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe09fffff; valaddr_reg:x3; val_offset:8601*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8601*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0bfffff; valaddr_reg:x3; val_offset:8604*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8604*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0c00000; valaddr_reg:x3; val_offset:8607*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8607*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0e00000; valaddr_reg:x3; val_offset:8610*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8610*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0f00000; valaddr_reg:x3; val_offset:8613*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8613*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0f80000; valaddr_reg:x3; val_offset:8616*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8616*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fc0000; valaddr_reg:x3; val_offset:8619*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8619*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fe0000; valaddr_reg:x3; val_offset:8622*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8622*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ff0000; valaddr_reg:x3; val_offset:8625*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8625*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ff8000; valaddr_reg:x3; val_offset:8628*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8628*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffc000; valaddr_reg:x3; val_offset:8631*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8631*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffe000; valaddr_reg:x3; val_offset:8634*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8634*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fff000; valaddr_reg:x3; val_offset:8637*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8637*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fff800; valaddr_reg:x3; val_offset:8640*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8640*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffc00; valaddr_reg:x3; val_offset:8643*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8643*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffe00; valaddr_reg:x3; val_offset:8646*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8646*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffff00; valaddr_reg:x3; val_offset:8649*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8649*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffff80; valaddr_reg:x3; val_offset:8652*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8652*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffc0; valaddr_reg:x3; val_offset:8655*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8655*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffe0; valaddr_reg:x3; val_offset:8658*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8658*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffff0; valaddr_reg:x3; val_offset:8661*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8661*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffff8; valaddr_reg:x3; val_offset:8664*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8664*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffffc; valaddr_reg:x3; val_offset:8667*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8667*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0fffffe; valaddr_reg:x3; val_offset:8670*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8670*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xe0ffffff; valaddr_reg:x3; val_offset:8673*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8673*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000001; valaddr_reg:x3; val_offset:8676*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8676*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000003; valaddr_reg:x3; val_offset:8679*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8679*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff000007; valaddr_reg:x3; val_offset:8682*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8682*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff199999; valaddr_reg:x3; val_offset:8685*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8685*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2896:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff249249; valaddr_reg:x3; val_offset:8688*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8688*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2897:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff333333; valaddr_reg:x3; val_offset:8691*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8691*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2898:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:8694*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8694*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2899:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:8697*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8697*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2900:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff444444; valaddr_reg:x3; val_offset:8700*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8700*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2901:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:8703*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8703*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2902:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:8706*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8706*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2903:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff666666; valaddr_reg:x3; val_offset:8709*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8709*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2904:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:8712*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8712*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:8715*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8715*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:8718*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8718*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x177eed and fs2 == 1 and fe2 == 0x82 and fm2 == 0x584be0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d977eed; op2val:0xc1584be0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:8721*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8721*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7000000; valaddr_reg:x3; val_offset:8724*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8724*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7000001; valaddr_reg:x3; val_offset:8727*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8727*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2910:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7000003; valaddr_reg:x3; val_offset:8730*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8730*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2911:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7000007; valaddr_reg:x3; val_offset:8733*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8733*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2912:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa700000f; valaddr_reg:x3; val_offset:8736*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8736*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2913:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa700001f; valaddr_reg:x3; val_offset:8739*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8739*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2914:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa700003f; valaddr_reg:x3; val_offset:8742*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8742*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2915:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa700007f; valaddr_reg:x3; val_offset:8745*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8745*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2916:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa70000ff; valaddr_reg:x3; val_offset:8748*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8748*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2917:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa70001ff; valaddr_reg:x3; val_offset:8751*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8751*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2918:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa70003ff; valaddr_reg:x3; val_offset:8754*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8754*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2919:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa70007ff; valaddr_reg:x3; val_offset:8757*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8757*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2920:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7000fff; valaddr_reg:x3; val_offset:8760*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8760*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2921:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7001fff; valaddr_reg:x3; val_offset:8763*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8763*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2922:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7003fff; valaddr_reg:x3; val_offset:8766*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8766*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2923:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7007fff; valaddr_reg:x3; val_offset:8769*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8769*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2924:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa700ffff; valaddr_reg:x3; val_offset:8772*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8772*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2925:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa701ffff; valaddr_reg:x3; val_offset:8775*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8775*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2926:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa703ffff; valaddr_reg:x3; val_offset:8778*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8778*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2927:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa707ffff; valaddr_reg:x3; val_offset:8781*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8781*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2928:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa70fffff; valaddr_reg:x3; val_offset:8784*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8784*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2929:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa71fffff; valaddr_reg:x3; val_offset:8787*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8787*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2930:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa73fffff; valaddr_reg:x3; val_offset:8790*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8790*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2931:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7400000; valaddr_reg:x3; val_offset:8793*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8793*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2932:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7600000; valaddr_reg:x3; val_offset:8796*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8796*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2933:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7700000; valaddr_reg:x3; val_offset:8799*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8799*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2934:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa7780000; valaddr_reg:x3; val_offset:8802*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8802*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2935:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77c0000; valaddr_reg:x3; val_offset:8805*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8805*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2936:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77e0000; valaddr_reg:x3; val_offset:8808*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8808*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2937:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77f0000; valaddr_reg:x3; val_offset:8811*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8811*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2938:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77f8000; valaddr_reg:x3; val_offset:8814*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8814*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2939:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fc000; valaddr_reg:x3; val_offset:8817*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8817*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2940:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fe000; valaddr_reg:x3; val_offset:8820*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8820*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2941:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ff000; valaddr_reg:x3; val_offset:8823*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8823*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2942:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ff800; valaddr_reg:x3; val_offset:8826*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8826*0 + 3*22*FLEN/8, x4, x1, x2)

inst_2943:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffc00; valaddr_reg:x3; val_offset:8829*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8829*0 + 3*22*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969559040,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969563136,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969565184,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969566208,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969566720,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969566976,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567104,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567168,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567200,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567216,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567224,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567228,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567230,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(2969567231,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2106856454,32,FLEN)
NAN_BOXED(2170374614,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484992,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484993,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484995,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766484999,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485007,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485023,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485055,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485119,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485247,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766485503,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766486015,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766487039,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766489087,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766493183,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766501375,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766517759,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766550527,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766616063,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3766747135,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3767009279,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3767533567,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3768582143,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3770679295,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3770679296,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3772776448,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3773825024,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774349312,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774611456,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774742528,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774808064,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774840832,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774857216,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774865408,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774869504,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774871552,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774872576,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873088,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873344,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873472,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873536,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873568,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873584,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873592,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873596,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873598,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(3774873599,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2107080429,32,FLEN)
NAN_BOXED(3243789280,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795072,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795073,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795075,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795079,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795087,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795103,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795135,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795199,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795327,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801795583,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801796095,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801797119,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801799167,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801803263,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801811455,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801827839,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801860607,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2801926143,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2802057215,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2802319359,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2802843647,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2803892223,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2805989375,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2805989376,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2808086528,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2809135104,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2809659392,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2809921536,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810052608,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810118144,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810150912,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810167296,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810175488,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810179584,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810181632,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810182656,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
