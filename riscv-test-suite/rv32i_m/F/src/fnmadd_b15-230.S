
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f000007; valaddr_reg:x3; val_offset:87936*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87936*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f199999; valaddr_reg:x3; val_offset:87939*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87939*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f249249; valaddr_reg:x3; val_offset:87942*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87942*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f333333; valaddr_reg:x3; val_offset:87945*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87945*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:87948*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87948*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:87951*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87951*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f444444; valaddr_reg:x3; val_offset:87954*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87954*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:87957*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87957*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:87960*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87960*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f666666; valaddr_reg:x3; val_offset:87963*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87963*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:87966*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87966*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:87969*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87969*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:87972*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87972*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x163c25 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a1c98 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f163c25; op2val:0x3fda1c98;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:87975*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87975*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66800000; valaddr_reg:x3; val_offset:87978*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87978*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66800001; valaddr_reg:x3; val_offset:87981*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87981*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66800003; valaddr_reg:x3; val_offset:87984*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87984*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66800007; valaddr_reg:x3; val_offset:87987*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87987*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6680000f; valaddr_reg:x3; val_offset:87990*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87990*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6680001f; valaddr_reg:x3; val_offset:87993*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87993*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6680003f; valaddr_reg:x3; val_offset:87996*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87996*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6680007f; valaddr_reg:x3; val_offset:87999*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 87999*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x668000ff; valaddr_reg:x3; val_offset:88002*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88002*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x668001ff; valaddr_reg:x3; val_offset:88005*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88005*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x668003ff; valaddr_reg:x3; val_offset:88008*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88008*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x668007ff; valaddr_reg:x3; val_offset:88011*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88011*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66800fff; valaddr_reg:x3; val_offset:88014*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88014*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66801fff; valaddr_reg:x3; val_offset:88017*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88017*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66803fff; valaddr_reg:x3; val_offset:88020*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88020*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66807fff; valaddr_reg:x3; val_offset:88023*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88023*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6680ffff; valaddr_reg:x3; val_offset:88026*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88026*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6681ffff; valaddr_reg:x3; val_offset:88029*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88029*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6683ffff; valaddr_reg:x3; val_offset:88032*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88032*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x6687ffff; valaddr_reg:x3; val_offset:88035*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88035*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x668fffff; valaddr_reg:x3; val_offset:88038*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88038*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x669fffff; valaddr_reg:x3; val_offset:88041*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88041*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66bfffff; valaddr_reg:x3; val_offset:88044*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88044*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66c00000; valaddr_reg:x3; val_offset:88047*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88047*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66e00000; valaddr_reg:x3; val_offset:88050*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88050*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66f00000; valaddr_reg:x3; val_offset:88053*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88053*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66f80000; valaddr_reg:x3; val_offset:88056*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88056*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fc0000; valaddr_reg:x3; val_offset:88059*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88059*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fe0000; valaddr_reg:x3; val_offset:88062*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88062*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ff0000; valaddr_reg:x3; val_offset:88065*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88065*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ff8000; valaddr_reg:x3; val_offset:88068*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88068*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffc000; valaddr_reg:x3; val_offset:88071*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88071*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffe000; valaddr_reg:x3; val_offset:88074*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88074*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fff000; valaddr_reg:x3; val_offset:88077*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88077*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fff800; valaddr_reg:x3; val_offset:88080*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88080*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffc00; valaddr_reg:x3; val_offset:88083*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88083*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffe00; valaddr_reg:x3; val_offset:88086*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88086*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffff00; valaddr_reg:x3; val_offset:88089*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88089*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffff80; valaddr_reg:x3; val_offset:88092*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88092*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffffc0; valaddr_reg:x3; val_offset:88095*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88095*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffffe0; valaddr_reg:x3; val_offset:88098*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88098*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffff0; valaddr_reg:x3; val_offset:88101*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88101*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffff8; valaddr_reg:x3; val_offset:88104*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88104*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffffc; valaddr_reg:x3; val_offset:88107*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88107*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66fffffe; valaddr_reg:x3; val_offset:88110*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88110*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xcd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x66ffffff; valaddr_reg:x3; val_offset:88113*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88113*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f000001; valaddr_reg:x3; val_offset:88116*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88116*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f000003; valaddr_reg:x3; val_offset:88119*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88119*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f000007; valaddr_reg:x3; val_offset:88122*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88122*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f199999; valaddr_reg:x3; val_offset:88125*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88125*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f249249; valaddr_reg:x3; val_offset:88128*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88128*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f333333; valaddr_reg:x3; val_offset:88131*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88131*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:88134*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88134*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:88137*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88137*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f444444; valaddr_reg:x3; val_offset:88140*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88140*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:88143*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88143*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:88146*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88146*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f666666; valaddr_reg:x3; val_offset:88149*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88149*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:88152*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88152*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:88155*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88155*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:88158*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88158*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165a4e and fs2 == 0 and fe2 == 0x7f and fm2 == 0x59f0d7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165a4e; op2val:0x3fd9f0d7;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:88161*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88161*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbf800001; valaddr_reg:x3; val_offset:88164*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88164*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbf800003; valaddr_reg:x3; val_offset:88167*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88167*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbf800007; valaddr_reg:x3; val_offset:88170*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88170*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbf999999; valaddr_reg:x3; val_offset:88173*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88173*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:88176*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88176*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:88179*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88179*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:88182*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88182*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:88185*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88185*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:88188*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88188*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:88191*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88191*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:88194*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88194*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:88197*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88197*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:88200*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88200*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:88203*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88203*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:88206*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88206*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:88209*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88209*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb000000; valaddr_reg:x3; val_offset:88212*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88212*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb000001; valaddr_reg:x3; val_offset:88215*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88215*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb000003; valaddr_reg:x3; val_offset:88218*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88218*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb000007; valaddr_reg:x3; val_offset:88221*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88221*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb00000f; valaddr_reg:x3; val_offset:88224*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88224*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb00001f; valaddr_reg:x3; val_offset:88227*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88227*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb00003f; valaddr_reg:x3; val_offset:88230*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88230*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb00007f; valaddr_reg:x3; val_offset:88233*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88233*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb0000ff; valaddr_reg:x3; val_offset:88236*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88236*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb0001ff; valaddr_reg:x3; val_offset:88239*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88239*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb0003ff; valaddr_reg:x3; val_offset:88242*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88242*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb0007ff; valaddr_reg:x3; val_offset:88245*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88245*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb000fff; valaddr_reg:x3; val_offset:88248*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88248*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb001fff; valaddr_reg:x3; val_offset:88251*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88251*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb003fff; valaddr_reg:x3; val_offset:88254*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88254*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb007fff; valaddr_reg:x3; val_offset:88257*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88257*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb00ffff; valaddr_reg:x3; val_offset:88260*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88260*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb01ffff; valaddr_reg:x3; val_offset:88263*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88263*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb03ffff; valaddr_reg:x3; val_offset:88266*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88266*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb07ffff; valaddr_reg:x3; val_offset:88269*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88269*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb0fffff; valaddr_reg:x3; val_offset:88272*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88272*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb1fffff; valaddr_reg:x3; val_offset:88275*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88275*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb3fffff; valaddr_reg:x3; val_offset:88278*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88278*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb400000; valaddr_reg:x3; val_offset:88281*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88281*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb600000; valaddr_reg:x3; val_offset:88284*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88284*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb700000; valaddr_reg:x3; val_offset:88287*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88287*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb780000; valaddr_reg:x3; val_offset:88290*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88290*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7c0000; valaddr_reg:x3; val_offset:88293*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88293*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7e0000; valaddr_reg:x3; val_offset:88296*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88296*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7f0000; valaddr_reg:x3; val_offset:88299*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88299*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7f8000; valaddr_reg:x3; val_offset:88302*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88302*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7fc000; valaddr_reg:x3; val_offset:88305*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88305*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7fe000; valaddr_reg:x3; val_offset:88308*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88308*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7ff000; valaddr_reg:x3; val_offset:88311*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88311*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7ff800; valaddr_reg:x3; val_offset:88314*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88314*0 + 3*229*FLEN/8, x4, x1, x2)

inst_29439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x16d17d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x365127 and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f16d17d; op2val:0x80365127;
op3val:0xcb7ffc00; valaddr_reg:x3; val_offset:88317*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88317*0 + 3*229*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132163621,32,FLEN)
NAN_BOXED(1071258776,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664640,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664641,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664643,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664647,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664655,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664671,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664703,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664767,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719664895,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719665151,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719665663,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719666687,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719668735,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719672831,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719681023,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719697407,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719730175,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719795711,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1719926783,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1720188927,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1720713215,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1721761791,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1723858943,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1723858944,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1725956096,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1727004672,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1727528960,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1727791104,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1727922176,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1727987712,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728020480,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728036864,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728045056,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728049152,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728051200,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728052224,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728052736,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728052992,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053120,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053184,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053216,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053232,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053240,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053244,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053246,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(1728053247,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132171342,32,FLEN)
NAN_BOXED(1071247575,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774848,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774849,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774851,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774855,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774863,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774879,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774911,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405774975,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405775103,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405775359,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405775871,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405776895,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405778943,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405783039,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405791231,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405807615,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405840383,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3405905919,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3406036991,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3406299135,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3406823423,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3407871999,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3409969151,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3409969152,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3412066304,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3413114880,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3413639168,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3413901312,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414032384,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414097920,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414130688,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414147072,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414155264,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414159360,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414161408,32,FLEN)
NAN_BOXED(2132201853,32,FLEN)
NAN_BOXED(2151043367,32,FLEN)
NAN_BOXED(3414162432,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
