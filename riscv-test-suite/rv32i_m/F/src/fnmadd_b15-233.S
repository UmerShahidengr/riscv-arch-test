
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18345a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18345a; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:89088*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89088*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18345a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18345a; op2val:0x80000000;
op3val:0x80ffffff; valaddr_reg:x3; val_offset:89091*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89091*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3f800001; valaddr_reg:x3; val_offset:89094*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89094*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3f800003; valaddr_reg:x3; val_offset:89097*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89097*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3f800007; valaddr_reg:x3; val_offset:89100*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89100*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3f999999; valaddr_reg:x3; val_offset:89103*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89103*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:89106*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89106*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:89109*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89109*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:89112*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89112*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:89115*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89115*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:89118*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89118*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:89121*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89121*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:89124*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89124*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:89127*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89127*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:89130*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89130*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:89133*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89133*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:89136*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89136*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:89139*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89139*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41000000; valaddr_reg:x3; val_offset:89142*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89142*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41000001; valaddr_reg:x3; val_offset:89145*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89145*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41000003; valaddr_reg:x3; val_offset:89148*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89148*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41000007; valaddr_reg:x3; val_offset:89151*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89151*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4100000f; valaddr_reg:x3; val_offset:89154*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89154*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4100001f; valaddr_reg:x3; val_offset:89157*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89157*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4100003f; valaddr_reg:x3; val_offset:89160*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89160*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4100007f; valaddr_reg:x3; val_offset:89163*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89163*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x410000ff; valaddr_reg:x3; val_offset:89166*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89166*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x410001ff; valaddr_reg:x3; val_offset:89169*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89169*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x410003ff; valaddr_reg:x3; val_offset:89172*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89172*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x410007ff; valaddr_reg:x3; val_offset:89175*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89175*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41000fff; valaddr_reg:x3; val_offset:89178*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89178*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41001fff; valaddr_reg:x3; val_offset:89181*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89181*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41003fff; valaddr_reg:x3; val_offset:89184*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89184*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41007fff; valaddr_reg:x3; val_offset:89187*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89187*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4100ffff; valaddr_reg:x3; val_offset:89190*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89190*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4101ffff; valaddr_reg:x3; val_offset:89193*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89193*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4103ffff; valaddr_reg:x3; val_offset:89196*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89196*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x4107ffff; valaddr_reg:x3; val_offset:89199*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89199*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x410fffff; valaddr_reg:x3; val_offset:89202*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89202*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x411fffff; valaddr_reg:x3; val_offset:89205*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89205*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x413fffff; valaddr_reg:x3; val_offset:89208*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89208*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41400000; valaddr_reg:x3; val_offset:89211*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89211*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41600000; valaddr_reg:x3; val_offset:89214*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89214*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41700000; valaddr_reg:x3; val_offset:89217*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89217*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x41780000; valaddr_reg:x3; val_offset:89220*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89220*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417c0000; valaddr_reg:x3; val_offset:89223*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89223*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417e0000; valaddr_reg:x3; val_offset:89226*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89226*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417f0000; valaddr_reg:x3; val_offset:89229*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89229*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417f8000; valaddr_reg:x3; val_offset:89232*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89232*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fc000; valaddr_reg:x3; val_offset:89235*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89235*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fe000; valaddr_reg:x3; val_offset:89238*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89238*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ff000; valaddr_reg:x3; val_offset:89241*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89241*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ff800; valaddr_reg:x3; val_offset:89244*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89244*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffc00; valaddr_reg:x3; val_offset:89247*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89247*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffe00; valaddr_reg:x3; val_offset:89250*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89250*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fff00; valaddr_reg:x3; val_offset:89253*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89253*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fff80; valaddr_reg:x3; val_offset:89256*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89256*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fffc0; valaddr_reg:x3; val_offset:89259*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89259*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fffe0; valaddr_reg:x3; val_offset:89262*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89262*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffff0; valaddr_reg:x3; val_offset:89265*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89265*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffff8; valaddr_reg:x3; val_offset:89268*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89268*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffffc; valaddr_reg:x3; val_offset:89271*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89271*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417ffffe; valaddr_reg:x3; val_offset:89274*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89274*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18def8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x359671 and fs3 == 0 and fe3 == 0x82 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18def8; op2val:0x359671;
op3val:0x417fffff; valaddr_reg:x3; val_offset:89277*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89277*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a000000; valaddr_reg:x3; val_offset:89280*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89280*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a000001; valaddr_reg:x3; val_offset:89283*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89283*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a000003; valaddr_reg:x3; val_offset:89286*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89286*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a000007; valaddr_reg:x3; val_offset:89289*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89289*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a00000f; valaddr_reg:x3; val_offset:89292*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89292*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a00001f; valaddr_reg:x3; val_offset:89295*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89295*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a00003f; valaddr_reg:x3; val_offset:89298*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89298*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a00007f; valaddr_reg:x3; val_offset:89301*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89301*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a0000ff; valaddr_reg:x3; val_offset:89304*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89304*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a0001ff; valaddr_reg:x3; val_offset:89307*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89307*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a0003ff; valaddr_reg:x3; val_offset:89310*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89310*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a0007ff; valaddr_reg:x3; val_offset:89313*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89313*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a000fff; valaddr_reg:x3; val_offset:89316*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89316*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a001fff; valaddr_reg:x3; val_offset:89319*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89319*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a003fff; valaddr_reg:x3; val_offset:89322*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89322*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a007fff; valaddr_reg:x3; val_offset:89325*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89325*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a00ffff; valaddr_reg:x3; val_offset:89328*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89328*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a01ffff; valaddr_reg:x3; val_offset:89331*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89331*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a03ffff; valaddr_reg:x3; val_offset:89334*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89334*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a07ffff; valaddr_reg:x3; val_offset:89337*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89337*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a0fffff; valaddr_reg:x3; val_offset:89340*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89340*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a1fffff; valaddr_reg:x3; val_offset:89343*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89343*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a3fffff; valaddr_reg:x3; val_offset:89346*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89346*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a400000; valaddr_reg:x3; val_offset:89349*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89349*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a600000; valaddr_reg:x3; val_offset:89352*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89352*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a700000; valaddr_reg:x3; val_offset:89355*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89355*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a780000; valaddr_reg:x3; val_offset:89358*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89358*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7c0000; valaddr_reg:x3; val_offset:89361*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89361*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7e0000; valaddr_reg:x3; val_offset:89364*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89364*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7f0000; valaddr_reg:x3; val_offset:89367*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89367*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7f8000; valaddr_reg:x3; val_offset:89370*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89370*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fc000; valaddr_reg:x3; val_offset:89373*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89373*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fe000; valaddr_reg:x3; val_offset:89376*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89376*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ff000; valaddr_reg:x3; val_offset:89379*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89379*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ff800; valaddr_reg:x3; val_offset:89382*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89382*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffc00; valaddr_reg:x3; val_offset:89385*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89385*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffe00; valaddr_reg:x3; val_offset:89388*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89388*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fff00; valaddr_reg:x3; val_offset:89391*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89391*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fff80; valaddr_reg:x3; val_offset:89394*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89394*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fffc0; valaddr_reg:x3; val_offset:89397*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89397*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fffe0; valaddr_reg:x3; val_offset:89400*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89400*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffff0; valaddr_reg:x3; val_offset:89403*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89403*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffff8; valaddr_reg:x3; val_offset:89406*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89406*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffffc; valaddr_reg:x3; val_offset:89409*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89409*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7ffffe; valaddr_reg:x3; val_offset:89412*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89412*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3a7fffff; valaddr_reg:x3; val_offset:89415*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89415*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3f800001; valaddr_reg:x3; val_offset:89418*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89418*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3f800003; valaddr_reg:x3; val_offset:89421*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89421*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3f800007; valaddr_reg:x3; val_offset:89424*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89424*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3f999999; valaddr_reg:x3; val_offset:89427*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89427*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:89430*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89430*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:89433*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89433*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:89436*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89436*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:89439*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89439*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:89442*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89442*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:89445*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89445*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:89448*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89448*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:89451*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89451*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:89454*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89454*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:89457*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89457*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:89460*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89460*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x191448 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3583c7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f191448; op2val:0x3583c7;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:89463*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89463*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:89466*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89466*0 + 3*232*FLEN/8, x4, x1, x2)

inst_29823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:89469*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89469*0 + 3*232*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132292698,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2132292698,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260863,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519040,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519041,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519043,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519047,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519055,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519071,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519103,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519167,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519295,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090519551,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090520063,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090521087,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090523135,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090527231,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090535423,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090551807,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090584575,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090650111,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1090781183,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1091043327,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1091567615,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1092616191,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1094713343,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1094713344,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1096810496,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1097859072,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098383360,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098645504,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098776576,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098842112,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098874880,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098891264,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098899456,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098903552,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098905600,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098906624,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907136,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907392,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907520,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907584,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907616,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907632,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907640,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907644,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907646,32,FLEN)
NAN_BOXED(2132336376,32,FLEN)
NAN_BOXED(3511921,32,FLEN)
NAN_BOXED(1098907647,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078528,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078529,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078531,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078535,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078543,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078559,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078591,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078655,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973078783,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973079039,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973079551,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973080575,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973082623,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973086719,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973094911,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973111295,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973144063,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973209599,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973340671,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(973602815,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(974127103,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(975175679,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(977272831,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(977272832,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(979369984,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(980418560,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(980942848,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981204992,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981336064,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981401600,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981434368,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981450752,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981458944,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981463040,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981465088,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981466112,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981466624,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981466880,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467008,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467072,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467104,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467120,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467128,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467132,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467134,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(981467135,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132350024,32,FLEN)
NAN_BOXED(3507143,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
