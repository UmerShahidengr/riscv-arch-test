
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:89472*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89472*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:89475*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89475*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:89478*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89478*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:89481*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89481*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:89484*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89484*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:89487*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89487*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:89490*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89490*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:89493*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89493*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:89496*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89496*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:89499*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89499*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:89502*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89502*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:89505*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89505*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:89508*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89508*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:89511*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89511*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6800000; valaddr_reg:x3; val_offset:89514*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89514*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6800001; valaddr_reg:x3; val_offset:89517*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89517*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6800003; valaddr_reg:x3; val_offset:89520*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89520*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6800007; valaddr_reg:x3; val_offset:89523*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89523*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x680000f; valaddr_reg:x3; val_offset:89526*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89526*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x680001f; valaddr_reg:x3; val_offset:89529*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89529*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x680003f; valaddr_reg:x3; val_offset:89532*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89532*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x680007f; valaddr_reg:x3; val_offset:89535*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89535*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x3; val_offset:89538*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89538*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x3; val_offset:89541*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89541*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x3; val_offset:89544*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89544*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x3; val_offset:89547*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89547*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x3; val_offset:89550*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89550*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x3; val_offset:89553*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89553*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x3; val_offset:89556*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89556*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x3; val_offset:89559*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89559*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x3; val_offset:89562*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89562*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x3; val_offset:89565*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89565*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x3; val_offset:89568*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89568*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x3; val_offset:89571*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89571*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x3; val_offset:89574*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89574*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x69fffff; valaddr_reg:x3; val_offset:89577*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89577*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6bfffff; valaddr_reg:x3; val_offset:89580*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89580*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6c00000; valaddr_reg:x3; val_offset:89583*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89583*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6e00000; valaddr_reg:x3; val_offset:89586*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89586*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6f00000; valaddr_reg:x3; val_offset:89589*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89589*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6f80000; valaddr_reg:x3; val_offset:89592*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89592*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fc0000; valaddr_reg:x3; val_offset:89595*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89595*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fe0000; valaddr_reg:x3; val_offset:89598*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89598*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ff0000; valaddr_reg:x3; val_offset:89601*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89601*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ff8000; valaddr_reg:x3; val_offset:89604*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89604*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffc000; valaddr_reg:x3; val_offset:89607*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89607*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffe000; valaddr_reg:x3; val_offset:89610*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89610*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fff000; valaddr_reg:x3; val_offset:89613*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89613*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fff800; valaddr_reg:x3; val_offset:89616*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89616*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffc00; valaddr_reg:x3; val_offset:89619*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89619*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffe00; valaddr_reg:x3; val_offset:89622*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89622*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffff00; valaddr_reg:x3; val_offset:89625*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89625*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffff80; valaddr_reg:x3; val_offset:89628*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89628*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffffc0; valaddr_reg:x3; val_offset:89631*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89631*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffffe0; valaddr_reg:x3; val_offset:89634*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89634*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffff0; valaddr_reg:x3; val_offset:89637*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89637*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffff8; valaddr_reg:x3; val_offset:89640*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89640*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffffc; valaddr_reg:x3; val_offset:89643*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89643*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6fffffe; valaddr_reg:x3; val_offset:89646*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89646*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x19f35e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f19f35e; op2val:0x0;
op3val:0x6ffffff; valaddr_reg:x3; val_offset:89649*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89649*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:89652*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89652*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:89655*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89655*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:89658*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89658*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:89661*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89661*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:89664*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89664*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:89667*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89667*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:89670*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89670*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:89673*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89673*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:89676*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89676*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:89679*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89679*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:89682*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89682*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:89685*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89685*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:89688*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89688*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:89691*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89691*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:89694*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89694*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:89697*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89697*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c800000; valaddr_reg:x3; val_offset:89700*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89700*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c800001; valaddr_reg:x3; val_offset:89703*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89703*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c800003; valaddr_reg:x3; val_offset:89706*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89706*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c800007; valaddr_reg:x3; val_offset:89709*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89709*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c80000f; valaddr_reg:x3; val_offset:89712*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89712*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c80001f; valaddr_reg:x3; val_offset:89715*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89715*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c80003f; valaddr_reg:x3; val_offset:89718*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89718*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c80007f; valaddr_reg:x3; val_offset:89721*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89721*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c8000ff; valaddr_reg:x3; val_offset:89724*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89724*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c8001ff; valaddr_reg:x3; val_offset:89727*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89727*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c8003ff; valaddr_reg:x3; val_offset:89730*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89730*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c8007ff; valaddr_reg:x3; val_offset:89733*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89733*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c800fff; valaddr_reg:x3; val_offset:89736*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89736*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c801fff; valaddr_reg:x3; val_offset:89739*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89739*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c803fff; valaddr_reg:x3; val_offset:89742*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89742*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c807fff; valaddr_reg:x3; val_offset:89745*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89745*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c80ffff; valaddr_reg:x3; val_offset:89748*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89748*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c81ffff; valaddr_reg:x3; val_offset:89751*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89751*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c83ffff; valaddr_reg:x3; val_offset:89754*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89754*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c87ffff; valaddr_reg:x3; val_offset:89757*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89757*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c8fffff; valaddr_reg:x3; val_offset:89760*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89760*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7c9fffff; valaddr_reg:x3; val_offset:89763*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89763*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cbfffff; valaddr_reg:x3; val_offset:89766*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89766*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cc00000; valaddr_reg:x3; val_offset:89769*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89769*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7ce00000; valaddr_reg:x3; val_offset:89772*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89772*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cf00000; valaddr_reg:x3; val_offset:89775*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89775*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cf80000; valaddr_reg:x3; val_offset:89778*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89778*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfc0000; valaddr_reg:x3; val_offset:89781*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89781*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfe0000; valaddr_reg:x3; val_offset:89784*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89784*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cff0000; valaddr_reg:x3; val_offset:89787*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89787*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:89790*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89790*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:89793*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89793*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:89796*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89796*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:89799*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89799*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:89802*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89802*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:89805*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89805*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:89808*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89808*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:89811*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89811*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:89814*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89814*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:89817*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89817*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:89820*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89820*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:89823*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89823*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:89826*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89826*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:89829*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89829*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:89832*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89832*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a08ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a08ee; op2val:0x0;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:89835*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89835*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:89838*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89838*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:89841*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89841*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:89844*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89844*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:89847*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89847*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:89850*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89850*0 + 3*233*FLEN/8, x4, x1, x2)

inst_29951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a1ee0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a1ee0; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:89853*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89853*0 + 3*233*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(111149055,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246207,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(113246208,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(115343360,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116391936,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(116916224,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117178368,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117309440,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117374976,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117407744,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117424128,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117432320,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117436416,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117438464,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117439488,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440000,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440256,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440384,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440448,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440480,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440496,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440504,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440508,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440510,32,FLEN)
NAN_BOXED(2132407134,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440511,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763392,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763393,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763395,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763399,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763407,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763423,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763455,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763519,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763647,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088763903,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088764415,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088765439,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088767487,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088771583,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088779775,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088796159,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088828927,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2088894463,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2089025535,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2089287679,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2089811967,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2090860543,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2092957695,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2092957696,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2095054848,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2096103424,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2096627712,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2096889856,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097020928,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097086464,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2132412654,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132418272,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
