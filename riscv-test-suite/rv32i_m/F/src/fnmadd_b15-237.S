
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:90624*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90624*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:90627*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90627*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf800000; valaddr_reg:x3; val_offset:90630*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90630*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf800001; valaddr_reg:x3; val_offset:90633*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90633*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf800003; valaddr_reg:x3; val_offset:90636*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90636*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf800007; valaddr_reg:x3; val_offset:90639*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90639*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf80000f; valaddr_reg:x3; val_offset:90642*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90642*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf80001f; valaddr_reg:x3; val_offset:90645*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90645*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf80003f; valaddr_reg:x3; val_offset:90648*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90648*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf80007f; valaddr_reg:x3; val_offset:90651*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90651*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf8000ff; valaddr_reg:x3; val_offset:90654*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90654*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf8001ff; valaddr_reg:x3; val_offset:90657*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90657*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf8003ff; valaddr_reg:x3; val_offset:90660*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90660*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf8007ff; valaddr_reg:x3; val_offset:90663*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90663*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf800fff; valaddr_reg:x3; val_offset:90666*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90666*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf801fff; valaddr_reg:x3; val_offset:90669*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90669*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf803fff; valaddr_reg:x3; val_offset:90672*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90672*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf807fff; valaddr_reg:x3; val_offset:90675*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90675*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf80ffff; valaddr_reg:x3; val_offset:90678*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90678*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf81ffff; valaddr_reg:x3; val_offset:90681*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90681*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf83ffff; valaddr_reg:x3; val_offset:90684*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90684*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf87ffff; valaddr_reg:x3; val_offset:90687*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90687*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf8fffff; valaddr_reg:x3; val_offset:90690*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90690*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcf9fffff; valaddr_reg:x3; val_offset:90693*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90693*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfbfffff; valaddr_reg:x3; val_offset:90696*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90696*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfc00000; valaddr_reg:x3; val_offset:90699*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90699*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfe00000; valaddr_reg:x3; val_offset:90702*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90702*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcff00000; valaddr_reg:x3; val_offset:90705*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90705*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcff80000; valaddr_reg:x3; val_offset:90708*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90708*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffc0000; valaddr_reg:x3; val_offset:90711*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90711*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffe0000; valaddr_reg:x3; val_offset:90714*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90714*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfff0000; valaddr_reg:x3; val_offset:90717*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90717*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfff8000; valaddr_reg:x3; val_offset:90720*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90720*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffc000; valaddr_reg:x3; val_offset:90723*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90723*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffe000; valaddr_reg:x3; val_offset:90726*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90726*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffff000; valaddr_reg:x3; val_offset:90729*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90729*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffff800; valaddr_reg:x3; val_offset:90732*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90732*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffc00; valaddr_reg:x3; val_offset:90735*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90735*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffe00; valaddr_reg:x3; val_offset:90738*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90738*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffff00; valaddr_reg:x3; val_offset:90741*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90741*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffff80; valaddr_reg:x3; val_offset:90744*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90744*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffffc0; valaddr_reg:x3; val_offset:90747*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90747*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffffe0; valaddr_reg:x3; val_offset:90750*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90750*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffff0; valaddr_reg:x3; val_offset:90753*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90753*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffff8; valaddr_reg:x3; val_offset:90756*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90756*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffffc; valaddr_reg:x3; val_offset:90759*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90759*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcffffffe; valaddr_reg:x3; val_offset:90762*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90762*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ad877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34e781 and fs3 == 1 and fe3 == 0x9f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ad877; op2val:0x8034e781;
op3val:0xcfffffff; valaddr_reg:x3; val_offset:90765*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90765*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:90768*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90768*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:90771*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90771*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:90774*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90774*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:90777*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90777*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:90780*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90780*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:90783*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90783*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:90786*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90786*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:90789*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90789*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:90792*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90792*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:90795*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90795*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:90798*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90798*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:90801*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90801*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:90804*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90804*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:90807*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90807*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:90810*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90810*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:90813*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90813*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:90816*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90816*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:90819*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90819*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:90822*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90822*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:90825*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90825*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:90828*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90828*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:90831*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90831*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:90834*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90834*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:90837*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90837*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:90840*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90840*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:90843*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90843*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:90846*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90846*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:90849*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90849*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:90852*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90852*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:90855*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90855*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:90858*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90858*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:90861*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90861*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:90864*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90864*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:90867*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90867*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:90870*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90870*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:90873*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90873*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:90876*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90876*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:90879*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90879*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:90882*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90882*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:90885*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90885*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:90888*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90888*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:90891*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90891*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:90894*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90894*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:90897*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90897*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:90900*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90900*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:90903*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90903*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:90906*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90906*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:90909*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90909*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:90912*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90912*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:90915*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90915*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:90918*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90918*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:90921*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90921*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:90924*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90924*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:90927*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90927*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:90930*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90930*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:90933*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90933*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:90936*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90936*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:90939*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90939*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:90942*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90942*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:90945*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90945*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:90948*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90948*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b0d90 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b0d90; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:90951*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90951*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:90954*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90954*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:90957*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90957*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:90960*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90960*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:90963*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90963*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:90966*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90966*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:90969*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90969*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:90972*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90972*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:90975*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90975*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:90978*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90978*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:90981*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90981*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:90984*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90984*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:90987*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90987*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:90990*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90990*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:90993*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90993*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:90996*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90996*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:90999*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90999*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x9000000; valaddr_reg:x3; val_offset:91002*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91002*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b200c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b200c; op2val:0x0;
op3val:0x9000001; valaddr_reg:x3; val_offset:91005*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91005*0 + 3*236*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272320,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272321,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272323,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272327,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272335,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272351,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272383,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272447,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272575,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481272831,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481273343,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481274367,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481276415,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481280511,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481288703,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481305087,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481337855,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481403391,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481534463,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3481796607,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3482320895,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3483369471,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3485466623,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3485466624,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3487563776,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3488612352,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489136640,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489398784,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489529856,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489595392,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489628160,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489644544,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489652736,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489656832,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489658880,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489659904,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660416,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660672,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660800,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660864,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660896,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660912,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660920,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660924,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660926,32,FLEN)
NAN_BOXED(2132465783,32,FLEN)
NAN_BOXED(2150950785,32,FLEN)
NAN_BOXED(3489660927,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2132479376,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994944,32,FLEN)
NAN_BOXED(2132484108,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994945,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
