
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:91392*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91392*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:91395*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91395*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:91398*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91398*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:91401*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91401*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:91404*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91404*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:91407*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91407*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:91410*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91410*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:91413*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91413*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:91416*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91416*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:91419*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91419*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:91422*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91422*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:91425*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91425*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:91428*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91428*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:91431*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91431*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:91434*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91434*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:91437*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91437*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:91440*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91440*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:91443*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91443*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:91446*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91446*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:91449*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91449*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:91452*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91452*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:91455*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91455*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:91458*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91458*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:91461*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91461*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:91464*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91464*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:91467*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91467*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:91470*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91470*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:91473*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91473*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:91476*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91476*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:91479*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91479*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:91482*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91482*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:91485*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91485*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:91488*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91488*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:91491*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91491*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:91494*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91494*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:91497*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91497*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:91500*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91500*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:91503*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91503*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:91506*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91506*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b2fc2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b2fc2; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:91509*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91509*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:91512*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91512*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:91515*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91515*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:91518*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91518*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:91521*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91521*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:91524*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91524*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:91527*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91527*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:91530*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91530*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:91533*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91533*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:91536*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91536*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:91539*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91539*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:91542*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91542*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:91545*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91545*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:91548*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91548*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:91551*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91551*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:91554*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91554*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:91557*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91557*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90800000; valaddr_reg:x3; val_offset:91560*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91560*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90800001; valaddr_reg:x3; val_offset:91563*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91563*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90800003; valaddr_reg:x3; val_offset:91566*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91566*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90800007; valaddr_reg:x3; val_offset:91569*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91569*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9080000f; valaddr_reg:x3; val_offset:91572*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91572*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9080001f; valaddr_reg:x3; val_offset:91575*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91575*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9080003f; valaddr_reg:x3; val_offset:91578*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91578*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9080007f; valaddr_reg:x3; val_offset:91581*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91581*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x908000ff; valaddr_reg:x3; val_offset:91584*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91584*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x908001ff; valaddr_reg:x3; val_offset:91587*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91587*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x908003ff; valaddr_reg:x3; val_offset:91590*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91590*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x908007ff; valaddr_reg:x3; val_offset:91593*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91593*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90800fff; valaddr_reg:x3; val_offset:91596*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91596*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90801fff; valaddr_reg:x3; val_offset:91599*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91599*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90803fff; valaddr_reg:x3; val_offset:91602*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91602*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90807fff; valaddr_reg:x3; val_offset:91605*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91605*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9080ffff; valaddr_reg:x3; val_offset:91608*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91608*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9081ffff; valaddr_reg:x3; val_offset:91611*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91611*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9083ffff; valaddr_reg:x3; val_offset:91614*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91614*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x9087ffff; valaddr_reg:x3; val_offset:91617*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91617*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x908fffff; valaddr_reg:x3; val_offset:91620*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91620*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x909fffff; valaddr_reg:x3; val_offset:91623*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91623*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90bfffff; valaddr_reg:x3; val_offset:91626*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91626*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90c00000; valaddr_reg:x3; val_offset:91629*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91629*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90e00000; valaddr_reg:x3; val_offset:91632*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91632*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90f00000; valaddr_reg:x3; val_offset:91635*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91635*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90f80000; valaddr_reg:x3; val_offset:91638*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91638*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fc0000; valaddr_reg:x3; val_offset:91641*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91641*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fe0000; valaddr_reg:x3; val_offset:91644*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91644*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ff0000; valaddr_reg:x3; val_offset:91647*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91647*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ff8000; valaddr_reg:x3; val_offset:91650*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91650*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffc000; valaddr_reg:x3; val_offset:91653*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91653*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffe000; valaddr_reg:x3; val_offset:91656*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91656*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fff000; valaddr_reg:x3; val_offset:91659*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91659*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fff800; valaddr_reg:x3; val_offset:91662*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91662*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffc00; valaddr_reg:x3; val_offset:91665*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91665*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffe00; valaddr_reg:x3; val_offset:91668*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91668*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffff00; valaddr_reg:x3; val_offset:91671*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91671*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffff80; valaddr_reg:x3; val_offset:91674*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91674*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffffc0; valaddr_reg:x3; val_offset:91677*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91677*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffffe0; valaddr_reg:x3; val_offset:91680*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91680*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffff0; valaddr_reg:x3; val_offset:91683*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91683*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffff8; valaddr_reg:x3; val_offset:91686*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91686*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffffc; valaddr_reg:x3; val_offset:91689*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91689*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90fffffe; valaddr_reg:x3; val_offset:91692*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91692*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ba0b9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ba0b9; op2val:0x80000000;
op3val:0x90ffffff; valaddr_reg:x3; val_offset:91695*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91695*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae000000; valaddr_reg:x3; val_offset:91698*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91698*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae000001; valaddr_reg:x3; val_offset:91701*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91701*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae000003; valaddr_reg:x3; val_offset:91704*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91704*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae000007; valaddr_reg:x3; val_offset:91707*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91707*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae00000f; valaddr_reg:x3; val_offset:91710*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91710*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae00001f; valaddr_reg:x3; val_offset:91713*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91713*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae00003f; valaddr_reg:x3; val_offset:91716*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91716*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae00007f; valaddr_reg:x3; val_offset:91719*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91719*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae0000ff; valaddr_reg:x3; val_offset:91722*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91722*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae0001ff; valaddr_reg:x3; val_offset:91725*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91725*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae0003ff; valaddr_reg:x3; val_offset:91728*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91728*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae0007ff; valaddr_reg:x3; val_offset:91731*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91731*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae000fff; valaddr_reg:x3; val_offset:91734*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91734*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae001fff; valaddr_reg:x3; val_offset:91737*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91737*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae003fff; valaddr_reg:x3; val_offset:91740*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91740*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae007fff; valaddr_reg:x3; val_offset:91743*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91743*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae00ffff; valaddr_reg:x3; val_offset:91746*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91746*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae01ffff; valaddr_reg:x3; val_offset:91749*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91749*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae03ffff; valaddr_reg:x3; val_offset:91752*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91752*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae07ffff; valaddr_reg:x3; val_offset:91755*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91755*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae0fffff; valaddr_reg:x3; val_offset:91758*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91758*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae1fffff; valaddr_reg:x3; val_offset:91761*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91761*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae3fffff; valaddr_reg:x3; val_offset:91764*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91764*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae400000; valaddr_reg:x3; val_offset:91767*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91767*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae600000; valaddr_reg:x3; val_offset:91770*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91770*0 + 3*238*FLEN/8, x4, x1, x2)

inst_30591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae700000; valaddr_reg:x3; val_offset:91773*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91773*0 + 3*238*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2132488130,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307712,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307713,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307715,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307719,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307727,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307743,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307775,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307839,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307967,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424308223,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424308735,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424309759,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424311807,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424315903,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424324095,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424340479,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424373247,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424438783,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424569855,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424831999,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2425356287,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2426404863,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2428502015,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2428502016,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2430599168,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2431647744,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432172032,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432434176,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432565248,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432630784,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432663552,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432679936,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432688128,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432692224,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432694272,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432695296,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432695808,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696064,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696192,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696256,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696288,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696304,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696312,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696316,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696318,32,FLEN)
NAN_BOXED(2132517049,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2432696319,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235584,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235585,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235587,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235591,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235599,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235615,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235647,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235711,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919235839,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919236095,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919236607,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919237631,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919239679,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919243775,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919251967,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919268351,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919301119,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919366655,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919497727,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2919759871,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2920284159,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2921332735,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2923429887,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2923429888,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2925527040,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2926575616,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
