
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2944:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffe00; valaddr_reg:x3; val_offset:8832*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8832*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fff00; valaddr_reg:x3; val_offset:8835*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8835*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fff80; valaddr_reg:x3; val_offset:8838*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8838*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fffc0; valaddr_reg:x3; val_offset:8841*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8841*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fffe0; valaddr_reg:x3; val_offset:8844*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8844*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffff0; valaddr_reg:x3; val_offset:8847*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8847*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2950:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffff8; valaddr_reg:x3; val_offset:8850*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8850*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2951:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffffc; valaddr_reg:x3; val_offset:8853*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8853*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2952:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77ffffe; valaddr_reg:x3; val_offset:8856*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8856*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2953:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x4e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xa77fffff; valaddr_reg:x3; val_offset:8859*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8859*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2954:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbf800001; valaddr_reg:x3; val_offset:8862*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8862*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2955:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbf800003; valaddr_reg:x3; val_offset:8865*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8865*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2956:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbf800007; valaddr_reg:x3; val_offset:8868*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8868*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2957:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbf999999; valaddr_reg:x3; val_offset:8871*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8871*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2958:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:8874*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8874*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2959:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:8877*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8877*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2960:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:8880*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8880*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2961:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:8883*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8883*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2962:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:8886*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8886*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2963:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:8889*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8889*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2964:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:8892*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8892*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2965:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:8895*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8895*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2966:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:8898*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8898*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2967:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:8901*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8901*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2968:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:8904*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8904*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2969:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x181a5b and fs2 == 1 and fe2 == 0x02 and fm2 == 0x576edb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d981a5b; op2val:0x81576edb;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:8907*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8907*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2970:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:8910*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8910*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2971:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:8913*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8913*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2972:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:8916*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8916*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2973:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:8919*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8919*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2974:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:8922*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8922*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2975:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:8925*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8925*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2976:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:8928*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8928*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2977:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:8931*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8931*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2978:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:8934*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8934*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2979:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:8937*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8937*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2980:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:8940*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8940*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2981:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:8943*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8943*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2982:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:8946*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8946*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2983:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:8949*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8949*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2984:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:8952*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8952*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2985:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:8955*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8955*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2986:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:8958*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8958*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2987:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:8961*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8961*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2988:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:8964*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8964*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2989:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:8967*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8967*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:8970*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8970*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:8973*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8973*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:8976*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8976*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:8979*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8979*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:8982*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8982*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:8985*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8985*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:8988*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8988*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:8991*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8991*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:8994*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8994*0 + 3*23*FLEN/8, x4, x1, x2)

inst_2999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:8997*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8997*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3000:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:9000*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9000*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3001:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:9003*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9003*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3002:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:9006*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9006*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3003:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:9009*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9009*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3004:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:9012*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9012*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3005:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:9015*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9015*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3006:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:9018*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9018*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3007:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:9021*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9021*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3008:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:9024*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9024*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3009:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:9027*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9027*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3010:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:9030*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9030*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:9033*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9033*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:9036*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9036*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:9039*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9039*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:9042*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9042*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:9045*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9045*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3016:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:9048*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9048*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3017:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:9051*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9051*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3018:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:9054*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9054*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3019:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:9057*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9057*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3020:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:9060*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9060*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3021:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:9063*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9063*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3022:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:9066*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9066*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3023:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:9069*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9069*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3024:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:9072*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9072*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3025:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1999b4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9999b4; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:9075*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9075*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3026:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:9078*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9078*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3027:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:9081*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9081*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3028:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:9084*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9084*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3029:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:9087*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9087*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3030:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:9090*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9090*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3031:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:9093*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9093*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3032:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:9096*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9096*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3033:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:9099*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9099*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3034:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:9102*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9102*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:9105*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9105*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:9108*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9108*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:9111*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9111*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:9114*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9114*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:9117*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9117*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3040:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:9120*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9120*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3041:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:9123*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9123*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3042:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:9126*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9126*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3043:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:9129*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9129*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3044:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:9132*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9132*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3045:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:9135*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9135*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3046:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:9138*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9138*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3047:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:9141*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9141*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3048:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:9144*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9144*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3049:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:9147*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9147*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3050:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:9150*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9150*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3051:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:9153*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9153*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3052:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:9156*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9156*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3053:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:9159*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9159*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3054:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:9162*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9162*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3055:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:9165*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9165*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3056:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:9168*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9168*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3057:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:9171*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9171*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3058:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:9174*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9174*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3059:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:9177*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9177*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:9180*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9180*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:9183*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9183*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:9186*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9186*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:9189*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9189*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:9192*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9192*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3065:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:9195*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9195*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3066:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:9198*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9198*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3067:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:9201*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9201*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3068:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:9204*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9204*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3069:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:9207*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9207*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3070:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:9210*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9210*0 + 3*23*FLEN/8, x4, x1, x2)

inst_3071:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x19cc61 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d99cc61; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:9213*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9213*0 + 3*23*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183168,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183424,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183552,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183616,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183648,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183664,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183672,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183676,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183678,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(2810183679,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2107120219,32,FLEN)
NAN_BOXED(2169990875,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2107218356,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2107231329,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
