
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae780000; valaddr_reg:x3; val_offset:91776*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91776*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7c0000; valaddr_reg:x3; val_offset:91779*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91779*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7e0000; valaddr_reg:x3; val_offset:91782*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91782*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7f0000; valaddr_reg:x3; val_offset:91785*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91785*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7f8000; valaddr_reg:x3; val_offset:91788*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91788*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fc000; valaddr_reg:x3; val_offset:91791*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91791*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fe000; valaddr_reg:x3; val_offset:91794*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91794*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ff000; valaddr_reg:x3; val_offset:91797*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91797*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ff800; valaddr_reg:x3; val_offset:91800*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91800*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffc00; valaddr_reg:x3; val_offset:91803*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91803*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffe00; valaddr_reg:x3; val_offset:91806*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91806*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fff00; valaddr_reg:x3; val_offset:91809*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91809*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fff80; valaddr_reg:x3; val_offset:91812*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91812*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fffc0; valaddr_reg:x3; val_offset:91815*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91815*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fffe0; valaddr_reg:x3; val_offset:91818*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91818*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffff0; valaddr_reg:x3; val_offset:91821*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91821*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffff8; valaddr_reg:x3; val_offset:91824*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91824*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffffc; valaddr_reg:x3; val_offset:91827*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91827*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7ffffe; valaddr_reg:x3; val_offset:91830*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91830*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xae7fffff; valaddr_reg:x3; val_offset:91833*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91833*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:91836*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91836*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:91839*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91839*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:91842*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91842*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:91845*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91845*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:91848*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91848*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:91851*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91851*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:91854*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91854*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:91857*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91857*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:91860*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91860*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:91863*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91863*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:91866*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91866*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:91869*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91869*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:91872*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91872*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:91875*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91875*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:91878*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91878*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bbd1b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3499d6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bbd1b; op2val:0x803499d6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:91881*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91881*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e800000; valaddr_reg:x3; val_offset:91884*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91884*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e800001; valaddr_reg:x3; val_offset:91887*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91887*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e800003; valaddr_reg:x3; val_offset:91890*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91890*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e800007; valaddr_reg:x3; val_offset:91893*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91893*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e80000f; valaddr_reg:x3; val_offset:91896*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91896*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e80001f; valaddr_reg:x3; val_offset:91899*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91899*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e80003f; valaddr_reg:x3; val_offset:91902*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91902*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e80007f; valaddr_reg:x3; val_offset:91905*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91905*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e8000ff; valaddr_reg:x3; val_offset:91908*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91908*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e8001ff; valaddr_reg:x3; val_offset:91911*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91911*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e8003ff; valaddr_reg:x3; val_offset:91914*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91914*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e8007ff; valaddr_reg:x3; val_offset:91917*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91917*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e800fff; valaddr_reg:x3; val_offset:91920*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91920*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e801fff; valaddr_reg:x3; val_offset:91923*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91923*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e803fff; valaddr_reg:x3; val_offset:91926*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91926*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e807fff; valaddr_reg:x3; val_offset:91929*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91929*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e80ffff; valaddr_reg:x3; val_offset:91932*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91932*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e81ffff; valaddr_reg:x3; val_offset:91935*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91935*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e83ffff; valaddr_reg:x3; val_offset:91938*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91938*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e87ffff; valaddr_reg:x3; val_offset:91941*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91941*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e8fffff; valaddr_reg:x3; val_offset:91944*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91944*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2e9fffff; valaddr_reg:x3; val_offset:91947*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91947*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2ebfffff; valaddr_reg:x3; val_offset:91950*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91950*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2ec00000; valaddr_reg:x3; val_offset:91953*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91953*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2ee00000; valaddr_reg:x3; val_offset:91956*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91956*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2ef00000; valaddr_reg:x3; val_offset:91959*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91959*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2ef80000; valaddr_reg:x3; val_offset:91962*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91962*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efc0000; valaddr_reg:x3; val_offset:91965*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91965*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efe0000; valaddr_reg:x3; val_offset:91968*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91968*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2eff0000; valaddr_reg:x3; val_offset:91971*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91971*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2eff8000; valaddr_reg:x3; val_offset:91974*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91974*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effc000; valaddr_reg:x3; val_offset:91977*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91977*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effe000; valaddr_reg:x3; val_offset:91980*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91980*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efff000; valaddr_reg:x3; val_offset:91983*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91983*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efff800; valaddr_reg:x3; val_offset:91986*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91986*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffc00; valaddr_reg:x3; val_offset:91989*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91989*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffe00; valaddr_reg:x3; val_offset:91992*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91992*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effff00; valaddr_reg:x3; val_offset:91995*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91995*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effff80; valaddr_reg:x3; val_offset:91998*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91998*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effffc0; valaddr_reg:x3; val_offset:92001*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92001*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effffe0; valaddr_reg:x3; val_offset:92004*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92004*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffff0; valaddr_reg:x3; val_offset:92007*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92007*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffff8; valaddr_reg:x3; val_offset:92010*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92010*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffffc; valaddr_reg:x3; val_offset:92013*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92013*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2efffffe; valaddr_reg:x3; val_offset:92016*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92016*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x2effffff; valaddr_reg:x3; val_offset:92019*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92019*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3f800001; valaddr_reg:x3; val_offset:92022*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92022*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3f800003; valaddr_reg:x3; val_offset:92025*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92025*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3f800007; valaddr_reg:x3; val_offset:92028*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92028*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3f999999; valaddr_reg:x3; val_offset:92031*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92031*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:92034*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92034*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:92037*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92037*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:92040*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92040*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:92043*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92043*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:92046*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92046*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:92049*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92049*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:92052*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92052*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:92055*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92055*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:92058*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92058*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:92061*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92061*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:92064*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92064*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c29da and fs2 == 0 and fe2 == 0x00 and fm2 == 0x347535 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c29da; op2val:0x347535;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:92067*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92067*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c800000; valaddr_reg:x3; val_offset:92070*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92070*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c800001; valaddr_reg:x3; val_offset:92073*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92073*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c800003; valaddr_reg:x3; val_offset:92076*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92076*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c800007; valaddr_reg:x3; val_offset:92079*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92079*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c80000f; valaddr_reg:x3; val_offset:92082*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92082*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c80001f; valaddr_reg:x3; val_offset:92085*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92085*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c80003f; valaddr_reg:x3; val_offset:92088*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92088*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c80007f; valaddr_reg:x3; val_offset:92091*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92091*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c8000ff; valaddr_reg:x3; val_offset:92094*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92094*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c8001ff; valaddr_reg:x3; val_offset:92097*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92097*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c8003ff; valaddr_reg:x3; val_offset:92100*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92100*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c8007ff; valaddr_reg:x3; val_offset:92103*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92103*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c800fff; valaddr_reg:x3; val_offset:92106*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92106*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c801fff; valaddr_reg:x3; val_offset:92109*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92109*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c803fff; valaddr_reg:x3; val_offset:92112*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92112*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c807fff; valaddr_reg:x3; val_offset:92115*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92115*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c80ffff; valaddr_reg:x3; val_offset:92118*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92118*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c81ffff; valaddr_reg:x3; val_offset:92121*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92121*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c83ffff; valaddr_reg:x3; val_offset:92124*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92124*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c87ffff; valaddr_reg:x3; val_offset:92127*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92127*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c8fffff; valaddr_reg:x3; val_offset:92130*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92130*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7c9fffff; valaddr_reg:x3; val_offset:92133*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92133*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cbfffff; valaddr_reg:x3; val_offset:92136*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92136*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cc00000; valaddr_reg:x3; val_offset:92139*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92139*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7ce00000; valaddr_reg:x3; val_offset:92142*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92142*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cf00000; valaddr_reg:x3; val_offset:92145*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92145*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cf80000; valaddr_reg:x3; val_offset:92148*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92148*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfc0000; valaddr_reg:x3; val_offset:92151*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92151*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfe0000; valaddr_reg:x3; val_offset:92154*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92154*0 + 3*239*FLEN/8, x4, x1, x2)

inst_30719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cff0000; valaddr_reg:x3; val_offset:92157*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92157*0 + 3*239*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927099904,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927362048,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927493120,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927558656,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927591424,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927607808,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927616000,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927620096,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927622144,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927623168,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927623680,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927623936,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624064,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624128,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624160,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624176,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624184,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624188,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624190,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(2927624191,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132524315,32,FLEN)
NAN_BOXED(2150930902,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140544,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140545,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140547,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140551,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140559,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140575,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140607,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140671,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780140799,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780141055,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780141567,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780142591,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780144639,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780148735,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780156927,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780173311,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780206079,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780271615,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780402687,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(780664831,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(781189119,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(782237695,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(784334847,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(784334848,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(786432000,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(787480576,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788004864,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788267008,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788398080,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788463616,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788496384,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788512768,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788520960,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788525056,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788527104,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788528128,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788528640,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788528896,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529024,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529088,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529120,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529136,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529144,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529148,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529150,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(788529151,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132552154,32,FLEN)
NAN_BOXED(3437877,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763392,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763393,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763395,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763399,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763407,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763423,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763455,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763519,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763647,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088763903,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088764415,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088765439,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088767487,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088771583,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088779775,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088796159,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088828927,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2088894463,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2089025535,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2089287679,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2089811967,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2090860543,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2092957695,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2092957696,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2095054848,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2096103424,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2096627712,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2096889856,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097020928,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097086464,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
