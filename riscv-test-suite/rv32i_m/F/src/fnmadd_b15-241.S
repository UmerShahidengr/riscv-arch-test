
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:92160*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92160*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:92163*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92163*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:92166*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92166*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:92169*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92169*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:92172*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92172*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:92175*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92175*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:92178*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92178*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:92181*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92181*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:92184*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92184*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:92187*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92187*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:92190*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92190*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:92193*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92193*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:92196*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92196*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:92199*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92199*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:92202*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92202*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:92205*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92205*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:92208*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92208*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:92211*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92211*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:92214*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92214*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:92217*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92217*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:92220*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92220*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:92223*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92223*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:92226*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92226*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:92229*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92229*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:92232*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92232*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:92235*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92235*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:92238*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92238*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:92241*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92241*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:92244*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92244*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:92247*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92247*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:92250*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92250*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c8ae5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5152c0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c8ae5; op2val:0x3fd152c0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:92253*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92253*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800001; valaddr_reg:x3; val_offset:92256*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92256*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800003; valaddr_reg:x3; val_offset:92259*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92259*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf800007; valaddr_reg:x3; val_offset:92262*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92262*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbf999999; valaddr_reg:x3; val_offset:92265*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92265*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:92268*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92268*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:92271*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92271*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:92274*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92274*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:92277*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92277*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:92280*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92280*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:92283*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92283*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:92286*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92286*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:92289*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92289*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:92292*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92292*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:92295*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92295*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:92298*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92298*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:92301*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92301*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800000; valaddr_reg:x3; val_offset:92304*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92304*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800001; valaddr_reg:x3; val_offset:92307*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92307*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800003; valaddr_reg:x3; val_offset:92310*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92310*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800007; valaddr_reg:x3; val_offset:92313*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92313*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980000f; valaddr_reg:x3; val_offset:92316*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92316*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980001f; valaddr_reg:x3; val_offset:92319*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92319*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980003f; valaddr_reg:x3; val_offset:92322*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92322*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980007f; valaddr_reg:x3; val_offset:92325*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92325*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98000ff; valaddr_reg:x3; val_offset:92328*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92328*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98001ff; valaddr_reg:x3; val_offset:92331*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92331*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98003ff; valaddr_reg:x3; val_offset:92334*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92334*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98007ff; valaddr_reg:x3; val_offset:92337*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92337*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9800fff; valaddr_reg:x3; val_offset:92340*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92340*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9801fff; valaddr_reg:x3; val_offset:92343*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92343*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9803fff; valaddr_reg:x3; val_offset:92346*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92346*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9807fff; valaddr_reg:x3; val_offset:92349*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92349*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc980ffff; valaddr_reg:x3; val_offset:92352*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92352*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc981ffff; valaddr_reg:x3; val_offset:92355*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92355*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc983ffff; valaddr_reg:x3; val_offset:92358*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92358*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc987ffff; valaddr_reg:x3; val_offset:92361*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92361*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc98fffff; valaddr_reg:x3; val_offset:92364*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92364*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc99fffff; valaddr_reg:x3; val_offset:92367*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92367*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9bfffff; valaddr_reg:x3; val_offset:92370*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92370*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9c00000; valaddr_reg:x3; val_offset:92373*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92373*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9e00000; valaddr_reg:x3; val_offset:92376*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92376*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9f00000; valaddr_reg:x3; val_offset:92379*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92379*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9f80000; valaddr_reg:x3; val_offset:92382*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92382*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fc0000; valaddr_reg:x3; val_offset:92385*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92385*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fe0000; valaddr_reg:x3; val_offset:92388*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92388*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ff0000; valaddr_reg:x3; val_offset:92391*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92391*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ff8000; valaddr_reg:x3; val_offset:92394*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92394*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffc000; valaddr_reg:x3; val_offset:92397*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92397*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffe000; valaddr_reg:x3; val_offset:92400*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92400*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fff000; valaddr_reg:x3; val_offset:92403*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92403*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fff800; valaddr_reg:x3; val_offset:92406*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92406*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffc00; valaddr_reg:x3; val_offset:92409*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92409*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffe00; valaddr_reg:x3; val_offset:92412*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92412*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffff00; valaddr_reg:x3; val_offset:92415*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92415*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffff80; valaddr_reg:x3; val_offset:92418*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92418*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffc0; valaddr_reg:x3; val_offset:92421*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92421*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffe0; valaddr_reg:x3; val_offset:92424*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92424*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffff0; valaddr_reg:x3; val_offset:92427*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92427*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffff8; valaddr_reg:x3; val_offset:92430*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92430*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffffc; valaddr_reg:x3; val_offset:92433*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92433*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9fffffe; valaddr_reg:x3; val_offset:92436*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92436*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e9d72 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33a5a5 and fs3 == 1 and fe3 == 0x93 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e9d72; op2val:0x8033a5a5;
op3val:0xc9ffffff; valaddr_reg:x3; val_offset:92439*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92439*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000000; valaddr_reg:x3; val_offset:92442*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92442*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000001; valaddr_reg:x3; val_offset:92445*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92445*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000003; valaddr_reg:x3; val_offset:92448*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92448*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000007; valaddr_reg:x3; val_offset:92451*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92451*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400000f; valaddr_reg:x3; val_offset:92454*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92454*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400001f; valaddr_reg:x3; val_offset:92457*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92457*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400003f; valaddr_reg:x3; val_offset:92460*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92460*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400007f; valaddr_reg:x3; val_offset:92463*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92463*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40000ff; valaddr_reg:x3; val_offset:92466*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92466*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40001ff; valaddr_reg:x3; val_offset:92469*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92469*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40003ff; valaddr_reg:x3; val_offset:92472*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92472*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40007ff; valaddr_reg:x3; val_offset:92475*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92475*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4000fff; valaddr_reg:x3; val_offset:92478*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92478*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4001fff; valaddr_reg:x3; val_offset:92481*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92481*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4003fff; valaddr_reg:x3; val_offset:92484*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92484*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4007fff; valaddr_reg:x3; val_offset:92487*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92487*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa400ffff; valaddr_reg:x3; val_offset:92490*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92490*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa401ffff; valaddr_reg:x3; val_offset:92493*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92493*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa403ffff; valaddr_reg:x3; val_offset:92496*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92496*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa407ffff; valaddr_reg:x3; val_offset:92499*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92499*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa40fffff; valaddr_reg:x3; val_offset:92502*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92502*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa41fffff; valaddr_reg:x3; val_offset:92505*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92505*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa43fffff; valaddr_reg:x3; val_offset:92508*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92508*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4400000; valaddr_reg:x3; val_offset:92511*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92511*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4600000; valaddr_reg:x3; val_offset:92514*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92514*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4700000; valaddr_reg:x3; val_offset:92517*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92517*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa4780000; valaddr_reg:x3; val_offset:92520*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92520*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47c0000; valaddr_reg:x3; val_offset:92523*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92523*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47e0000; valaddr_reg:x3; val_offset:92526*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92526*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47f0000; valaddr_reg:x3; val_offset:92529*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92529*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47f8000; valaddr_reg:x3; val_offset:92532*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92532*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fc000; valaddr_reg:x3; val_offset:92535*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92535*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fe000; valaddr_reg:x3; val_offset:92538*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92538*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ff000; valaddr_reg:x3; val_offset:92541*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92541*0 + 3*240*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132576997,32,FLEN)
NAN_BOXED(1070682816,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609024,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609025,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609027,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609031,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609039,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609055,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609087,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609151,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609279,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380609535,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380610047,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380611071,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380613119,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380617215,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380625407,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380641791,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380674559,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380740095,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3380871167,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3381133311,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3381657599,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3382706175,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3384803327,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3384803328,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3386900480,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3387949056,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388473344,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388735488,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388866560,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388932096,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388964864,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388981248,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388989440,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388993536,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388995584,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388996608,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997120,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997376,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997504,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997568,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997600,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997616,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997624,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997628,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997630,32,FLEN)
NAN_BOXED(2132712818,32,FLEN)
NAN_BOXED(2150868389,32,FLEN)
NAN_BOXED(3388997631,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463424,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463425,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463427,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463431,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463439,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463455,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463487,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463551,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463679,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751463935,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751464447,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751465471,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751467519,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751471615,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751479807,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751496191,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751528959,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751594495,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751725567,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2751987711,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2752511999,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2753560575,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2755657727,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2755657728,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2757754880,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2758803456,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759327744,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759589888,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759720960,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759786496,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759819264,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759835648,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759843840,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759847936,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
