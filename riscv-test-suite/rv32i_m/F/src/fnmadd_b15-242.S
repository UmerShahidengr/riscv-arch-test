
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ff800; valaddr_reg:x3; val_offset:92544*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92544*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffc00; valaddr_reg:x3; val_offset:92547*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92547*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffe00; valaddr_reg:x3; val_offset:92550*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92550*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fff00; valaddr_reg:x3; val_offset:92553*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92553*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fff80; valaddr_reg:x3; val_offset:92556*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92556*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffc0; valaddr_reg:x3; val_offset:92559*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92559*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffe0; valaddr_reg:x3; val_offset:92562*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92562*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffff0; valaddr_reg:x3; val_offset:92565*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92565*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffff8; valaddr_reg:x3; val_offset:92568*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92568*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffffc; valaddr_reg:x3; val_offset:92571*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92571*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47ffffe; valaddr_reg:x3; val_offset:92574*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92574*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xa47fffff; valaddr_reg:x3; val_offset:92577*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92577*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800001; valaddr_reg:x3; val_offset:92580*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92580*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800003; valaddr_reg:x3; val_offset:92583*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92583*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf800007; valaddr_reg:x3; val_offset:92586*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92586*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbf999999; valaddr_reg:x3; val_offset:92589*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92589*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:92592*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92592*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:92595*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92595*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:92598*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92598*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:92601*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92601*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:92604*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92604*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:92607*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92607*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:92610*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92610*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:92613*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92613*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:92616*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92616*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:92619*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92619*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:92622*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92622*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ef595 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x338902 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ef595; op2val:0x80338902;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:92625*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92625*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800000; valaddr_reg:x3; val_offset:92628*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92628*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800001; valaddr_reg:x3; val_offset:92631*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92631*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800003; valaddr_reg:x3; val_offset:92634*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92634*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800007; valaddr_reg:x3; val_offset:92637*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92637*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80000f; valaddr_reg:x3; val_offset:92640*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92640*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80001f; valaddr_reg:x3; val_offset:92643*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92643*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80003f; valaddr_reg:x3; val_offset:92646*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92646*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80007f; valaddr_reg:x3; val_offset:92649*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92649*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8000ff; valaddr_reg:x3; val_offset:92652*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92652*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8001ff; valaddr_reg:x3; val_offset:92655*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92655*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8003ff; valaddr_reg:x3; val_offset:92658*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92658*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8007ff; valaddr_reg:x3; val_offset:92661*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92661*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b800fff; valaddr_reg:x3; val_offset:92664*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92664*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b801fff; valaddr_reg:x3; val_offset:92667*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92667*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b803fff; valaddr_reg:x3; val_offset:92670*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92670*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b807fff; valaddr_reg:x3; val_offset:92673*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92673*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b80ffff; valaddr_reg:x3; val_offset:92676*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92676*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b81ffff; valaddr_reg:x3; val_offset:92679*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92679*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b83ffff; valaddr_reg:x3; val_offset:92682*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92682*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b87ffff; valaddr_reg:x3; val_offset:92685*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92685*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b8fffff; valaddr_reg:x3; val_offset:92688*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92688*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6b9fffff; valaddr_reg:x3; val_offset:92691*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92691*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bbfffff; valaddr_reg:x3; val_offset:92694*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92694*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bc00000; valaddr_reg:x3; val_offset:92697*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92697*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6be00000; valaddr_reg:x3; val_offset:92700*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92700*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bf00000; valaddr_reg:x3; val_offset:92703*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92703*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bf80000; valaddr_reg:x3; val_offset:92706*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92706*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfc0000; valaddr_reg:x3; val_offset:92709*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92709*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfe0000; valaddr_reg:x3; val_offset:92712*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92712*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bff0000; valaddr_reg:x3; val_offset:92715*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92715*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bff8000; valaddr_reg:x3; val_offset:92718*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92718*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffc000; valaddr_reg:x3; val_offset:92721*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92721*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffe000; valaddr_reg:x3; val_offset:92724*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92724*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfff000; valaddr_reg:x3; val_offset:92727*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92727*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfff800; valaddr_reg:x3; val_offset:92730*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92730*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffc00; valaddr_reg:x3; val_offset:92733*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92733*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffe00; valaddr_reg:x3; val_offset:92736*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92736*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffff00; valaddr_reg:x3; val_offset:92739*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92739*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffff80; valaddr_reg:x3; val_offset:92742*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92742*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffc0; valaddr_reg:x3; val_offset:92745*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92745*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffe0; valaddr_reg:x3; val_offset:92748*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92748*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffff0; valaddr_reg:x3; val_offset:92751*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92751*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffff8; valaddr_reg:x3; val_offset:92754*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92754*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffffc; valaddr_reg:x3; val_offset:92757*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92757*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bfffffe; valaddr_reg:x3; val_offset:92760*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92760*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x6bffffff; valaddr_reg:x3; val_offset:92763*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92763*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000001; valaddr_reg:x3; val_offset:92766*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92766*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000003; valaddr_reg:x3; val_offset:92769*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92769*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f000007; valaddr_reg:x3; val_offset:92772*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92772*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f199999; valaddr_reg:x3; val_offset:92775*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92775*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f249249; valaddr_reg:x3; val_offset:92778*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92778*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f333333; valaddr_reg:x3; val_offset:92781*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92781*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:92784*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92784*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:92787*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92787*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f444444; valaddr_reg:x3; val_offset:92790*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92790*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:92793*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92793*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:92796*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92796*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f666666; valaddr_reg:x3; val_offset:92799*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92799*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:92802*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92802*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:92805*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92805*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:92808*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92808*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1f3fb6 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4dc416 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1f3fb6; op2val:0x3fcdc416;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:92811*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92811*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800001; valaddr_reg:x3; val_offset:92814*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92814*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800003; valaddr_reg:x3; val_offset:92817*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92817*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f800007; valaddr_reg:x3; val_offset:92820*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92820*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3f999999; valaddr_reg:x3; val_offset:92823*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92823*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:92826*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92826*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:92829*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92829*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:92832*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92832*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:92835*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92835*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:92838*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92838*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:92841*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92841*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:92844*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92844*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:92847*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92847*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:92850*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92850*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:92853*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92853*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:92856*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92856*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:92859*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92859*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800000; valaddr_reg:x3; val_offset:92862*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92862*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800001; valaddr_reg:x3; val_offset:92865*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92865*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800003; valaddr_reg:x3; val_offset:92868*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92868*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800007; valaddr_reg:x3; val_offset:92871*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92871*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880000f; valaddr_reg:x3; val_offset:92874*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92874*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880001f; valaddr_reg:x3; val_offset:92877*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92877*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880003f; valaddr_reg:x3; val_offset:92880*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92880*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880007f; valaddr_reg:x3; val_offset:92883*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92883*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488000ff; valaddr_reg:x3; val_offset:92886*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92886*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488001ff; valaddr_reg:x3; val_offset:92889*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92889*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488003ff; valaddr_reg:x3; val_offset:92892*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92892*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488007ff; valaddr_reg:x3; val_offset:92895*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92895*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48800fff; valaddr_reg:x3; val_offset:92898*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92898*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48801fff; valaddr_reg:x3; val_offset:92901*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92901*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48803fff; valaddr_reg:x3; val_offset:92904*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92904*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x48807fff; valaddr_reg:x3; val_offset:92907*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92907*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4880ffff; valaddr_reg:x3; val_offset:92910*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92910*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4881ffff; valaddr_reg:x3; val_offset:92913*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92913*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4883ffff; valaddr_reg:x3; val_offset:92916*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92916*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x4887ffff; valaddr_reg:x3; val_offset:92919*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92919*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x488fffff; valaddr_reg:x3; val_offset:92922*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92922*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fca7f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x334457 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fca7f; op2val:0x334457;
op3val:0x489fffff; valaddr_reg:x3; val_offset:92925*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92925*0 + 3*241*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759849984,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851008,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851520,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851776,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851904,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759851968,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852000,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852016,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852024,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852028,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852030,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(2759852031,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132735381,32,FLEN)
NAN_BOXED(2150861058,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550720,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550721,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550723,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550727,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550735,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550751,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550783,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550847,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803550975,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803551231,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803551743,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803552767,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803554815,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803558911,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803567103,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803583487,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803616255,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803681791,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1803812863,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1804075007,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1804599295,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1805647871,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1807745023,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1807745024,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1809842176,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1810890752,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811415040,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811677184,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811808256,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811873792,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811906560,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811922944,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811931136,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811935232,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811937280,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811938304,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811938816,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939072,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939200,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939264,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939296,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939312,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939320,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939324,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939326,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(1811939327,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132754358,32,FLEN)
NAN_BOXED(1070449686,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348160,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348161,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348163,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348167,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348175,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348191,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348223,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348287,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348415,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216348671,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216349183,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216350207,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216352255,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216356351,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216364543,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216380927,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216413695,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216479231,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216610303,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1216872447,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1217396735,32,FLEN)
NAN_BOXED(2132789887,32,FLEN)
NAN_BOXED(3359831,32,FLEN)
NAN_BOXED(1218445311,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
