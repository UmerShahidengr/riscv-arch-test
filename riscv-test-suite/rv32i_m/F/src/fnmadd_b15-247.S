
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fff80; valaddr_reg:x3; val_offset:94464*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94464*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fffc0; valaddr_reg:x3; val_offset:94467*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94467*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fffe0; valaddr_reg:x3; val_offset:94470*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94470*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffff0; valaddr_reg:x3; val_offset:94473*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94473*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffff8; valaddr_reg:x3; val_offset:94476*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94476*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffffc; valaddr_reg:x3; val_offset:94479*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94479*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7ffffe; valaddr_reg:x3; val_offset:94482*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94482*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x223e5e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x327df1 and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f223e5e; op2val:0x80327df1;
op3val:0xce7fffff; valaddr_reg:x3; val_offset:94485*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94485*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b800000; valaddr_reg:x3; val_offset:94488*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94488*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b800001; valaddr_reg:x3; val_offset:94491*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94491*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b800003; valaddr_reg:x3; val_offset:94494*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94494*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b800007; valaddr_reg:x3; val_offset:94497*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94497*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b80000f; valaddr_reg:x3; val_offset:94500*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94500*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b80001f; valaddr_reg:x3; val_offset:94503*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94503*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b80003f; valaddr_reg:x3; val_offset:94506*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94506*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b80007f; valaddr_reg:x3; val_offset:94509*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94509*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b8000ff; valaddr_reg:x3; val_offset:94512*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94512*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b8001ff; valaddr_reg:x3; val_offset:94515*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94515*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b8003ff; valaddr_reg:x3; val_offset:94518*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94518*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b8007ff; valaddr_reg:x3; val_offset:94521*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94521*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b800fff; valaddr_reg:x3; val_offset:94524*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94524*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b801fff; valaddr_reg:x3; val_offset:94527*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94527*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b803fff; valaddr_reg:x3; val_offset:94530*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94530*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b807fff; valaddr_reg:x3; val_offset:94533*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94533*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b80ffff; valaddr_reg:x3; val_offset:94536*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94536*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b81ffff; valaddr_reg:x3; val_offset:94539*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94539*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b83ffff; valaddr_reg:x3; val_offset:94542*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94542*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b87ffff; valaddr_reg:x3; val_offset:94545*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94545*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b8fffff; valaddr_reg:x3; val_offset:94548*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94548*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7b9fffff; valaddr_reg:x3; val_offset:94551*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94551*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bbfffff; valaddr_reg:x3; val_offset:94554*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94554*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bc00000; valaddr_reg:x3; val_offset:94557*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94557*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7be00000; valaddr_reg:x3; val_offset:94560*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94560*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bf00000; valaddr_reg:x3; val_offset:94563*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94563*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bf80000; valaddr_reg:x3; val_offset:94566*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94566*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfc0000; valaddr_reg:x3; val_offset:94569*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94569*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfe0000; valaddr_reg:x3; val_offset:94572*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94572*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bff0000; valaddr_reg:x3; val_offset:94575*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94575*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bff8000; valaddr_reg:x3; val_offset:94578*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94578*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffc000; valaddr_reg:x3; val_offset:94581*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94581*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffe000; valaddr_reg:x3; val_offset:94584*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94584*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfff000; valaddr_reg:x3; val_offset:94587*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94587*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfff800; valaddr_reg:x3; val_offset:94590*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94590*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffc00; valaddr_reg:x3; val_offset:94593*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94593*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffe00; valaddr_reg:x3; val_offset:94596*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94596*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffff00; valaddr_reg:x3; val_offset:94599*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94599*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffff80; valaddr_reg:x3; val_offset:94602*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94602*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffffc0; valaddr_reg:x3; val_offset:94605*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94605*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffffe0; valaddr_reg:x3; val_offset:94608*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94608*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffff0; valaddr_reg:x3; val_offset:94611*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94611*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffff8; valaddr_reg:x3; val_offset:94614*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94614*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffffc; valaddr_reg:x3; val_offset:94617*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94617*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bfffffe; valaddr_reg:x3; val_offset:94620*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94620*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xf7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7bffffff; valaddr_reg:x3; val_offset:94623*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94623*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f000001; valaddr_reg:x3; val_offset:94626*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94626*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f000003; valaddr_reg:x3; val_offset:94629*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94629*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f000007; valaddr_reg:x3; val_offset:94632*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94632*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f199999; valaddr_reg:x3; val_offset:94635*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94635*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f249249; valaddr_reg:x3; val_offset:94638*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94638*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f333333; valaddr_reg:x3; val_offset:94641*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94641*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:94644*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94644*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:94647*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94647*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f444444; valaddr_reg:x3; val_offset:94650*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94650*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:94653*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94653*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:94656*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94656*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f666666; valaddr_reg:x3; val_offset:94659*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94659*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:94662*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94662*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:94665*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94665*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:94668*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94668*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x227bc4 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x49ab74 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f227bc4; op2val:0x3fc9ab74;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:94671*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94671*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24800000; valaddr_reg:x3; val_offset:94674*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94674*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24800001; valaddr_reg:x3; val_offset:94677*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94677*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24800003; valaddr_reg:x3; val_offset:94680*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94680*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24800007; valaddr_reg:x3; val_offset:94683*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94683*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2480000f; valaddr_reg:x3; val_offset:94686*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94686*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2480001f; valaddr_reg:x3; val_offset:94689*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94689*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2480003f; valaddr_reg:x3; val_offset:94692*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94692*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2480007f; valaddr_reg:x3; val_offset:94695*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94695*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x248000ff; valaddr_reg:x3; val_offset:94698*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94698*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x248001ff; valaddr_reg:x3; val_offset:94701*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94701*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x248003ff; valaddr_reg:x3; val_offset:94704*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94704*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x248007ff; valaddr_reg:x3; val_offset:94707*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94707*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24800fff; valaddr_reg:x3; val_offset:94710*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94710*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24801fff; valaddr_reg:x3; val_offset:94713*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94713*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24803fff; valaddr_reg:x3; val_offset:94716*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94716*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24807fff; valaddr_reg:x3; val_offset:94719*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94719*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2480ffff; valaddr_reg:x3; val_offset:94722*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94722*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2481ffff; valaddr_reg:x3; val_offset:94725*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94725*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2483ffff; valaddr_reg:x3; val_offset:94728*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94728*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x2487ffff; valaddr_reg:x3; val_offset:94731*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94731*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x248fffff; valaddr_reg:x3; val_offset:94734*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94734*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x249fffff; valaddr_reg:x3; val_offset:94737*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94737*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24bfffff; valaddr_reg:x3; val_offset:94740*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94740*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24c00000; valaddr_reg:x3; val_offset:94743*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94743*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24e00000; valaddr_reg:x3; val_offset:94746*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94746*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24f00000; valaddr_reg:x3; val_offset:94749*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94749*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24f80000; valaddr_reg:x3; val_offset:94752*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94752*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fc0000; valaddr_reg:x3; val_offset:94755*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94755*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fe0000; valaddr_reg:x3; val_offset:94758*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94758*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ff0000; valaddr_reg:x3; val_offset:94761*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94761*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ff8000; valaddr_reg:x3; val_offset:94764*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94764*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffc000; valaddr_reg:x3; val_offset:94767*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94767*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffe000; valaddr_reg:x3; val_offset:94770*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94770*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fff000; valaddr_reg:x3; val_offset:94773*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94773*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fff800; valaddr_reg:x3; val_offset:94776*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94776*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffc00; valaddr_reg:x3; val_offset:94779*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94779*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffe00; valaddr_reg:x3; val_offset:94782*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94782*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffff00; valaddr_reg:x3; val_offset:94785*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94785*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffff80; valaddr_reg:x3; val_offset:94788*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94788*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffffc0; valaddr_reg:x3; val_offset:94791*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94791*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffffe0; valaddr_reg:x3; val_offset:94794*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94794*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffff0; valaddr_reg:x3; val_offset:94797*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94797*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffff8; valaddr_reg:x3; val_offset:94800*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94800*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffffc; valaddr_reg:x3; val_offset:94803*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94803*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24fffffe; valaddr_reg:x3; val_offset:94806*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94806*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x49 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x24ffffff; valaddr_reg:x3; val_offset:94809*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94809*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:94812*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94812*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:94815*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94815*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:94818*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94818*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:94821*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94821*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:94824*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94824*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:94827*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94827*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:94830*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94830*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:94833*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94833*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:94836*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94836*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:94839*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94839*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:94842*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94842*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:94845*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94845*0 + 3*246*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464494976,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495040,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495072,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495088,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495096,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495100,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495102,32,FLEN)
NAN_BOXED(2132950622,32,FLEN)
NAN_BOXED(2150792689,32,FLEN)
NAN_BOXED(3464495103,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986176,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986177,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986179,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986183,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986191,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986207,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986239,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986303,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986431,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071986687,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071987199,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071988223,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071990271,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2071994367,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072002559,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072018943,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072051711,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072117247,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072248319,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2072510463,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2073034751,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2074083327,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2076180479,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2076180480,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2078277632,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2079326208,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2079850496,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080112640,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080243712,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080309248,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080342016,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080358400,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080366592,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080370688,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080372736,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080373760,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374272,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374528,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374656,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374720,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374752,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374768,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374776,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374780,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374782,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2080374783,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132966340,32,FLEN)
NAN_BOXED(1070181236,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368384,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368385,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368387,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368391,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368399,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368415,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368447,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368511,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368639,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612368895,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612369407,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612370431,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612372479,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612376575,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612384767,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612401151,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612433919,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612499455,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612630527,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(612892671,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(613416959,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(614465535,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(616562687,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(616562688,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(618659840,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(619708416,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620232704,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620494848,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620625920,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620691456,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620724224,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620740608,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620748800,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620752896,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620754944,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620755968,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756480,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756736,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756864,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756928,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756960,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756976,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756984,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756988,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756990,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(620756991,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
