
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:94848*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94848*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:94851*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94851*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:94854*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94854*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22b666 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3258b2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22b666; op2val:0x3258b2;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:94857*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94857*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800001; valaddr_reg:x3; val_offset:94860*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94860*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800003; valaddr_reg:x3; val_offset:94863*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94863*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f800007; valaddr_reg:x3; val_offset:94866*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94866*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3f999999; valaddr_reg:x3; val_offset:94869*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94869*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:94872*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94872*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:94875*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94875*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:94878*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94878*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:94881*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94881*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:94884*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94884*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:94887*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94887*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:94890*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94890*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:94893*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94893*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:94896*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94896*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:94899*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94899*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:94902*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94902*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:94905*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94905*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000000; valaddr_reg:x3; val_offset:94908*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94908*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000001; valaddr_reg:x3; val_offset:94911*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94911*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000003; valaddr_reg:x3; val_offset:94914*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94914*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000007; valaddr_reg:x3; val_offset:94917*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94917*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00000f; valaddr_reg:x3; val_offset:94920*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94920*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00001f; valaddr_reg:x3; val_offset:94923*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94923*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00003f; valaddr_reg:x3; val_offset:94926*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94926*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00007f; valaddr_reg:x3; val_offset:94929*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94929*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0000ff; valaddr_reg:x3; val_offset:94932*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94932*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0001ff; valaddr_reg:x3; val_offset:94935*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94935*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0003ff; valaddr_reg:x3; val_offset:94938*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94938*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0007ff; valaddr_reg:x3; val_offset:94941*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94941*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d000fff; valaddr_reg:x3; val_offset:94944*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94944*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d001fff; valaddr_reg:x3; val_offset:94947*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94947*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d003fff; valaddr_reg:x3; val_offset:94950*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94950*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d007fff; valaddr_reg:x3; val_offset:94953*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94953*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d00ffff; valaddr_reg:x3; val_offset:94956*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94956*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d01ffff; valaddr_reg:x3; val_offset:94959*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94959*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d03ffff; valaddr_reg:x3; val_offset:94962*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94962*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d07ffff; valaddr_reg:x3; val_offset:94965*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94965*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d0fffff; valaddr_reg:x3; val_offset:94968*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94968*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d1fffff; valaddr_reg:x3; val_offset:94971*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94971*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d3fffff; valaddr_reg:x3; val_offset:94974*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94974*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d400000; valaddr_reg:x3; val_offset:94977*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94977*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d600000; valaddr_reg:x3; val_offset:94980*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94980*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d700000; valaddr_reg:x3; val_offset:94983*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94983*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d780000; valaddr_reg:x3; val_offset:94986*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94986*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7c0000; valaddr_reg:x3; val_offset:94989*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94989*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7e0000; valaddr_reg:x3; val_offset:94992*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94992*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7f0000; valaddr_reg:x3; val_offset:94995*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94995*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7f8000; valaddr_reg:x3; val_offset:94998*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94998*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fc000; valaddr_reg:x3; val_offset:95001*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95001*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fe000; valaddr_reg:x3; val_offset:95004*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95004*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ff000; valaddr_reg:x3; val_offset:95007*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95007*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ff800; valaddr_reg:x3; val_offset:95010*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95010*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffc00; valaddr_reg:x3; val_offset:95013*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95013*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffe00; valaddr_reg:x3; val_offset:95016*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95016*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fff00; valaddr_reg:x3; val_offset:95019*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95019*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fff80; valaddr_reg:x3; val_offset:95022*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95022*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffc0; valaddr_reg:x3; val_offset:95025*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95025*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffe0; valaddr_reg:x3; val_offset:95028*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95028*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffff0; valaddr_reg:x3; val_offset:95031*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95031*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffff8; valaddr_reg:x3; val_offset:95034*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95034*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffffc; valaddr_reg:x3; val_offset:95037*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95037*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7ffffe; valaddr_reg:x3; val_offset:95040*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95040*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x22dfb7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x324bec and fs3 == 0 and fe3 == 0xfa and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f22dfb7; op2val:0x324bec;
op3val:0x7d7fffff; valaddr_reg:x3; val_offset:95043*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95043*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1800000; valaddr_reg:x3; val_offset:95046*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95046*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1800001; valaddr_reg:x3; val_offset:95049*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95049*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1800003; valaddr_reg:x3; val_offset:95052*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95052*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1800007; valaddr_reg:x3; val_offset:95055*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95055*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa180000f; valaddr_reg:x3; val_offset:95058*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95058*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa180001f; valaddr_reg:x3; val_offset:95061*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95061*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa180003f; valaddr_reg:x3; val_offset:95064*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95064*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa180007f; valaddr_reg:x3; val_offset:95067*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95067*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa18000ff; valaddr_reg:x3; val_offset:95070*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95070*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa18001ff; valaddr_reg:x3; val_offset:95073*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95073*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa18003ff; valaddr_reg:x3; val_offset:95076*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95076*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa18007ff; valaddr_reg:x3; val_offset:95079*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95079*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1800fff; valaddr_reg:x3; val_offset:95082*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95082*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1801fff; valaddr_reg:x3; val_offset:95085*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95085*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1803fff; valaddr_reg:x3; val_offset:95088*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95088*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1807fff; valaddr_reg:x3; val_offset:95091*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95091*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa180ffff; valaddr_reg:x3; val_offset:95094*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95094*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa181ffff; valaddr_reg:x3; val_offset:95097*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95097*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa183ffff; valaddr_reg:x3; val_offset:95100*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95100*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa187ffff; valaddr_reg:x3; val_offset:95103*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95103*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa18fffff; valaddr_reg:x3; val_offset:95106*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95106*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa19fffff; valaddr_reg:x3; val_offset:95109*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95109*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1bfffff; valaddr_reg:x3; val_offset:95112*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95112*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1c00000; valaddr_reg:x3; val_offset:95115*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95115*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1e00000; valaddr_reg:x3; val_offset:95118*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95118*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1f00000; valaddr_reg:x3; val_offset:95121*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95121*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1f80000; valaddr_reg:x3; val_offset:95124*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95124*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fc0000; valaddr_reg:x3; val_offset:95127*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95127*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fe0000; valaddr_reg:x3; val_offset:95130*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95130*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ff0000; valaddr_reg:x3; val_offset:95133*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95133*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ff8000; valaddr_reg:x3; val_offset:95136*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95136*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffc000; valaddr_reg:x3; val_offset:95139*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95139*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffe000; valaddr_reg:x3; val_offset:95142*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95142*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fff000; valaddr_reg:x3; val_offset:95145*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95145*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fff800; valaddr_reg:x3; val_offset:95148*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95148*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffc00; valaddr_reg:x3; val_offset:95151*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95151*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffe00; valaddr_reg:x3; val_offset:95154*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95154*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffff00; valaddr_reg:x3; val_offset:95157*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95157*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffff80; valaddr_reg:x3; val_offset:95160*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95160*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffffc0; valaddr_reg:x3; val_offset:95163*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95163*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffffe0; valaddr_reg:x3; val_offset:95166*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95166*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffff0; valaddr_reg:x3; val_offset:95169*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95169*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffff8; valaddr_reg:x3; val_offset:95172*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95172*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffffc; valaddr_reg:x3; val_offset:95175*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95175*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1fffffe; valaddr_reg:x3; val_offset:95178*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95178*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xa1ffffff; valaddr_reg:x3; val_offset:95181*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95181*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:95184*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95184*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:95187*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95187*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:95190*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95190*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:95193*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95193*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:95196*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95196*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:95199*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95199*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:95202*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95202*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:95205*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95205*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:95208*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95208*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:95211*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95211*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:95214*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95214*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:95217*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95217*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:95220*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95220*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:95223*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95223*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:95226*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95226*0 + 3*247*FLEN/8, x4, x1, x2)

inst_31743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x234d15 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x322a3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f234d15; op2val:0x80322a3d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:95229*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95229*0 + 3*247*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132981350,32,FLEN)
NAN_BOXED(3299506,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152000,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152001,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152003,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152007,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152015,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152031,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152063,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152127,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152255,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097152511,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097153023,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097154047,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097156095,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097160191,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097168383,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097184767,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097217535,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097283071,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097414143,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2097676287,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2098200575,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2099249151,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2101346303,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2101346304,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2103443456,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2104492032,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105016320,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105278464,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105409536,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105475072,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105507840,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105524224,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105532416,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105536512,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105538560,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105539584,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540096,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540352,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540480,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540544,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540576,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540592,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540600,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540604,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540606,32,FLEN)
NAN_BOXED(2132991927,32,FLEN)
NAN_BOXED(3296236,32,FLEN)
NAN_BOXED(2105540607,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520384,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520385,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520387,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520391,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520399,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520415,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520447,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520511,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520639,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709520895,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709521407,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709522431,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709524479,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709528575,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709536767,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709553151,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709585919,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709651455,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2709782527,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2710044671,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2710568959,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2711617535,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2713714687,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2713714688,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2715811840,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2716860416,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717384704,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717646848,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717777920,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717843456,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717876224,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717892608,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717900800,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717904896,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717906944,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717907968,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908480,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908736,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908864,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908928,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908960,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908976,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908984,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908988,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908990,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(2717908991,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133019925,32,FLEN)
NAN_BOXED(2150771261,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
