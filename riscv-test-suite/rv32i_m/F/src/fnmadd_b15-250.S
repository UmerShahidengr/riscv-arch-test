
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf380000f; valaddr_reg:x3; val_offset:95616*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95616*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf380001f; valaddr_reg:x3; val_offset:95619*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95619*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf380003f; valaddr_reg:x3; val_offset:95622*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95622*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf380007f; valaddr_reg:x3; val_offset:95625*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95625*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf38000ff; valaddr_reg:x3; val_offset:95628*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95628*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf38001ff; valaddr_reg:x3; val_offset:95631*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95631*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf38003ff; valaddr_reg:x3; val_offset:95634*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95634*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf38007ff; valaddr_reg:x3; val_offset:95637*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95637*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3800fff; valaddr_reg:x3; val_offset:95640*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95640*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3801fff; valaddr_reg:x3; val_offset:95643*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95643*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3803fff; valaddr_reg:x3; val_offset:95646*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95646*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3807fff; valaddr_reg:x3; val_offset:95649*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95649*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf380ffff; valaddr_reg:x3; val_offset:95652*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95652*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf381ffff; valaddr_reg:x3; val_offset:95655*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95655*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf383ffff; valaddr_reg:x3; val_offset:95658*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95658*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf387ffff; valaddr_reg:x3; val_offset:95661*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95661*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf38fffff; valaddr_reg:x3; val_offset:95664*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95664*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf39fffff; valaddr_reg:x3; val_offset:95667*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95667*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3bfffff; valaddr_reg:x3; val_offset:95670*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95670*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3c00000; valaddr_reg:x3; val_offset:95673*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95673*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3e00000; valaddr_reg:x3; val_offset:95676*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95676*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3f00000; valaddr_reg:x3; val_offset:95679*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95679*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3f80000; valaddr_reg:x3; val_offset:95682*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95682*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fc0000; valaddr_reg:x3; val_offset:95685*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95685*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fe0000; valaddr_reg:x3; val_offset:95688*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95688*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ff0000; valaddr_reg:x3; val_offset:95691*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ff8000; valaddr_reg:x3; val_offset:95694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95694*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffc000; valaddr_reg:x3; val_offset:95697*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95697*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffe000; valaddr_reg:x3; val_offset:95700*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95700*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fff000; valaddr_reg:x3; val_offset:95703*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95703*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fff800; valaddr_reg:x3; val_offset:95706*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95706*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffc00; valaddr_reg:x3; val_offset:95709*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95709*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffe00; valaddr_reg:x3; val_offset:95712*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95712*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffff00; valaddr_reg:x3; val_offset:95715*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95715*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffff80; valaddr_reg:x3; val_offset:95718*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95718*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffffc0; valaddr_reg:x3; val_offset:95721*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95721*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffffe0; valaddr_reg:x3; val_offset:95724*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95724*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffff0; valaddr_reg:x3; val_offset:95727*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95727*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffff8; valaddr_reg:x3; val_offset:95730*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95730*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffffc; valaddr_reg:x3; val_offset:95733*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95733*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3fffffe; valaddr_reg:x3; val_offset:95736*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95736*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xe7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xf3ffffff; valaddr_reg:x3; val_offset:95739*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95739*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff000001; valaddr_reg:x3; val_offset:95742*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95742*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff000003; valaddr_reg:x3; val_offset:95745*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95745*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff000007; valaddr_reg:x3; val_offset:95748*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95748*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff199999; valaddr_reg:x3; val_offset:95751*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95751*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff249249; valaddr_reg:x3; val_offset:95754*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95754*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff333333; valaddr_reg:x3; val_offset:95757*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95757*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:95760*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95760*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:95763*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95763*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff444444; valaddr_reg:x3; val_offset:95766*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95766*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:95769*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95769*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:95772*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95772*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff666666; valaddr_reg:x3; val_offset:95775*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95775*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:95778*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95778*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:95781*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95781*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:95784*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95784*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x238a4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x485dd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f238a4c; op2val:0xbfc85dd8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:95787*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95787*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:95790*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95790*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:95793*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95793*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:95796*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95796*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:95799*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95799*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:95802*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95802*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:95805*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95805*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:95808*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95808*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:95811*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95811*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:95814*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95814*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:95817*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95817*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:95820*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95820*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:95823*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95823*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:95826*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95826*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:95829*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95829*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:95832*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95832*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:95835*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95835*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:95838*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95838*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:95841*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95841*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:95844*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95844*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:95847*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95847*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:95850*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95850*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:95853*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95853*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:95856*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95856*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:95859*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95859*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:95862*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95862*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:95865*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95865*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:95868*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95868*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:95871*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95871*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:95874*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95874*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:95877*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95877*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:95880*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95880*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:95883*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95883*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:95886*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95886*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:95889*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95889*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:95892*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95892*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:95895*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95895*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:95898*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95898*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:95901*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95901*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:95904*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95904*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:95907*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95907*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:95910*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95910*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:95913*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95913*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:95916*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95916*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:95919*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95919*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:95922*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95922*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:95925*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95925*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:95928*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95928*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:95931*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95931*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:95934*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95934*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:95937*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95937*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:95940*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95940*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:95943*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95943*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:95946*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95946*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:95949*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95949*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:95952*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95952*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:95955*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95955*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:95958*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95958*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:95961*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95961*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:95964*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95964*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:95967*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95967*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:95970*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95970*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x23d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f23d4ce; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:95973*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95973*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:95976*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95976*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:95979*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95979*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:95982*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95982*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:95985*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95985*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:95988*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95988*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:95991*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95991*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:95994*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95994*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x242d58 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f242d58; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:95997*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95997*0 + 3*249*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252111,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252127,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252159,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252223,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252351,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085252607,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085253119,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085254143,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085256191,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085260287,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085268479,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085284863,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085317631,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085383167,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085514239,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4085776383,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4086300671,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4087349247,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4089446399,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4089446400,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4091543552,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4092592128,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093116416,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093378560,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093509632,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093575168,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093607936,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093624320,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093632512,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093636608,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093638656,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093639680,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640192,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640448,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640576,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640640,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640672,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640688,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640696,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640700,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640702,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4093640703,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133035596,32,FLEN)
NAN_BOXED(3217579480,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2133054670,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2133077336,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
