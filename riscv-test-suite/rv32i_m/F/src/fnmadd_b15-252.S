
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28000fff; valaddr_reg:x3; val_offset:96384*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96384*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28001fff; valaddr_reg:x3; val_offset:96387*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96387*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28003fff; valaddr_reg:x3; val_offset:96390*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96390*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28007fff; valaddr_reg:x3; val_offset:96393*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96393*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x2800ffff; valaddr_reg:x3; val_offset:96396*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96396*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x2801ffff; valaddr_reg:x3; val_offset:96399*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96399*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x2803ffff; valaddr_reg:x3; val_offset:96402*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96402*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x2807ffff; valaddr_reg:x3; val_offset:96405*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96405*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x280fffff; valaddr_reg:x3; val_offset:96408*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96408*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x281fffff; valaddr_reg:x3; val_offset:96411*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96411*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x283fffff; valaddr_reg:x3; val_offset:96414*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96414*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28400000; valaddr_reg:x3; val_offset:96417*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96417*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28600000; valaddr_reg:x3; val_offset:96420*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96420*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28700000; valaddr_reg:x3; val_offset:96423*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96423*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x28780000; valaddr_reg:x3; val_offset:96426*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96426*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287c0000; valaddr_reg:x3; val_offset:96429*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96429*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287e0000; valaddr_reg:x3; val_offset:96432*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96432*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287f0000; valaddr_reg:x3; val_offset:96435*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96435*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287f8000; valaddr_reg:x3; val_offset:96438*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96438*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fc000; valaddr_reg:x3; val_offset:96441*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96441*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fe000; valaddr_reg:x3; val_offset:96444*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96444*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ff000; valaddr_reg:x3; val_offset:96447*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96447*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ff800; valaddr_reg:x3; val_offset:96450*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96450*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffc00; valaddr_reg:x3; val_offset:96453*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96453*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffe00; valaddr_reg:x3; val_offset:96456*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96456*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fff00; valaddr_reg:x3; val_offset:96459*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96459*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fff80; valaddr_reg:x3; val_offset:96462*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96462*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fffc0; valaddr_reg:x3; val_offset:96465*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96465*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fffe0; valaddr_reg:x3; val_offset:96468*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96468*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffff0; valaddr_reg:x3; val_offset:96471*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96471*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffff8; valaddr_reg:x3; val_offset:96474*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96474*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffffc; valaddr_reg:x3; val_offset:96477*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96477*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287ffffe; valaddr_reg:x3; val_offset:96480*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96480*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x287fffff; valaddr_reg:x3; val_offset:96483*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96483*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3f800001; valaddr_reg:x3; val_offset:96486*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96486*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3f800003; valaddr_reg:x3; val_offset:96489*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96489*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3f800007; valaddr_reg:x3; val_offset:96492*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96492*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3f999999; valaddr_reg:x3; val_offset:96495*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96495*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:96498*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96498*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:96501*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96501*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:96504*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96504*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:96507*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96507*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:96510*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96510*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:96513*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96513*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:96516*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96516*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:96519*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96519*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:96522*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96522*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:96525*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96525*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:96528*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96528*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2488c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x31c9fe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2488c3; op2val:0x31c9fe;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:96531*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96531*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad800000; valaddr_reg:x3; val_offset:96534*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96534*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad800001; valaddr_reg:x3; val_offset:96537*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96537*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad800003; valaddr_reg:x3; val_offset:96540*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96540*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad800007; valaddr_reg:x3; val_offset:96543*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96543*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad80000f; valaddr_reg:x3; val_offset:96546*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96546*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad80001f; valaddr_reg:x3; val_offset:96549*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96549*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad80003f; valaddr_reg:x3; val_offset:96552*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96552*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad80007f; valaddr_reg:x3; val_offset:96555*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96555*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad8000ff; valaddr_reg:x3; val_offset:96558*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96558*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad8001ff; valaddr_reg:x3; val_offset:96561*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96561*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad8003ff; valaddr_reg:x3; val_offset:96564*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96564*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad8007ff; valaddr_reg:x3; val_offset:96567*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96567*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad800fff; valaddr_reg:x3; val_offset:96570*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96570*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad801fff; valaddr_reg:x3; val_offset:96573*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96573*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad803fff; valaddr_reg:x3; val_offset:96576*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96576*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad807fff; valaddr_reg:x3; val_offset:96579*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96579*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad80ffff; valaddr_reg:x3; val_offset:96582*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96582*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad81ffff; valaddr_reg:x3; val_offset:96585*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96585*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad83ffff; valaddr_reg:x3; val_offset:96588*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96588*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad87ffff; valaddr_reg:x3; val_offset:96591*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96591*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad8fffff; valaddr_reg:x3; val_offset:96594*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96594*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xad9fffff; valaddr_reg:x3; val_offset:96597*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96597*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadbfffff; valaddr_reg:x3; val_offset:96600*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96600*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadc00000; valaddr_reg:x3; val_offset:96603*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96603*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xade00000; valaddr_reg:x3; val_offset:96606*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96606*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadf00000; valaddr_reg:x3; val_offset:96609*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96609*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadf80000; valaddr_reg:x3; val_offset:96612*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96612*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfc0000; valaddr_reg:x3; val_offset:96615*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96615*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfe0000; valaddr_reg:x3; val_offset:96618*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96618*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadff0000; valaddr_reg:x3; val_offset:96621*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96621*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadff8000; valaddr_reg:x3; val_offset:96624*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96624*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffc000; valaddr_reg:x3; val_offset:96627*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96627*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffe000; valaddr_reg:x3; val_offset:96630*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96630*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfff000; valaddr_reg:x3; val_offset:96633*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96633*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfff800; valaddr_reg:x3; val_offset:96636*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96636*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffc00; valaddr_reg:x3; val_offset:96639*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96639*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffe00; valaddr_reg:x3; val_offset:96642*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96642*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffff00; valaddr_reg:x3; val_offset:96645*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96645*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffff80; valaddr_reg:x3; val_offset:96648*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96648*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffffc0; valaddr_reg:x3; val_offset:96651*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96651*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffffe0; valaddr_reg:x3; val_offset:96654*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96654*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffff0; valaddr_reg:x3; val_offset:96657*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96657*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffff8; valaddr_reg:x3; val_offset:96660*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96660*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffffc; valaddr_reg:x3; val_offset:96663*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96663*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadfffffe; valaddr_reg:x3; val_offset:96666*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96666*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xadffffff; valaddr_reg:x3; val_offset:96669*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96669*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbf800001; valaddr_reg:x3; val_offset:96672*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96672*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbf800003; valaddr_reg:x3; val_offset:96675*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96675*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbf800007; valaddr_reg:x3; val_offset:96678*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96678*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbf999999; valaddr_reg:x3; val_offset:96681*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96681*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:96684*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96684*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:96687*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96687*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:96690*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96690*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:96693*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96693*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:96696*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96696*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:96699*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96699*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:96702*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96702*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:96705*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96705*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:96708*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96708*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:96711*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96711*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:96714*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96714*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24a5a4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31c142 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24a5a4; op2val:0x8031c142;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:96717*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96717*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82000000; valaddr_reg:x3; val_offset:96720*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96720*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82000001; valaddr_reg:x3; val_offset:96723*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96723*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82000003; valaddr_reg:x3; val_offset:96726*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96726*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82000007; valaddr_reg:x3; val_offset:96729*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96729*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x8200000f; valaddr_reg:x3; val_offset:96732*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96732*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x8200001f; valaddr_reg:x3; val_offset:96735*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96735*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x8200003f; valaddr_reg:x3; val_offset:96738*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96738*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x8200007f; valaddr_reg:x3; val_offset:96741*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96741*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x820000ff; valaddr_reg:x3; val_offset:96744*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96744*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x820001ff; valaddr_reg:x3; val_offset:96747*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96747*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x820003ff; valaddr_reg:x3; val_offset:96750*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96750*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x820007ff; valaddr_reg:x3; val_offset:96753*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96753*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82000fff; valaddr_reg:x3; val_offset:96756*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96756*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82001fff; valaddr_reg:x3; val_offset:96759*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96759*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82003fff; valaddr_reg:x3; val_offset:96762*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96762*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24d5b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x31b2c0 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24d5b2; op2val:0x8031b2c0;
op3val:0x82007fff; valaddr_reg:x3; val_offset:96765*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96765*0 + 3*251*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671092735,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671096831,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671105023,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671121407,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671154175,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671219711,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671350783,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(671612927,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(672137215,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(673185791,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(675282943,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(675282944,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(677380096,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(678428672,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(678952960,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679215104,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679346176,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679411712,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679444480,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679460864,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679469056,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679473152,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679475200,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679476224,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679476736,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679476992,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477120,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477184,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477216,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477232,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477240,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477244,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477246,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(679477247,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133100739,32,FLEN)
NAN_BOXED(3262974,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910846976,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910846977,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910846979,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910846983,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910846991,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847007,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847039,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847103,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847231,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847487,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910847999,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910849023,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910851071,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910855167,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910863359,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910879743,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910912511,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2910978047,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2911109119,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2911371263,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2911895551,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2912944127,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2915041279,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2915041280,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2917138432,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2918187008,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2918711296,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2918973440,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919104512,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919170048,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919202816,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919219200,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919227392,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919231488,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919233536,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919234560,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235072,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235328,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235456,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235520,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235552,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235568,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235576,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235580,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235582,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(2919235583,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133108132,32,FLEN)
NAN_BOXED(2150744386,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2133120434,32,FLEN)
NAN_BOXED(2150740672,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
