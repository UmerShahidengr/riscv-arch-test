
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:97152*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97152*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:97155*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97155*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:97158*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97158*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:97161*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97161*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:97164*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97164*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:97167*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97167*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:97170*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97170*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:97173*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97173*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:97176*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97176*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:97179*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97179*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:97182*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97182*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:97185*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97185*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:97188*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97188*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:97191*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97191*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:97194*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97194*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:97197*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97197*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:97200*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97200*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:97203*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97203*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:97206*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97206*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:97209*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97209*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:97212*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97212*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:97215*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97215*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:97218*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97218*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:97221*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97221*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:97224*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97224*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:97227*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97227*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:97230*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97230*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:97233*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97233*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:97236*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97236*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:97239*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97239*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:97242*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97242*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:97245*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97245*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:97248*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97248*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:97251*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97251*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:97254*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97254*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:97257*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97257*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:97260*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97260*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:97263*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97263*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:97266*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97266*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:97269*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97269*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:97272*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97272*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bb8; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:97275*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97275*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74000000; valaddr_reg:x3; val_offset:97278*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97278*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74000001; valaddr_reg:x3; val_offset:97281*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97281*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74000003; valaddr_reg:x3; val_offset:97284*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97284*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74000007; valaddr_reg:x3; val_offset:97287*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97287*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7400000f; valaddr_reg:x3; val_offset:97290*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97290*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7400001f; valaddr_reg:x3; val_offset:97293*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97293*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7400003f; valaddr_reg:x3; val_offset:97296*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97296*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7400007f; valaddr_reg:x3; val_offset:97299*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97299*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x740000ff; valaddr_reg:x3; val_offset:97302*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97302*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x740001ff; valaddr_reg:x3; val_offset:97305*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97305*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x740003ff; valaddr_reg:x3; val_offset:97308*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97308*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x740007ff; valaddr_reg:x3; val_offset:97311*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97311*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74000fff; valaddr_reg:x3; val_offset:97314*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97314*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74001fff; valaddr_reg:x3; val_offset:97317*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97317*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74003fff; valaddr_reg:x3; val_offset:97320*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97320*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74007fff; valaddr_reg:x3; val_offset:97323*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97323*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7400ffff; valaddr_reg:x3; val_offset:97326*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97326*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7401ffff; valaddr_reg:x3; val_offset:97329*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97329*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7403ffff; valaddr_reg:x3; val_offset:97332*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97332*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7407ffff; valaddr_reg:x3; val_offset:97335*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97335*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x740fffff; valaddr_reg:x3; val_offset:97338*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97338*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x741fffff; valaddr_reg:x3; val_offset:97341*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97341*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x743fffff; valaddr_reg:x3; val_offset:97344*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97344*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74400000; valaddr_reg:x3; val_offset:97347*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97347*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74600000; valaddr_reg:x3; val_offset:97350*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97350*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74700000; valaddr_reg:x3; val_offset:97353*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97353*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x74780000; valaddr_reg:x3; val_offset:97356*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97356*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747c0000; valaddr_reg:x3; val_offset:97359*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97359*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747e0000; valaddr_reg:x3; val_offset:97362*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97362*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747f0000; valaddr_reg:x3; val_offset:97365*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97365*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747f8000; valaddr_reg:x3; val_offset:97368*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97368*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fc000; valaddr_reg:x3; val_offset:97371*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97371*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fe000; valaddr_reg:x3; val_offset:97374*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97374*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ff000; valaddr_reg:x3; val_offset:97377*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97377*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ff800; valaddr_reg:x3; val_offset:97380*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97380*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffc00; valaddr_reg:x3; val_offset:97383*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97383*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffe00; valaddr_reg:x3; val_offset:97386*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97386*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fff00; valaddr_reg:x3; val_offset:97389*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97389*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fff80; valaddr_reg:x3; val_offset:97392*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97392*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fffc0; valaddr_reg:x3; val_offset:97395*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97395*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fffe0; valaddr_reg:x3; val_offset:97398*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97398*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffff0; valaddr_reg:x3; val_offset:97401*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97401*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffff8; valaddr_reg:x3; val_offset:97404*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97404*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffffc; valaddr_reg:x3; val_offset:97407*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97407*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747ffffe; valaddr_reg:x3; val_offset:97410*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97410*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x747fffff; valaddr_reg:x3; val_offset:97413*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97413*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:97416*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97416*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:97419*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97419*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:97422*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97422*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:97425*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97425*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:97428*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97428*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:97431*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97431*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:97434*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97434*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:97437*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97437*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:97440*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97440*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:97443*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97443*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:97446*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97446*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:97449*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97449*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:97452*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97452*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:97455*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97455*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:97458*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97458*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x255bed and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4629a4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f255bed; op2val:0x3fc629a4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:97461*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97461*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:97464*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97464*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:97467*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97467*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:97470*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97470*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:97473*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97473*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:97476*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97476*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:97479*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97479*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:97482*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97482*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:97485*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97485*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:97488*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97488*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:97491*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97491*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:97494*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97494*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:97497*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97497*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:97500*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97500*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:97503*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97503*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:97506*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97506*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:97509*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97509*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x3; val_offset:97512*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97512*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x3; val_offset:97515*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97515*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x3; val_offset:97518*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97518*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x3; val_offset:97521*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97521*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x3; val_offset:97524*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97524*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x3; val_offset:97527*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97527*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x3; val_offset:97530*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97530*0 + 3*253*FLEN/8, x4, x1, x2)

inst_32511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x262f4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f262f4c; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x3; val_offset:97533*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97533*0 + 3*253*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2133154744,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157056,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157057,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157059,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157063,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157071,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157087,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157119,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157183,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157311,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946157567,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946158079,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946159103,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946161151,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946165247,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946173439,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946189823,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946222591,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946288127,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946419199,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1946681343,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1947205631,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1948254207,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1950351359,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1950351360,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1952448512,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1953497088,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954021376,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954283520,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954414592,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954480128,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954512896,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954529280,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954537472,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954541568,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954543616,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954544640,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545152,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545408,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545536,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545600,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545632,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545648,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545656,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545660,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545662,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(1954545663,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133154797,32,FLEN)
NAN_BOXED(1069951396,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753280,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753281,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753283,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753287,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753295,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753311,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753343,32,FLEN)
NAN_BOXED(2133208908,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753407,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
