
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fe0000; valaddr_reg:x3; val_offset:97920*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97920*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ff0000; valaddr_reg:x3; val_offset:97923*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97923*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ff8000; valaddr_reg:x3; val_offset:97926*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97926*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffc000; valaddr_reg:x3; val_offset:97929*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97929*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffe000; valaddr_reg:x3; val_offset:97932*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97932*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fff000; valaddr_reg:x3; val_offset:97935*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97935*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fff800; valaddr_reg:x3; val_offset:97938*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97938*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffc00; valaddr_reg:x3; val_offset:97941*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97941*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffe00; valaddr_reg:x3; val_offset:97944*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97944*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffff00; valaddr_reg:x3; val_offset:97947*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97947*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffff80; valaddr_reg:x3; val_offset:97950*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97950*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffffc0; valaddr_reg:x3; val_offset:97953*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97953*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffffe0; valaddr_reg:x3; val_offset:97956*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97956*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffff0; valaddr_reg:x3; val_offset:97959*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97959*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffff8; valaddr_reg:x3; val_offset:97962*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97962*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffffc; valaddr_reg:x3; val_offset:97965*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97965*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37fffffe; valaddr_reg:x3; val_offset:97968*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97968*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x37ffffff; valaddr_reg:x3; val_offset:97971*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97971*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3f800001; valaddr_reg:x3; val_offset:97974*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97974*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3f800003; valaddr_reg:x3; val_offset:97977*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97977*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3f800007; valaddr_reg:x3; val_offset:97980*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97980*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3f999999; valaddr_reg:x3; val_offset:97983*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97983*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:97986*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97986*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:97989*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97989*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:97992*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97992*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:97995*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97995*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:97998*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 97998*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:98001*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98001*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:98004*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98004*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:98007*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98007*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:98010*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98010*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:98013*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98013*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:98016*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98016*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26abc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x312695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26abc5; op2val:0x312695;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:98019*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98019*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4000000; valaddr_reg:x3; val_offset:98022*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98022*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4000001; valaddr_reg:x3; val_offset:98025*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98025*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4000003; valaddr_reg:x3; val_offset:98028*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98028*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4000007; valaddr_reg:x3; val_offset:98031*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98031*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf400000f; valaddr_reg:x3; val_offset:98034*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98034*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf400001f; valaddr_reg:x3; val_offset:98037*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98037*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf400003f; valaddr_reg:x3; val_offset:98040*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98040*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf400007f; valaddr_reg:x3; val_offset:98043*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98043*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf40000ff; valaddr_reg:x3; val_offset:98046*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98046*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf40001ff; valaddr_reg:x3; val_offset:98049*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98049*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf40003ff; valaddr_reg:x3; val_offset:98052*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98052*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf40007ff; valaddr_reg:x3; val_offset:98055*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98055*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4000fff; valaddr_reg:x3; val_offset:98058*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98058*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4001fff; valaddr_reg:x3; val_offset:98061*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98061*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4003fff; valaddr_reg:x3; val_offset:98064*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98064*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4007fff; valaddr_reg:x3; val_offset:98067*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98067*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf400ffff; valaddr_reg:x3; val_offset:98070*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98070*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf401ffff; valaddr_reg:x3; val_offset:98073*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98073*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf403ffff; valaddr_reg:x3; val_offset:98076*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98076*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf407ffff; valaddr_reg:x3; val_offset:98079*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98079*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf40fffff; valaddr_reg:x3; val_offset:98082*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98082*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf41fffff; valaddr_reg:x3; val_offset:98085*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98085*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf43fffff; valaddr_reg:x3; val_offset:98088*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98088*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4400000; valaddr_reg:x3; val_offset:98091*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98091*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4600000; valaddr_reg:x3; val_offset:98094*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98094*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4700000; valaddr_reg:x3; val_offset:98097*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98097*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf4780000; valaddr_reg:x3; val_offset:98100*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98100*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47c0000; valaddr_reg:x3; val_offset:98103*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98103*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47e0000; valaddr_reg:x3; val_offset:98106*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98106*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47f0000; valaddr_reg:x3; val_offset:98109*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98109*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47f8000; valaddr_reg:x3; val_offset:98112*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98112*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fc000; valaddr_reg:x3; val_offset:98115*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98115*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fe000; valaddr_reg:x3; val_offset:98118*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98118*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ff000; valaddr_reg:x3; val_offset:98121*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98121*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ff800; valaddr_reg:x3; val_offset:98124*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98124*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffc00; valaddr_reg:x3; val_offset:98127*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98127*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffe00; valaddr_reg:x3; val_offset:98130*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98130*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fff00; valaddr_reg:x3; val_offset:98133*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98133*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fff80; valaddr_reg:x3; val_offset:98136*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98136*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fffc0; valaddr_reg:x3; val_offset:98139*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98139*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fffe0; valaddr_reg:x3; val_offset:98142*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98142*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffff0; valaddr_reg:x3; val_offset:98145*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98145*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffff8; valaddr_reg:x3; val_offset:98148*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98148*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffffc; valaddr_reg:x3; val_offset:98151*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98151*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47ffffe; valaddr_reg:x3; val_offset:98154*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98154*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xe8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xf47fffff; valaddr_reg:x3; val_offset:98157*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98157*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff000001; valaddr_reg:x3; val_offset:98160*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98160*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff000003; valaddr_reg:x3; val_offset:98163*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98163*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff000007; valaddr_reg:x3; val_offset:98166*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98166*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff199999; valaddr_reg:x3; val_offset:98169*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98169*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff249249; valaddr_reg:x3; val_offset:98172*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98172*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff333333; valaddr_reg:x3; val_offset:98175*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98175*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:98178*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98178*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:98181*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98181*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff444444; valaddr_reg:x3; val_offset:98184*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98184*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:98187*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98187*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:98190*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98190*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff666666; valaddr_reg:x3; val_offset:98193*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98193*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:98196*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98196*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:98199*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98199*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:98202*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98202*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x26bd22 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x4485de and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f26bd22; op2val:0xbfc485de;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:98205*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98205*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4800000; valaddr_reg:x3; val_offset:98208*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98208*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4800001; valaddr_reg:x3; val_offset:98211*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98211*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4800003; valaddr_reg:x3; val_offset:98214*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98214*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4800007; valaddr_reg:x3; val_offset:98217*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98217*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa480000f; valaddr_reg:x3; val_offset:98220*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98220*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa480001f; valaddr_reg:x3; val_offset:98223*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98223*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa480003f; valaddr_reg:x3; val_offset:98226*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98226*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa480007f; valaddr_reg:x3; val_offset:98229*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98229*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa48000ff; valaddr_reg:x3; val_offset:98232*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98232*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa48001ff; valaddr_reg:x3; val_offset:98235*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98235*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa48003ff; valaddr_reg:x3; val_offset:98238*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98238*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa48007ff; valaddr_reg:x3; val_offset:98241*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98241*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4800fff; valaddr_reg:x3; val_offset:98244*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98244*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4801fff; valaddr_reg:x3; val_offset:98247*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98247*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4803fff; valaddr_reg:x3; val_offset:98250*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98250*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4807fff; valaddr_reg:x3; val_offset:98253*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98253*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa480ffff; valaddr_reg:x3; val_offset:98256*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98256*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa481ffff; valaddr_reg:x3; val_offset:98259*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98259*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa483ffff; valaddr_reg:x3; val_offset:98262*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98262*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa487ffff; valaddr_reg:x3; val_offset:98265*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98265*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa48fffff; valaddr_reg:x3; val_offset:98268*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98268*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa49fffff; valaddr_reg:x3; val_offset:98271*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98271*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4bfffff; valaddr_reg:x3; val_offset:98274*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98274*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4c00000; valaddr_reg:x3; val_offset:98277*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98277*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4e00000; valaddr_reg:x3; val_offset:98280*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98280*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4f00000; valaddr_reg:x3; val_offset:98283*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98283*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4f80000; valaddr_reg:x3; val_offset:98286*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98286*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fc0000; valaddr_reg:x3; val_offset:98289*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98289*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fe0000; valaddr_reg:x3; val_offset:98292*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98292*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ff0000; valaddr_reg:x3; val_offset:98295*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98295*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ff8000; valaddr_reg:x3; val_offset:98298*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98298*0 + 3*255*FLEN/8, x4, x1, x2)

inst_32767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffc000; valaddr_reg:x3; val_offset:98301*0 + 3*255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98301*0 + 3*255*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939393024,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939458560,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939491328,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939507712,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939515904,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939520000,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939522048,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939523072,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939523584,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939523840,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939523968,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524032,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524064,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524080,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524088,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524092,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524094,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(939524095,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133240773,32,FLEN)
NAN_BOXED(3221141,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640704,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640705,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640707,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640711,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640719,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640735,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640767,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640831,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093640959,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093641215,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093641727,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093642751,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093644799,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093648895,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093657087,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093673471,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093706239,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093771775,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4093902847,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4094164991,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4094689279,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4095737855,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4097835007,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4097835008,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4099932160,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4100980736,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4101505024,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4101767168,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4101898240,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4101963776,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4101996544,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102012928,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102021120,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102025216,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102027264,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102028288,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102028800,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029056,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029184,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029248,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029280,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029296,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029304,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029308,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029310,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4102029311,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133245218,32,FLEN)
NAN_BOXED(3217327582,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852032,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852033,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852035,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852039,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852047,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852063,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852095,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852159,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852287,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759852543,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759853055,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759854079,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759856127,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759860223,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759868415,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759884799,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759917567,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2759983103,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2760114175,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2760376319,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2760900607,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2761949183,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2764046335,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2764046336,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2766143488,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2767192064,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2767716352,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2767978496,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768109568,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768175104,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768207872,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768224256,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
