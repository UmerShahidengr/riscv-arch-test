
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffe000; valaddr_reg:x3; val_offset:98304*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98304*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fff000; valaddr_reg:x3; val_offset:98307*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98307*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fff800; valaddr_reg:x3; val_offset:98310*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98310*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffc00; valaddr_reg:x3; val_offset:98313*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98313*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffe00; valaddr_reg:x3; val_offset:98316*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98316*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffff00; valaddr_reg:x3; val_offset:98319*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98319*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffff80; valaddr_reg:x3; val_offset:98322*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98322*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffffc0; valaddr_reg:x3; val_offset:98325*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98325*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffffe0; valaddr_reg:x3; val_offset:98328*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98328*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffff0; valaddr_reg:x3; val_offset:98331*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98331*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffff8; valaddr_reg:x3; val_offset:98334*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98334*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffffc; valaddr_reg:x3; val_offset:98337*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98337*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4fffffe; valaddr_reg:x3; val_offset:98340*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98340*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x49 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xa4ffffff; valaddr_reg:x3; val_offset:98343*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98343*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:98346*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98346*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:98349*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98349*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:98352*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98352*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:98355*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98355*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:98358*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98358*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:98361*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98361*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:98364*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98364*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:98367*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98367*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:98370*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98370*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:98373*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98373*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:98376*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98376*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:98379*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98379*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:98382*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98382*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:98385*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98385*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:98388*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98388*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2704a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x310c6d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2704a7; op2val:0x80310c6d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:98391*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98391*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8000000; valaddr_reg:x3; val_offset:98394*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98394*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8000001; valaddr_reg:x3; val_offset:98397*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98397*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8000003; valaddr_reg:x3; val_offset:98400*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98400*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8000007; valaddr_reg:x3; val_offset:98403*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98403*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf800000f; valaddr_reg:x3; val_offset:98406*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98406*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf800001f; valaddr_reg:x3; val_offset:98409*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98409*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf800003f; valaddr_reg:x3; val_offset:98412*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98412*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf800007f; valaddr_reg:x3; val_offset:98415*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98415*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf80000ff; valaddr_reg:x3; val_offset:98418*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98418*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf80001ff; valaddr_reg:x3; val_offset:98421*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98421*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf80003ff; valaddr_reg:x3; val_offset:98424*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98424*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf80007ff; valaddr_reg:x3; val_offset:98427*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98427*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8000fff; valaddr_reg:x3; val_offset:98430*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98430*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8001fff; valaddr_reg:x3; val_offset:98433*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98433*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8003fff; valaddr_reg:x3; val_offset:98436*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98436*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8007fff; valaddr_reg:x3; val_offset:98439*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98439*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf800ffff; valaddr_reg:x3; val_offset:98442*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98442*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf801ffff; valaddr_reg:x3; val_offset:98445*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98445*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf803ffff; valaddr_reg:x3; val_offset:98448*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98448*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf807ffff; valaddr_reg:x3; val_offset:98451*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98451*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf80fffff; valaddr_reg:x3; val_offset:98454*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98454*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf81fffff; valaddr_reg:x3; val_offset:98457*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98457*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf83fffff; valaddr_reg:x3; val_offset:98460*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98460*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8400000; valaddr_reg:x3; val_offset:98463*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98463*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8600000; valaddr_reg:x3; val_offset:98466*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98466*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8700000; valaddr_reg:x3; val_offset:98469*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98469*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf8780000; valaddr_reg:x3; val_offset:98472*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98472*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87c0000; valaddr_reg:x3; val_offset:98475*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98475*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87e0000; valaddr_reg:x3; val_offset:98478*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98478*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87f0000; valaddr_reg:x3; val_offset:98481*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98481*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87f8000; valaddr_reg:x3; val_offset:98484*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98484*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fc000; valaddr_reg:x3; val_offset:98487*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98487*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fe000; valaddr_reg:x3; val_offset:98490*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98490*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ff000; valaddr_reg:x3; val_offset:98493*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98493*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ff800; valaddr_reg:x3; val_offset:98496*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98496*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffc00; valaddr_reg:x3; val_offset:98499*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98499*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffe00; valaddr_reg:x3; val_offset:98502*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98502*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fff00; valaddr_reg:x3; val_offset:98505*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98505*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fff80; valaddr_reg:x3; val_offset:98508*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98508*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fffc0; valaddr_reg:x3; val_offset:98511*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98511*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fffe0; valaddr_reg:x3; val_offset:98514*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98514*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffff0; valaddr_reg:x3; val_offset:98517*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98517*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffff8; valaddr_reg:x3; val_offset:98520*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98520*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffffc; valaddr_reg:x3; val_offset:98523*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98523*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87ffffe; valaddr_reg:x3; val_offset:98526*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98526*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xf87fffff; valaddr_reg:x3; val_offset:98529*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98529*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff000001; valaddr_reg:x3; val_offset:98532*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98532*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff000003; valaddr_reg:x3; val_offset:98535*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98535*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff000007; valaddr_reg:x3; val_offset:98538*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98538*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff199999; valaddr_reg:x3; val_offset:98541*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98541*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff249249; valaddr_reg:x3; val_offset:98544*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98544*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff333333; valaddr_reg:x3; val_offset:98547*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98547*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:98550*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98550*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:98553*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98553*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff444444; valaddr_reg:x3; val_offset:98556*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98556*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:98559*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98559*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:98562*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98562*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff666666; valaddr_reg:x3; val_offset:98565*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98565*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:98568*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98568*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:98571*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98571*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:98574*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98574*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x273e00 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x43ee70 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f273e00; op2val:0xbfc3ee70;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:98577*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98577*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000000; valaddr_reg:x3; val_offset:98580*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98580*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000001; valaddr_reg:x3; val_offset:98583*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98583*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000003; valaddr_reg:x3; val_offset:98586*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98586*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000007; valaddr_reg:x3; val_offset:98589*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98589*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00000f; valaddr_reg:x3; val_offset:98592*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98592*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00001f; valaddr_reg:x3; val_offset:98595*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98595*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00003f; valaddr_reg:x3; val_offset:98598*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98598*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00007f; valaddr_reg:x3; val_offset:98601*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98601*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0000ff; valaddr_reg:x3; val_offset:98604*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98604*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0001ff; valaddr_reg:x3; val_offset:98607*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98607*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0003ff; valaddr_reg:x3; val_offset:98610*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98610*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0007ff; valaddr_reg:x3; val_offset:98613*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98613*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f000fff; valaddr_reg:x3; val_offset:98616*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98616*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f001fff; valaddr_reg:x3; val_offset:98619*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98619*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f003fff; valaddr_reg:x3; val_offset:98622*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98622*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f007fff; valaddr_reg:x3; val_offset:98625*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98625*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f00ffff; valaddr_reg:x3; val_offset:98628*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98628*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f01ffff; valaddr_reg:x3; val_offset:98631*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98631*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f03ffff; valaddr_reg:x3; val_offset:98634*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98634*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f07ffff; valaddr_reg:x3; val_offset:98637*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98637*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f0fffff; valaddr_reg:x3; val_offset:98640*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98640*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f199999; valaddr_reg:x3; val_offset:98643*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98643*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f1fffff; valaddr_reg:x3; val_offset:98646*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98646*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f249249; valaddr_reg:x3; val_offset:98649*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98649*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f333333; valaddr_reg:x3; val_offset:98652*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98652*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:98655*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98655*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:98658*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98658*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f3fffff; valaddr_reg:x3; val_offset:98661*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98661*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f400000; valaddr_reg:x3; val_offset:98664*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98664*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f444444; valaddr_reg:x3; val_offset:98667*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98667*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:98670*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98670*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:98673*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98673*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f600000; valaddr_reg:x3; val_offset:98676*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98676*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f666666; valaddr_reg:x3; val_offset:98679*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98679*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:98682*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98682*0 + 3*256*FLEN/8, x4, x1, x2)

inst_32895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27cbff and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4348a2 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27cbff; op2val:0x3fc348a2;
op3val:0x7f700000; valaddr_reg:x3; val_offset:98685*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 98685*0 + 3*256*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768232448,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768236544,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768238592,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768239616,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240128,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240384,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240512,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240576,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240608,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240624,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240632,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240636,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240638,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(2768240639,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133263527,32,FLEN)
NAN_BOXED(2150698093,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749568,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749569,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749571,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749575,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749583,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749599,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749631,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749695,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160749823,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160750079,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160750591,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160751615,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160753663,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160757759,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160765951,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160782335,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160815103,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4160880639,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4161011711,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4161273855,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4161798143,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4162846719,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4164943871,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4164943872,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4167041024,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4168089600,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4168613888,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4168876032,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169007104,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169072640,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169105408,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169121792,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169129984,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169134080,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169136128,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169137152,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169137664,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169137920,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138048,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138112,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138144,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138160,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138168,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138172,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138174,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4169138175,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133278208,32,FLEN)
NAN_BOXED(3217288816,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706559,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706687,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130706943,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130707455,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130708479,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130710527,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130714623,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130722815,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130739199,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130771967,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130837503,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2130968575,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2131230719,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2131755007,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2132803583,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134900735,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2134900736,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2136997888,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133314559,32,FLEN)
NAN_BOXED(1069762722,32,FLEN)
NAN_BOXED(2138046464,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
