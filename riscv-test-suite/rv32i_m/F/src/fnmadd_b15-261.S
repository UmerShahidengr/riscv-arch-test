
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:99840*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99840*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:99843*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99843*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:99846*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99846*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:99849*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99849*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:99852*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99852*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:99855*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99855*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:99858*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99858*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b8451 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b8451; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:99861*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99861*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:99864*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99864*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:99867*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99867*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:99870*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99870*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:99873*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99873*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:99876*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99876*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:99879*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99879*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:99882*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99882*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:99885*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99885*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:99888*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99888*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:99891*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99891*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:99894*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99894*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:99897*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99897*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:99900*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99900*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:99903*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99903*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:99906*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99906*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:99909*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99909*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20800000; valaddr_reg:x3; val_offset:99912*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99912*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20800001; valaddr_reg:x3; val_offset:99915*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99915*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20800003; valaddr_reg:x3; val_offset:99918*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99918*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20800007; valaddr_reg:x3; val_offset:99921*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99921*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2080000f; valaddr_reg:x3; val_offset:99924*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99924*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2080001f; valaddr_reg:x3; val_offset:99927*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99927*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2080003f; valaddr_reg:x3; val_offset:99930*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99930*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2080007f; valaddr_reg:x3; val_offset:99933*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99933*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x208000ff; valaddr_reg:x3; val_offset:99936*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99936*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x208001ff; valaddr_reg:x3; val_offset:99939*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99939*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x208003ff; valaddr_reg:x3; val_offset:99942*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99942*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x208007ff; valaddr_reg:x3; val_offset:99945*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99945*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20800fff; valaddr_reg:x3; val_offset:99948*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99948*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20801fff; valaddr_reg:x3; val_offset:99951*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99951*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20803fff; valaddr_reg:x3; val_offset:99954*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99954*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20807fff; valaddr_reg:x3; val_offset:99957*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99957*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2080ffff; valaddr_reg:x3; val_offset:99960*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99960*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2081ffff; valaddr_reg:x3; val_offset:99963*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99963*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2083ffff; valaddr_reg:x3; val_offset:99966*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99966*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x2087ffff; valaddr_reg:x3; val_offset:99969*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99969*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x208fffff; valaddr_reg:x3; val_offset:99972*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99972*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x209fffff; valaddr_reg:x3; val_offset:99975*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99975*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20bfffff; valaddr_reg:x3; val_offset:99978*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99978*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20c00000; valaddr_reg:x3; val_offset:99981*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99981*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20e00000; valaddr_reg:x3; val_offset:99984*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99984*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20f00000; valaddr_reg:x3; val_offset:99987*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99987*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20f80000; valaddr_reg:x3; val_offset:99990*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99990*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fc0000; valaddr_reg:x3; val_offset:99993*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99993*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fe0000; valaddr_reg:x3; val_offset:99996*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99996*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ff0000; valaddr_reg:x3; val_offset:99999*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99999*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ff8000; valaddr_reg:x3; val_offset:100002*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100002*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffc000; valaddr_reg:x3; val_offset:100005*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100005*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffe000; valaddr_reg:x3; val_offset:100008*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100008*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fff000; valaddr_reg:x3; val_offset:100011*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100011*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fff800; valaddr_reg:x3; val_offset:100014*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100014*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffc00; valaddr_reg:x3; val_offset:100017*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100017*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffe00; valaddr_reg:x3; val_offset:100020*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100020*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffff00; valaddr_reg:x3; val_offset:100023*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100023*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffff80; valaddr_reg:x3; val_offset:100026*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100026*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffffc0; valaddr_reg:x3; val_offset:100029*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100029*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffffe0; valaddr_reg:x3; val_offset:100032*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100032*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffff0; valaddr_reg:x3; val_offset:100035*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100035*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffff8; valaddr_reg:x3; val_offset:100038*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100038*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffffc; valaddr_reg:x3; val_offset:100041*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100041*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20fffffe; valaddr_reg:x3; val_offset:100044*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100044*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9a07 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9a07; op2val:0x0;
op3val:0x20ffffff; valaddr_reg:x3; val_offset:100047*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100047*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc800000; valaddr_reg:x3; val_offset:100050*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100050*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc800001; valaddr_reg:x3; val_offset:100053*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100053*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc800003; valaddr_reg:x3; val_offset:100056*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100056*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc800007; valaddr_reg:x3; val_offset:100059*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100059*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc80000f; valaddr_reg:x3; val_offset:100062*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100062*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc80001f; valaddr_reg:x3; val_offset:100065*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100065*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc80003f; valaddr_reg:x3; val_offset:100068*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100068*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc80007f; valaddr_reg:x3; val_offset:100071*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100071*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc8000ff; valaddr_reg:x3; val_offset:100074*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100074*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc8001ff; valaddr_reg:x3; val_offset:100077*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100077*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc8003ff; valaddr_reg:x3; val_offset:100080*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100080*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc8007ff; valaddr_reg:x3; val_offset:100083*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100083*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc800fff; valaddr_reg:x3; val_offset:100086*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100086*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc801fff; valaddr_reg:x3; val_offset:100089*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100089*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc803fff; valaddr_reg:x3; val_offset:100092*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100092*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc807fff; valaddr_reg:x3; val_offset:100095*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100095*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc80ffff; valaddr_reg:x3; val_offset:100098*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100098*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc81ffff; valaddr_reg:x3; val_offset:100101*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100101*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc83ffff; valaddr_reg:x3; val_offset:100104*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100104*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc87ffff; valaddr_reg:x3; val_offset:100107*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100107*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc8fffff; valaddr_reg:x3; val_offset:100110*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100110*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfc9fffff; valaddr_reg:x3; val_offset:100113*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100113*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcbfffff; valaddr_reg:x3; val_offset:100116*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100116*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcc00000; valaddr_reg:x3; val_offset:100119*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100119*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfce00000; valaddr_reg:x3; val_offset:100122*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100122*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcf00000; valaddr_reg:x3; val_offset:100125*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100125*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcf80000; valaddr_reg:x3; val_offset:100128*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100128*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfc0000; valaddr_reg:x3; val_offset:100131*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100131*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfe0000; valaddr_reg:x3; val_offset:100134*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100134*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcff0000; valaddr_reg:x3; val_offset:100137*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100137*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcff8000; valaddr_reg:x3; val_offset:100140*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100140*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffc000; valaddr_reg:x3; val_offset:100143*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100143*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffe000; valaddr_reg:x3; val_offset:100146*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100146*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfff000; valaddr_reg:x3; val_offset:100149*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100149*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfff800; valaddr_reg:x3; val_offset:100152*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100152*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffc00; valaddr_reg:x3; val_offset:100155*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100155*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffe00; valaddr_reg:x3; val_offset:100158*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100158*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffff00; valaddr_reg:x3; val_offset:100161*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100161*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffff80; valaddr_reg:x3; val_offset:100164*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100164*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffffc0; valaddr_reg:x3; val_offset:100167*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100167*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffffe0; valaddr_reg:x3; val_offset:100170*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100170*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffff0; valaddr_reg:x3; val_offset:100173*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100173*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffff8; valaddr_reg:x3; val_offset:100176*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100176*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffffc; valaddr_reg:x3; val_offset:100179*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100179*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcfffffe; valaddr_reg:x3; val_offset:100182*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100182*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xfcffffff; valaddr_reg:x3; val_offset:100185*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100185*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff000001; valaddr_reg:x3; val_offset:100188*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100188*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff000003; valaddr_reg:x3; val_offset:100191*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100191*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff000007; valaddr_reg:x3; val_offset:100194*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100194*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff199999; valaddr_reg:x3; val_offset:100197*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100197*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff249249; valaddr_reg:x3; val_offset:100200*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100200*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff333333; valaddr_reg:x3; val_offset:100203*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100203*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:100206*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100206*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:100209*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100209*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff444444; valaddr_reg:x3; val_offset:100212*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100212*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:100215*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100215*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:100218*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100218*0 + 3*260*FLEN/8, x4, x1, x2)

inst_33407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff666666; valaddr_reg:x3; val_offset:100221*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100221*0 + 3*260*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2133558353,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259520,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259521,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259523,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259527,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259535,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259551,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259583,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259647,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545259775,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545260031,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545260543,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545261567,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545263615,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545267711,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545275903,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545292287,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545325055,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545390591,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545521663,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(545783807,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(546308095,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(547356671,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(549453823,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(549453824,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(551550976,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(552599552,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553123840,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553385984,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553517056,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553582592,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553615360,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553631744,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553639936,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553644032,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553646080,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553647104,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553647616,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553647872,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648000,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648064,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648096,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648112,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648120,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648124,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648126,32,FLEN)
NAN_BOXED(2133563911,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(553648127,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247040,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247041,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247043,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247047,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247055,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247071,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247103,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247167,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247295,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236247551,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236248063,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236249087,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236251135,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236255231,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236263423,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236279807,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236312575,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236378111,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236509183,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4236771327,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4237295615,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4238344191,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4240441343,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4240441344,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4242538496,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4243587072,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244111360,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244373504,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244504576,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244570112,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244602880,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244619264,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244627456,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244631552,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244633600,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244634624,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635136,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635392,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635520,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635584,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635616,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635632,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635640,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635644,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635646,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4244635647,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
