
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:100224*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100224*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:100227*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100227*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:100230*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100230*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2b9f81 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3eee16 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2b9f81; op2val:0xbfbeee16;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:100233*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100233*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:100236*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100236*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:100239*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100239*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:100242*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100242*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:100245*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100245*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:100248*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100248*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:100251*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100251*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:100254*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100254*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:100257*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100257*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:100260*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100260*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:100263*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100263*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:100266*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100266*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:100269*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100269*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:100272*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100272*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:100275*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100275*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:100278*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100278*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:100281*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100281*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:100284*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100284*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:100287*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100287*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:100290*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100290*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:100293*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100293*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:100296*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100296*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:100299*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100299*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:100302*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100302*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:100305*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100305*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:100308*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100308*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:100311*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100311*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:100314*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100314*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:100317*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100317*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:100320*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100320*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:100323*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100323*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:100326*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100326*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:100329*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100329*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:100332*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100332*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:100335*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100335*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:100338*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100338*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:100341*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100341*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:100344*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100344*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:100347*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100347*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:100350*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100350*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:100353*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100353*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:100356*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100356*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:100359*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100359*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:100362*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100362*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:100365*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100365*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:100368*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100368*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:100371*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100371*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:100374*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100374*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:100377*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100377*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:100380*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100380*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:100383*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100383*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:100386*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100386*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:100389*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100389*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:100392*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100392*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:100395*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100395*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:100398*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100398*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:100401*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100401*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:100404*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100404*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:100407*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100407*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:100410*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100410*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:100413*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100413*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:100416*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100416*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bf351 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bf351; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:100419*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100419*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8000000; valaddr_reg:x3; val_offset:100422*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100422*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8000001; valaddr_reg:x3; val_offset:100425*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100425*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8000003; valaddr_reg:x3; val_offset:100428*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100428*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8000007; valaddr_reg:x3; val_offset:100431*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100431*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa800000f; valaddr_reg:x3; val_offset:100434*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100434*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa800001f; valaddr_reg:x3; val_offset:100437*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100437*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa800003f; valaddr_reg:x3; val_offset:100440*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100440*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa800007f; valaddr_reg:x3; val_offset:100443*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100443*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa80000ff; valaddr_reg:x3; val_offset:100446*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100446*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa80001ff; valaddr_reg:x3; val_offset:100449*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100449*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa80003ff; valaddr_reg:x3; val_offset:100452*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100452*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa80007ff; valaddr_reg:x3; val_offset:100455*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100455*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8000fff; valaddr_reg:x3; val_offset:100458*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100458*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8001fff; valaddr_reg:x3; val_offset:100461*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100461*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8003fff; valaddr_reg:x3; val_offset:100464*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100464*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8007fff; valaddr_reg:x3; val_offset:100467*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100467*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa800ffff; valaddr_reg:x3; val_offset:100470*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100470*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa801ffff; valaddr_reg:x3; val_offset:100473*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100473*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa803ffff; valaddr_reg:x3; val_offset:100476*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100476*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa807ffff; valaddr_reg:x3; val_offset:100479*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100479*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa80fffff; valaddr_reg:x3; val_offset:100482*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100482*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa81fffff; valaddr_reg:x3; val_offset:100485*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100485*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa83fffff; valaddr_reg:x3; val_offset:100488*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100488*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8400000; valaddr_reg:x3; val_offset:100491*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100491*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8600000; valaddr_reg:x3; val_offset:100494*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100494*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8700000; valaddr_reg:x3; val_offset:100497*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100497*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa8780000; valaddr_reg:x3; val_offset:100500*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100500*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87c0000; valaddr_reg:x3; val_offset:100503*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100503*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87e0000; valaddr_reg:x3; val_offset:100506*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100506*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87f0000; valaddr_reg:x3; val_offset:100509*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100509*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87f8000; valaddr_reg:x3; val_offset:100512*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100512*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fc000; valaddr_reg:x3; val_offset:100515*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100515*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fe000; valaddr_reg:x3; val_offset:100518*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100518*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ff000; valaddr_reg:x3; val_offset:100521*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100521*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ff800; valaddr_reg:x3; val_offset:100524*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100524*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffc00; valaddr_reg:x3; val_offset:100527*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100527*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffe00; valaddr_reg:x3; val_offset:100530*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100530*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fff00; valaddr_reg:x3; val_offset:100533*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100533*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fff80; valaddr_reg:x3; val_offset:100536*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100536*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fffc0; valaddr_reg:x3; val_offset:100539*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100539*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fffe0; valaddr_reg:x3; val_offset:100542*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100542*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffff0; valaddr_reg:x3; val_offset:100545*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100545*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffff8; valaddr_reg:x3; val_offset:100548*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100548*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffffc; valaddr_reg:x3; val_offset:100551*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100551*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87ffffe; valaddr_reg:x3; val_offset:100554*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100554*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x50 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xa87fffff; valaddr_reg:x3; val_offset:100557*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100557*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbf800001; valaddr_reg:x3; val_offset:100560*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100560*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbf800003; valaddr_reg:x3; val_offset:100563*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100563*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbf800007; valaddr_reg:x3; val_offset:100566*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100566*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbf999999; valaddr_reg:x3; val_offset:100569*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100569*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:100572*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100572*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:100575*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100575*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:100578*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100578*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:100581*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100581*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:100584*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100584*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:100587*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100587*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:100590*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100590*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:100593*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100593*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:100596*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100596*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:100599*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100599*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:100602*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100602*0 + 3*261*FLEN/8, x4, x1, x2)

inst_33535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c23ff and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c8 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c23ff; op2val:0x802f96c8;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:100605*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100605*0 + 3*261*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133565313,32,FLEN)
NAN_BOXED(3216961046,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2133586769,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572288,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572289,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572291,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572295,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572303,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572319,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572351,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572415,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572543,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818572799,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818573311,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818574335,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818576383,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818580479,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818588671,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818605055,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818637823,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818703359,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2818834431,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2819096575,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2819620863,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2820669439,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2822766591,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2822766592,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2824863744,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2825912320,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826436608,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826698752,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826829824,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826895360,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826928128,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826944512,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826952704,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826956800,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826958848,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826959872,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960384,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960640,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960768,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960832,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960864,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960880,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960888,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960892,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960894,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(2826960895,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133599231,32,FLEN)
NAN_BOXED(2150602440,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
