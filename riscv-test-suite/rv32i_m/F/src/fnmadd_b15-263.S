
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:100608*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100608*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:100611*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100611*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:100614*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100614*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:100617*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100617*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:100620*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100620*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:100623*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100623*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:100626*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100626*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:100629*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100629*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:100632*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100632*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:100635*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100635*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:100638*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100638*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:100641*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100641*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:100644*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100644*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:100647*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100647*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:100650*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100650*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:100653*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100653*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:100656*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100656*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:100659*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100659*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:100662*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100662*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:100665*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100665*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:100668*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100668*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:100671*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100671*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:100674*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100674*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:100677*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100677*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:100680*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100680*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:100683*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100683*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:100686*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100686*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:100689*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100689*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:100692*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100692*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:100695*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100695*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:100698*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100698*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:100701*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100701*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xe00000; valaddr_reg:x3; val_offset:100704*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100704*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:100707*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100707*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:100710*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100710*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xf00000; valaddr_reg:x3; val_offset:100713*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100713*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xf80000; valaddr_reg:x3; val_offset:100716*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100716*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfc0000; valaddr_reg:x3; val_offset:100719*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100719*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfe0000; valaddr_reg:x3; val_offset:100722*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100722*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xff0000; valaddr_reg:x3; val_offset:100725*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100725*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xff8000; valaddr_reg:x3; val_offset:100728*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100728*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffc000; valaddr_reg:x3; val_offset:100731*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100731*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffe000; valaddr_reg:x3; val_offset:100734*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100734*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfff000; valaddr_reg:x3; val_offset:100737*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100737*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfff800; valaddr_reg:x3; val_offset:100740*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100740*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffc00; valaddr_reg:x3; val_offset:100743*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100743*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffe00; valaddr_reg:x3; val_offset:100746*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100746*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffff00; valaddr_reg:x3; val_offset:100749*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100749*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffff80; valaddr_reg:x3; val_offset:100752*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100752*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffffc0; valaddr_reg:x3; val_offset:100755*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100755*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffffe0; valaddr_reg:x3; val_offset:100758*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100758*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffff0; valaddr_reg:x3; val_offset:100761*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100761*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:100764*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100764*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:100767*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100767*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:100770*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100770*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c25e5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c25e5; op2val:0x0;
op3val:0xffffff; valaddr_reg:x3; val_offset:100773*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100773*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbf800001; valaddr_reg:x3; val_offset:100776*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100776*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbf800003; valaddr_reg:x3; val_offset:100779*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100779*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbf800007; valaddr_reg:x3; val_offset:100782*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100782*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbf999999; valaddr_reg:x3; val_offset:100785*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100785*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:100788*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100788*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:100791*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100791*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:100794*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100794*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:100797*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100797*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:100800*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100800*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:100803*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100803*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:100806*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100806*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:100809*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100809*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:100812*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100812*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:100815*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100815*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:100818*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100818*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:100821*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100821*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6000000; valaddr_reg:x3; val_offset:100824*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100824*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6000001; valaddr_reg:x3; val_offset:100827*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100827*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6000003; valaddr_reg:x3; val_offset:100830*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100830*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6000007; valaddr_reg:x3; val_offset:100833*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100833*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc600000f; valaddr_reg:x3; val_offset:100836*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100836*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc600001f; valaddr_reg:x3; val_offset:100839*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100839*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc600003f; valaddr_reg:x3; val_offset:100842*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100842*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc600007f; valaddr_reg:x3; val_offset:100845*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100845*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc60000ff; valaddr_reg:x3; val_offset:100848*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100848*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc60001ff; valaddr_reg:x3; val_offset:100851*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100851*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc60003ff; valaddr_reg:x3; val_offset:100854*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100854*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc60007ff; valaddr_reg:x3; val_offset:100857*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100857*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6000fff; valaddr_reg:x3; val_offset:100860*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100860*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6001fff; valaddr_reg:x3; val_offset:100863*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100863*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6003fff; valaddr_reg:x3; val_offset:100866*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100866*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6007fff; valaddr_reg:x3; val_offset:100869*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100869*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc600ffff; valaddr_reg:x3; val_offset:100872*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100872*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc601ffff; valaddr_reg:x3; val_offset:100875*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100875*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc603ffff; valaddr_reg:x3; val_offset:100878*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100878*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc607ffff; valaddr_reg:x3; val_offset:100881*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100881*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc60fffff; valaddr_reg:x3; val_offset:100884*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100884*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc61fffff; valaddr_reg:x3; val_offset:100887*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100887*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc63fffff; valaddr_reg:x3; val_offset:100890*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100890*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6400000; valaddr_reg:x3; val_offset:100893*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100893*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6600000; valaddr_reg:x3; val_offset:100896*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100896*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6700000; valaddr_reg:x3; val_offset:100899*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100899*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc6780000; valaddr_reg:x3; val_offset:100902*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100902*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67c0000; valaddr_reg:x3; val_offset:100905*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100905*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67e0000; valaddr_reg:x3; val_offset:100908*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100908*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67f0000; valaddr_reg:x3; val_offset:100911*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100911*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67f8000; valaddr_reg:x3; val_offset:100914*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100914*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fc000; valaddr_reg:x3; val_offset:100917*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100917*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fe000; valaddr_reg:x3; val_offset:100920*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100920*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ff000; valaddr_reg:x3; val_offset:100923*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100923*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ff800; valaddr_reg:x3; val_offset:100926*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100926*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffc00; valaddr_reg:x3; val_offset:100929*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100929*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffe00; valaddr_reg:x3; val_offset:100932*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100932*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fff00; valaddr_reg:x3; val_offset:100935*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100935*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fff80; valaddr_reg:x3; val_offset:100938*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100938*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fffc0; valaddr_reg:x3; val_offset:100941*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100941*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fffe0; valaddr_reg:x3; val_offset:100944*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100944*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffff0; valaddr_reg:x3; val_offset:100947*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100947*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffff8; valaddr_reg:x3; val_offset:100950*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100950*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffffc; valaddr_reg:x3; val_offset:100953*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100953*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67ffffe; valaddr_reg:x3; val_offset:100956*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100956*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2d84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f9427 and fs3 == 1 and fe3 == 0x8c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2d84; op2val:0x802f9427;
op3val:0xc67fffff; valaddr_reg:x3; val_offset:100959*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100959*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75800000; valaddr_reg:x3; val_offset:100962*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100962*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75800001; valaddr_reg:x3; val_offset:100965*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100965*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75800003; valaddr_reg:x3; val_offset:100968*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100968*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75800007; valaddr_reg:x3; val_offset:100971*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100971*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7580000f; valaddr_reg:x3; val_offset:100974*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100974*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7580001f; valaddr_reg:x3; val_offset:100977*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100977*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7580003f; valaddr_reg:x3; val_offset:100980*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100980*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7580007f; valaddr_reg:x3; val_offset:100983*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100983*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x758000ff; valaddr_reg:x3; val_offset:100986*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100986*0 + 3*262*FLEN/8, x4, x1, x2)

inst_33663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x758001ff; valaddr_reg:x3; val_offset:100989*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100989*0 + 3*262*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16744448,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16760832,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16769024,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16773120,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16775168,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776192,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776704,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776960,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777088,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777152,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777184,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777200,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2133599717,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777215,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888768,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888769,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888771,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888775,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888783,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888799,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888831,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321888895,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321889023,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321889279,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321889791,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321890815,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321892863,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321896959,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321905151,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321921535,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3321954303,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3322019839,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3322150911,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3322413055,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3322937343,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3323985919,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3326083071,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3326083072,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3328180224,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3329228800,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3329753088,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330015232,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330146304,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330211840,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330244608,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330260992,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330269184,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330273280,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330275328,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330276352,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330276864,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277120,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277248,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277312,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277344,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277360,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277368,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277372,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277374,32,FLEN)
NAN_BOXED(2133601668,32,FLEN)
NAN_BOXED(2150601767,32,FLEN)
NAN_BOXED(3330277375,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322880,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322881,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322883,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322887,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322895,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322911,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971322943,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971323007,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971323135,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971323391,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
