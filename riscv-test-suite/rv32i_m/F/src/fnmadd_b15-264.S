
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x758003ff; valaddr_reg:x3; val_offset:100992*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100992*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x758007ff; valaddr_reg:x3; val_offset:100995*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100995*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75800fff; valaddr_reg:x3; val_offset:100998*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 100998*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75801fff; valaddr_reg:x3; val_offset:101001*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101001*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75803fff; valaddr_reg:x3; val_offset:101004*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101004*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75807fff; valaddr_reg:x3; val_offset:101007*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101007*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7580ffff; valaddr_reg:x3; val_offset:101010*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101010*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7581ffff; valaddr_reg:x3; val_offset:101013*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101013*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7583ffff; valaddr_reg:x3; val_offset:101016*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101016*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7587ffff; valaddr_reg:x3; val_offset:101019*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101019*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x758fffff; valaddr_reg:x3; val_offset:101022*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101022*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x759fffff; valaddr_reg:x3; val_offset:101025*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101025*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75bfffff; valaddr_reg:x3; val_offset:101028*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101028*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75c00000; valaddr_reg:x3; val_offset:101031*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101031*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75e00000; valaddr_reg:x3; val_offset:101034*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101034*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75f00000; valaddr_reg:x3; val_offset:101037*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101037*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75f80000; valaddr_reg:x3; val_offset:101040*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101040*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fc0000; valaddr_reg:x3; val_offset:101043*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101043*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fe0000; valaddr_reg:x3; val_offset:101046*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101046*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ff0000; valaddr_reg:x3; val_offset:101049*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101049*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ff8000; valaddr_reg:x3; val_offset:101052*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101052*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffc000; valaddr_reg:x3; val_offset:101055*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101055*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffe000; valaddr_reg:x3; val_offset:101058*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101058*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fff000; valaddr_reg:x3; val_offset:101061*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101061*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fff800; valaddr_reg:x3; val_offset:101064*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101064*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffc00; valaddr_reg:x3; val_offset:101067*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101067*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffe00; valaddr_reg:x3; val_offset:101070*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101070*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffff00; valaddr_reg:x3; val_offset:101073*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101073*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffff80; valaddr_reg:x3; val_offset:101076*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101076*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffffc0; valaddr_reg:x3; val_offset:101079*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101079*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffffe0; valaddr_reg:x3; val_offset:101082*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101082*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffff0; valaddr_reg:x3; val_offset:101085*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101085*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffff8; valaddr_reg:x3; val_offset:101088*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101088*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffffc; valaddr_reg:x3; val_offset:101091*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101091*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75fffffe; valaddr_reg:x3; val_offset:101094*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101094*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x75ffffff; valaddr_reg:x3; val_offset:101097*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101097*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f000001; valaddr_reg:x3; val_offset:101100*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101100*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f000003; valaddr_reg:x3; val_offset:101103*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101103*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f000007; valaddr_reg:x3; val_offset:101106*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101106*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f199999; valaddr_reg:x3; val_offset:101109*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101109*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f249249; valaddr_reg:x3; val_offset:101112*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101112*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f333333; valaddr_reg:x3; val_offset:101115*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101115*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:101118*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101118*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:101121*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101121*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f444444; valaddr_reg:x3; val_offset:101124*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101124*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:101127*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101127*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:101130*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101130*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f666666; valaddr_reg:x3; val_offset:101133*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101133*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:101136*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101136*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:101139*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101139*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:101142*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101142*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c6607 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3e1239 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c6607; op2val:0x3fbe1239;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:101145*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101145*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3000000; valaddr_reg:x3; val_offset:101148*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101148*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3000001; valaddr_reg:x3; val_offset:101151*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101151*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3000003; valaddr_reg:x3; val_offset:101154*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101154*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3000007; valaddr_reg:x3; val_offset:101157*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101157*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa300000f; valaddr_reg:x3; val_offset:101160*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101160*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa300001f; valaddr_reg:x3; val_offset:101163*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101163*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa300003f; valaddr_reg:x3; val_offset:101166*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101166*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa300007f; valaddr_reg:x3; val_offset:101169*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101169*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa30000ff; valaddr_reg:x3; val_offset:101172*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101172*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa30001ff; valaddr_reg:x3; val_offset:101175*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101175*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa30003ff; valaddr_reg:x3; val_offset:101178*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101178*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa30007ff; valaddr_reg:x3; val_offset:101181*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101181*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3000fff; valaddr_reg:x3; val_offset:101184*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101184*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3001fff; valaddr_reg:x3; val_offset:101187*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101187*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3003fff; valaddr_reg:x3; val_offset:101190*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101190*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3007fff; valaddr_reg:x3; val_offset:101193*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101193*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa300ffff; valaddr_reg:x3; val_offset:101196*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101196*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa301ffff; valaddr_reg:x3; val_offset:101199*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101199*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa303ffff; valaddr_reg:x3; val_offset:101202*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101202*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa307ffff; valaddr_reg:x3; val_offset:101205*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101205*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa30fffff; valaddr_reg:x3; val_offset:101208*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101208*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa31fffff; valaddr_reg:x3; val_offset:101211*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101211*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa33fffff; valaddr_reg:x3; val_offset:101214*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101214*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3400000; valaddr_reg:x3; val_offset:101217*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101217*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3600000; valaddr_reg:x3; val_offset:101220*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101220*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3700000; valaddr_reg:x3; val_offset:101223*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101223*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa3780000; valaddr_reg:x3; val_offset:101226*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101226*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37c0000; valaddr_reg:x3; val_offset:101229*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101229*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37e0000; valaddr_reg:x3; val_offset:101232*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101232*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37f0000; valaddr_reg:x3; val_offset:101235*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101235*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37f8000; valaddr_reg:x3; val_offset:101238*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101238*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fc000; valaddr_reg:x3; val_offset:101241*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101241*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fe000; valaddr_reg:x3; val_offset:101244*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101244*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ff000; valaddr_reg:x3; val_offset:101247*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101247*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ff800; valaddr_reg:x3; val_offset:101250*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101250*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffc00; valaddr_reg:x3; val_offset:101253*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101253*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffe00; valaddr_reg:x3; val_offset:101256*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101256*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fff00; valaddr_reg:x3; val_offset:101259*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101259*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fff80; valaddr_reg:x3; val_offset:101262*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101262*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fffc0; valaddr_reg:x3; val_offset:101265*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101265*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fffe0; valaddr_reg:x3; val_offset:101268*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101268*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffff0; valaddr_reg:x3; val_offset:101271*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101271*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffff8; valaddr_reg:x3; val_offset:101274*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101274*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffffc; valaddr_reg:x3; val_offset:101277*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101277*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37ffffe; valaddr_reg:x3; val_offset:101280*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101280*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xa37fffff; valaddr_reg:x3; val_offset:101283*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101283*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbf800001; valaddr_reg:x3; val_offset:101286*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101286*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbf800003; valaddr_reg:x3; val_offset:101289*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101289*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbf800007; valaddr_reg:x3; val_offset:101292*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101292*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbf999999; valaddr_reg:x3; val_offset:101295*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101295*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:101298*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101298*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:101301*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101301*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:101304*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101304*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:101307*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101307*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:101310*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101310*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:101313*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101313*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:101316*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101316*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:101319*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101319*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:101322*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101322*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:101325*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101325*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:101328*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101328*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cf4c2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f5d57 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cf4c2; op2val:0x802f5d57;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:101331*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101331*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:101334*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101334*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:101337*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101337*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:101340*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101340*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:101343*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101343*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:101346*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101346*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:101349*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101349*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:101352*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101352*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:101355*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101355*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:101358*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101358*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:101361*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101361*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:101364*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101364*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:101367*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101367*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:101370*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101370*0 + 3*263*FLEN/8, x4, x1, x2)

inst_33791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d6497 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d6497; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:101373*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101373*0 + 3*263*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971323903,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971324927,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971326975,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971331071,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971339263,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971355647,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971388415,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971453951,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971585023,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1971847167,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1972371455,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1973420031,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1975517183,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1975517184,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1977614336,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1978662912,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979187200,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979449344,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979580416,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979645952,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979678720,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979695104,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979703296,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979707392,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979709440,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979710464,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979710976,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711232,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711360,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711424,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711456,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711472,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711480,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711484,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711486,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(1979711487,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133616135,32,FLEN)
NAN_BOXED(1069421113,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686208,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686209,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686211,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686215,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686223,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686239,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686271,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686335,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686463,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734686719,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734687231,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734688255,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734690303,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734694399,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734702591,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734718975,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734751743,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734817279,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2734948351,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2735210495,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2735734783,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2736783359,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2738880511,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2738880512,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2740977664,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2742026240,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2742550528,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2742812672,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2742943744,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743009280,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743042048,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743058432,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743066624,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743070720,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743072768,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743073792,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074304,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074560,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074688,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074752,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074784,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074800,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074808,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074812,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074814,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(2743074815,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133652674,32,FLEN)
NAN_BOXED(2150587735,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133681303,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
