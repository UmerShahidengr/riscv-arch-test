
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:101760*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101760*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:101763*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101763*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:101766*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101766*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:101769*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101769*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:101772*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101772*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:101775*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101775*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:101778*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101778*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:101781*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101781*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:101784*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101784*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:101787*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101787*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:101790*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101790*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:101793*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101793*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:101796*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101796*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:101799*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101799*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:101802*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101802*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:101805*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101805*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:101808*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101808*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:101811*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101811*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:101814*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101814*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:101817*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101817*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:101820*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101820*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:101823*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101823*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:101826*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101826*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:101829*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101829*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:101832*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101832*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:101835*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101835*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:101838*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101838*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:101841*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101841*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:101844*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101844*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:101847*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101847*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:101850*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101850*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:101853*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101853*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:101856*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101856*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:101859*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101859*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:101862*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101862*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:101865*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101865*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:101868*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101868*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:101871*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101871*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:101874*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101874*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:101877*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101877*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:101880*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101880*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:101883*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101883*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:101886*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101886*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2e95b7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2e95b7; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:101889*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101889*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25800000; valaddr_reg:x3; val_offset:101892*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101892*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25800001; valaddr_reg:x3; val_offset:101895*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101895*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25800003; valaddr_reg:x3; val_offset:101898*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101898*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25800007; valaddr_reg:x3; val_offset:101901*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101901*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2580000f; valaddr_reg:x3; val_offset:101904*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101904*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2580001f; valaddr_reg:x3; val_offset:101907*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101907*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2580003f; valaddr_reg:x3; val_offset:101910*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101910*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2580007f; valaddr_reg:x3; val_offset:101913*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101913*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x258000ff; valaddr_reg:x3; val_offset:101916*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101916*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x258001ff; valaddr_reg:x3; val_offset:101919*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101919*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x258003ff; valaddr_reg:x3; val_offset:101922*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101922*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x258007ff; valaddr_reg:x3; val_offset:101925*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101925*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25800fff; valaddr_reg:x3; val_offset:101928*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101928*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25801fff; valaddr_reg:x3; val_offset:101931*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101931*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25803fff; valaddr_reg:x3; val_offset:101934*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101934*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25807fff; valaddr_reg:x3; val_offset:101937*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101937*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2580ffff; valaddr_reg:x3; val_offset:101940*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101940*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2581ffff; valaddr_reg:x3; val_offset:101943*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101943*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2583ffff; valaddr_reg:x3; val_offset:101946*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101946*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x2587ffff; valaddr_reg:x3; val_offset:101949*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101949*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x258fffff; valaddr_reg:x3; val_offset:101952*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101952*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x259fffff; valaddr_reg:x3; val_offset:101955*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101955*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25bfffff; valaddr_reg:x3; val_offset:101958*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101958*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25c00000; valaddr_reg:x3; val_offset:101961*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101961*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25e00000; valaddr_reg:x3; val_offset:101964*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101964*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25f00000; valaddr_reg:x3; val_offset:101967*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101967*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25f80000; valaddr_reg:x3; val_offset:101970*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101970*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fc0000; valaddr_reg:x3; val_offset:101973*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101973*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fe0000; valaddr_reg:x3; val_offset:101976*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101976*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ff0000; valaddr_reg:x3; val_offset:101979*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101979*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ff8000; valaddr_reg:x3; val_offset:101982*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101982*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffc000; valaddr_reg:x3; val_offset:101985*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101985*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffe000; valaddr_reg:x3; val_offset:101988*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101988*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fff000; valaddr_reg:x3; val_offset:101991*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101991*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fff800; valaddr_reg:x3; val_offset:101994*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101994*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffc00; valaddr_reg:x3; val_offset:101997*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101997*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffe00; valaddr_reg:x3; val_offset:102000*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102000*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffff00; valaddr_reg:x3; val_offset:102003*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102003*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffff80; valaddr_reg:x3; val_offset:102006*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102006*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffffc0; valaddr_reg:x3; val_offset:102009*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102009*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffffe0; valaddr_reg:x3; val_offset:102012*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102012*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffff0; valaddr_reg:x3; val_offset:102015*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102015*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffff8; valaddr_reg:x3; val_offset:102018*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102018*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffffc; valaddr_reg:x3; val_offset:102021*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102021*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25fffffe; valaddr_reg:x3; val_offset:102024*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102024*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x4b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x25ffffff; valaddr_reg:x3; val_offset:102027*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102027*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3f800001; valaddr_reg:x3; val_offset:102030*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102030*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3f800003; valaddr_reg:x3; val_offset:102033*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102033*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3f800007; valaddr_reg:x3; val_offset:102036*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102036*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3f999999; valaddr_reg:x3; val_offset:102039*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102039*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:102042*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102042*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:102045*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102045*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:102048*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102048*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:102051*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102051*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:102054*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102054*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:102057*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102057*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:102060*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102060*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:102063*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102063*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:102066*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102066*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:102069*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102069*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:102072*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102072*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eac46 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2ee629 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eac46; op2val:0x2ee629;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:102075*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102075*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:102078*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102078*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:102081*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102081*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:102084*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102084*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:102087*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102087*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:102090*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102090*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:102093*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102093*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:102096*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102096*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:102099*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102099*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:102102*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102102*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:102105*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102105*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:102108*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102108*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:102111*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102111*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:102114*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102114*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:102117*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102117*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:102120*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102120*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:102123*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102123*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85000000; valaddr_reg:x3; val_offset:102126*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102126*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:102129*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102129*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:102132*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102132*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:102135*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102135*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:102138*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102138*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:102141*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102141*0 + 3*265*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2133759415,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145600,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145601,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145603,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145607,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145615,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145631,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145663,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145727,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629145855,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629146111,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629146623,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629147647,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629149695,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629153791,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629161983,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629178367,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629211135,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629276671,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629407743,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(629669887,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(630194175,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(631242751,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(633339903,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(633339904,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(635437056,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(636485632,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637009920,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637272064,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637403136,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637468672,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637501440,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637517824,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637526016,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637530112,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637532160,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637533184,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637533696,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637533952,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534080,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534144,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534176,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534192,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534200,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534204,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534206,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(637534207,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133765190,32,FLEN)
NAN_BOXED(3073577,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369728,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369729,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369731,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369735,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369743,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369759,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
