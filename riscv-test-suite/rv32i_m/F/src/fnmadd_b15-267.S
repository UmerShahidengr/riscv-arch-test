
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:102144*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102144*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:102147*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102147*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:102150*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102150*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:102153*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102153*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:102156*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102156*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:102159*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102159*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:102162*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102162*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:102165*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102165*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:102168*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102168*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:102171*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102171*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:102174*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102174*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:102177*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102177*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:102180*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102180*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:102183*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102183*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:102186*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102186*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:102189*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102189*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:102192*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102192*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:102195*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102195*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:102198*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102198*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:102201*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102201*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:102204*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102204*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:102207*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102207*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:102210*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102210*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:102213*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102213*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:102216*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102216*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:102219*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102219*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:102222*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102222*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:102225*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102225*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:102228*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102228*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:102231*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102231*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:102234*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102234*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:102237*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102237*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:102240*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102240*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:102243*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102243*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:102246*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102246*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:102249*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102249*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:102252*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102252*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:102255*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102255*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:102258*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102258*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec16a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec16a; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:102261*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102261*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9000000; valaddr_reg:x3; val_offset:102264*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102264*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9000001; valaddr_reg:x3; val_offset:102267*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102267*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9000003; valaddr_reg:x3; val_offset:102270*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102270*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9000007; valaddr_reg:x3; val_offset:102273*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102273*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe900000f; valaddr_reg:x3; val_offset:102276*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102276*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe900001f; valaddr_reg:x3; val_offset:102279*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102279*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe900003f; valaddr_reg:x3; val_offset:102282*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102282*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe900007f; valaddr_reg:x3; val_offset:102285*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102285*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe90000ff; valaddr_reg:x3; val_offset:102288*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102288*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe90001ff; valaddr_reg:x3; val_offset:102291*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102291*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe90003ff; valaddr_reg:x3; val_offset:102294*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102294*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe90007ff; valaddr_reg:x3; val_offset:102297*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102297*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9000fff; valaddr_reg:x3; val_offset:102300*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102300*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9001fff; valaddr_reg:x3; val_offset:102303*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102303*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9003fff; valaddr_reg:x3; val_offset:102306*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102306*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9007fff; valaddr_reg:x3; val_offset:102309*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102309*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe900ffff; valaddr_reg:x3; val_offset:102312*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102312*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe901ffff; valaddr_reg:x3; val_offset:102315*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102315*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe903ffff; valaddr_reg:x3; val_offset:102318*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102318*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe907ffff; valaddr_reg:x3; val_offset:102321*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102321*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe90fffff; valaddr_reg:x3; val_offset:102324*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102324*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe91fffff; valaddr_reg:x3; val_offset:102327*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102327*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe93fffff; valaddr_reg:x3; val_offset:102330*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102330*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9400000; valaddr_reg:x3; val_offset:102333*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102333*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9600000; valaddr_reg:x3; val_offset:102336*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102336*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9700000; valaddr_reg:x3; val_offset:102339*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102339*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe9780000; valaddr_reg:x3; val_offset:102342*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102342*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97c0000; valaddr_reg:x3; val_offset:102345*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102345*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97e0000; valaddr_reg:x3; val_offset:102348*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102348*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97f0000; valaddr_reg:x3; val_offset:102351*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102351*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97f8000; valaddr_reg:x3; val_offset:102354*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102354*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fc000; valaddr_reg:x3; val_offset:102357*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102357*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fe000; valaddr_reg:x3; val_offset:102360*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102360*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ff000; valaddr_reg:x3; val_offset:102363*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102363*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ff800; valaddr_reg:x3; val_offset:102366*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102366*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffc00; valaddr_reg:x3; val_offset:102369*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102369*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffe00; valaddr_reg:x3; val_offset:102372*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102372*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fff00; valaddr_reg:x3; val_offset:102375*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102375*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fff80; valaddr_reg:x3; val_offset:102378*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102378*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fffc0; valaddr_reg:x3; val_offset:102381*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102381*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fffe0; valaddr_reg:x3; val_offset:102384*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102384*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffff0; valaddr_reg:x3; val_offset:102387*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102387*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffff8; valaddr_reg:x3; val_offset:102390*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102390*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffffc; valaddr_reg:x3; val_offset:102393*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102393*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97ffffe; valaddr_reg:x3; val_offset:102396*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102396*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xe97fffff; valaddr_reg:x3; val_offset:102399*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102399*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff000001; valaddr_reg:x3; val_offset:102402*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102402*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff000003; valaddr_reg:x3; val_offset:102405*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102405*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff000007; valaddr_reg:x3; val_offset:102408*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102408*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff199999; valaddr_reg:x3; val_offset:102411*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102411*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff249249; valaddr_reg:x3; val_offset:102414*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102414*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff333333; valaddr_reg:x3; val_offset:102417*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102417*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:102420*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102420*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:102423*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102423*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff444444; valaddr_reg:x3; val_offset:102426*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102426*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:102429*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102429*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:102432*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102432*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff666666; valaddr_reg:x3; val_offset:102435*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102435*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:102438*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102438*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:102441*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102441*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:102444*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102444*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ec904 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3b79cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ec904; op2val:0xbfbb79cc;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:102447*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102447*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:102450*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102450*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:102453*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102453*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:102456*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102456*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:102459*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102459*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:102462*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102462*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:102465*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102465*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:102468*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102468*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:102471*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102471*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:102474*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102474*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:102477*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102477*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:102480*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102480*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:102483*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102483*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:102486*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102486*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:102489*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102489*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:102492*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102492*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:102495*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102495*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:102498*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102498*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:102501*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102501*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:102504*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102504*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:102507*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102507*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:102510*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102510*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:102513*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102513*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:102516*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102516*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:102519*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102519*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:102522*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102522*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2ecffe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2ecffe; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:102525*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102525*0 + 3*266*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2133770602,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091328,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091329,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091331,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091335,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091343,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091359,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091391,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091455,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091583,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909091839,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909092351,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909093375,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909095423,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909099519,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909107711,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909124095,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909156863,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909222399,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909353471,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3909615615,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3910139903,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3911188479,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3913285631,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3913285632,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3915382784,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3916431360,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3916955648,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917217792,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917348864,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917414400,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917447168,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917463552,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917471744,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917475840,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917477888,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917478912,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479424,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479680,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479808,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479872,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479904,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479920,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479928,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479932,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479934,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(3917479935,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133772548,32,FLEN)
NAN_BOXED(3216734668,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2133774334,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
