
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:104448*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104448*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:104451*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104451*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:104454*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104454*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:104457*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104457*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:104460*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104460*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:104463*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104463*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:104466*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104466*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:104469*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104469*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:104472*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104472*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:104475*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104475*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:104478*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104478*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:104481*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104481*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:104484*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104484*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:104487*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104487*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:104490*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104490*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:104493*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104493*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:104496*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104496*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:104499*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104499*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:104502*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104502*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:104505*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104505*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:104508*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104508*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:104511*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104511*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:104514*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104514*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:104517*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104517*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:104520*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104520*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:104523*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104523*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:104526*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104526*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:104529*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104529*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:104532*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104532*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:104535*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104535*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:104538*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104538*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:104541*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104541*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800000; valaddr_reg:x3; val_offset:104544*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104544*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800001; valaddr_reg:x3; val_offset:104547*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104547*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800003; valaddr_reg:x3; val_offset:104550*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104550*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800007; valaddr_reg:x3; val_offset:104553*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104553*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180000f; valaddr_reg:x3; val_offset:104556*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104556*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180001f; valaddr_reg:x3; val_offset:104559*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104559*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180003f; valaddr_reg:x3; val_offset:104562*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104562*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180007f; valaddr_reg:x3; val_offset:104565*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104565*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:104568*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104568*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:104571*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104571*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:104574*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104574*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:104577*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104577*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:104580*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104580*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:104583*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104583*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:104586*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104586*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:104589*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104589*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:104592*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104592*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:104595*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104595*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:104598*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104598*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:104601*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104601*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:104604*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104604*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:104607*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104607*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:104610*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104610*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:104613*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104613*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:104616*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104616*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:104619*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104619*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:104622*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104622*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:104625*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104625*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:104628*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104628*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:104631*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104631*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:104634*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104634*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:104637*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104637*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:104640*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104640*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:104643*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104643*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:104646*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104646*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:104649*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104649*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:104652*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104652*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:104655*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104655*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:104658*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104658*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:104661*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104661*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:104664*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104664*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:104667*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104667*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:104670*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104670*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:104673*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104673*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:104676*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104676*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:104679*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104679*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:104682*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104682*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:104685*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104685*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:104688*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104688*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:104691*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104691*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:104694*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104694*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:104697*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104697*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:104700*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104700*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:104703*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104703*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:104706*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104706*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:104709*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104709*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:104712*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104712*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:104715*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104715*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:104718*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104718*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:104721*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104721*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:104724*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104724*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:104727*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104727*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:104730*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104730*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:104733*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104733*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:104736*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104736*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:104739*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104739*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:104742*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104742*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:104745*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104745*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:104748*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104748*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:104751*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104751*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:104754*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104754*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:104757*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104757*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:104760*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104760*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:104763*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104763*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:104766*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104766*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:104769*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104769*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:104772*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104772*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:104775*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104775*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:104778*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104778*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:104781*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104781*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:104784*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104784*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:104787*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104787*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:104790*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104790*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:104793*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104793*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:104796*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104796*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:104799*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104799*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:104802*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104802*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:104805*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104805*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:104808*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104808*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:104811*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104811*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:104814*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104814*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:104817*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104817*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:104820*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104820*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:104823*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104823*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:104826*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104826*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:104829*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104829*0 + 3*272*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251625472,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251641856,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251650048,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251654144,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251656192,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657216,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657728,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251657984,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658112,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658176,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658208,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658224,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658232,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658236,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658238,32,FLEN)
NAN_BOXED(2133948307,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658239,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391296,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391297,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391299,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391303,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391311,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391327,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391359,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391423,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391551,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246391807,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246392319,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246393343,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246395391,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246399487,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246407679,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246424063,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246456831,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246522367,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246653439,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3246915583,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3247439871,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3248488447,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3250585599,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3250585600,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3252682752,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3253731328,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254255616,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254517760,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254648832,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254714368,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254747136,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254763520,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254771712,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254775808,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254777856,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254778880,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779392,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779648,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779776,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779840,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779872,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779888,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779896,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779900,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779902,32,FLEN)
NAN_BOXED(2133971681,32,FLEN)
NAN_BOXED(2150502766,32,FLEN)
NAN_BOXED(3254779903,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2133975974,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
