
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:105216*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105216*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:105219*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105219*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:105222*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105222*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:105225*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105225*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:105228*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105228*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:105231*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105231*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:105234*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105234*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:105237*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105237*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800000; valaddr_reg:x3; val_offset:105240*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105240*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800001; valaddr_reg:x3; val_offset:105243*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105243*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800003; valaddr_reg:x3; val_offset:105246*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105246*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800007; valaddr_reg:x3; val_offset:105249*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105249*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580000f; valaddr_reg:x3; val_offset:105252*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105252*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580001f; valaddr_reg:x3; val_offset:105255*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105255*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580003f; valaddr_reg:x3; val_offset:105258*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105258*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580007f; valaddr_reg:x3; val_offset:105261*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105261*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358000ff; valaddr_reg:x3; val_offset:105264*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105264*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358001ff; valaddr_reg:x3; val_offset:105267*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105267*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358003ff; valaddr_reg:x3; val_offset:105270*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105270*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358007ff; valaddr_reg:x3; val_offset:105273*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105273*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800fff; valaddr_reg:x3; val_offset:105276*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105276*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35801fff; valaddr_reg:x3; val_offset:105279*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105279*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35803fff; valaddr_reg:x3; val_offset:105282*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105282*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35807fff; valaddr_reg:x3; val_offset:105285*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105285*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580ffff; valaddr_reg:x3; val_offset:105288*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105288*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3581ffff; valaddr_reg:x3; val_offset:105291*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105291*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3583ffff; valaddr_reg:x3; val_offset:105294*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105294*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3587ffff; valaddr_reg:x3; val_offset:105297*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105297*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358fffff; valaddr_reg:x3; val_offset:105300*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105300*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x359fffff; valaddr_reg:x3; val_offset:105303*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105303*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35bfffff; valaddr_reg:x3; val_offset:105306*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105306*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35c00000; valaddr_reg:x3; val_offset:105309*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105309*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35e00000; valaddr_reg:x3; val_offset:105312*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105312*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35f00000; valaddr_reg:x3; val_offset:105315*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105315*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35f80000; valaddr_reg:x3; val_offset:105318*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105318*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fc0000; valaddr_reg:x3; val_offset:105321*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105321*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fe0000; valaddr_reg:x3; val_offset:105324*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105324*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ff0000; valaddr_reg:x3; val_offset:105327*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105327*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ff8000; valaddr_reg:x3; val_offset:105330*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105330*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffc000; valaddr_reg:x3; val_offset:105333*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105333*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffe000; valaddr_reg:x3; val_offset:105336*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105336*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fff000; valaddr_reg:x3; val_offset:105339*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105339*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fff800; valaddr_reg:x3; val_offset:105342*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105342*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffc00; valaddr_reg:x3; val_offset:105345*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105345*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffe00; valaddr_reg:x3; val_offset:105348*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105348*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffff00; valaddr_reg:x3; val_offset:105351*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105351*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffff80; valaddr_reg:x3; val_offset:105354*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105354*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffc0; valaddr_reg:x3; val_offset:105357*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105357*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffe0; valaddr_reg:x3; val_offset:105360*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105360*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffff0; valaddr_reg:x3; val_offset:105363*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105363*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffff8; valaddr_reg:x3; val_offset:105366*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105366*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffffc; valaddr_reg:x3; val_offset:105369*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105369*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffffe; valaddr_reg:x3; val_offset:105372*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105372*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffff; valaddr_reg:x3; val_offset:105375*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105375*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:105378*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105378*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:105381*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105381*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:105384*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105384*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:105387*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105387*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:105390*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105390*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:105393*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105393*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:105396*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105396*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:105399*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105399*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:105402*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105402*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:105405*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105405*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:105408*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105408*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:105411*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105411*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:105414*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105414*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:105417*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105417*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:105420*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105420*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:105423*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105423*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800000; valaddr_reg:x3; val_offset:105426*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105426*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800001; valaddr_reg:x3; val_offset:105429*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105429*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800003; valaddr_reg:x3; val_offset:105432*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105432*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800007; valaddr_reg:x3; val_offset:105435*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105435*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980000f; valaddr_reg:x3; val_offset:105438*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105438*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980001f; valaddr_reg:x3; val_offset:105441*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105441*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980003f; valaddr_reg:x3; val_offset:105444*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105444*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980007f; valaddr_reg:x3; val_offset:105447*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105447*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98000ff; valaddr_reg:x3; val_offset:105450*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105450*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98001ff; valaddr_reg:x3; val_offset:105453*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105453*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98003ff; valaddr_reg:x3; val_offset:105456*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105456*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98007ff; valaddr_reg:x3; val_offset:105459*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105459*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800fff; valaddr_reg:x3; val_offset:105462*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105462*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9801fff; valaddr_reg:x3; val_offset:105465*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105465*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9803fff; valaddr_reg:x3; val_offset:105468*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105468*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9807fff; valaddr_reg:x3; val_offset:105471*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105471*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980ffff; valaddr_reg:x3; val_offset:105474*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105474*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf981ffff; valaddr_reg:x3; val_offset:105477*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105477*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf983ffff; valaddr_reg:x3; val_offset:105480*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105480*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf987ffff; valaddr_reg:x3; val_offset:105483*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105483*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98fffff; valaddr_reg:x3; val_offset:105486*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105486*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf99fffff; valaddr_reg:x3; val_offset:105489*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105489*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9bfffff; valaddr_reg:x3; val_offset:105492*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105492*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9c00000; valaddr_reg:x3; val_offset:105495*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105495*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9e00000; valaddr_reg:x3; val_offset:105498*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105498*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9f00000; valaddr_reg:x3; val_offset:105501*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105501*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9f80000; valaddr_reg:x3; val_offset:105504*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105504*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fc0000; valaddr_reg:x3; val_offset:105507*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105507*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fe0000; valaddr_reg:x3; val_offset:105510*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105510*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ff0000; valaddr_reg:x3; val_offset:105513*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105513*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ff8000; valaddr_reg:x3; val_offset:105516*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105516*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffc000; valaddr_reg:x3; val_offset:105519*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105519*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffe000; valaddr_reg:x3; val_offset:105522*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105522*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fff000; valaddr_reg:x3; val_offset:105525*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105525*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fff800; valaddr_reg:x3; val_offset:105528*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105528*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffc00; valaddr_reg:x3; val_offset:105531*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105531*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffe00; valaddr_reg:x3; val_offset:105534*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105534*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffff00; valaddr_reg:x3; val_offset:105537*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105537*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffff80; valaddr_reg:x3; val_offset:105540*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105540*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffc0; valaddr_reg:x3; val_offset:105543*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105543*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffe0; valaddr_reg:x3; val_offset:105546*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105546*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffff0; valaddr_reg:x3; val_offset:105549*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105549*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffff8; valaddr_reg:x3; val_offset:105552*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105552*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffffc; valaddr_reg:x3; val_offset:105555*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105555*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffffe; valaddr_reg:x3; val_offset:105558*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105558*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffff; valaddr_reg:x3; val_offset:105561*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105561*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000001; valaddr_reg:x3; val_offset:105564*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105564*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000003; valaddr_reg:x3; val_offset:105567*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105567*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000007; valaddr_reg:x3; val_offset:105570*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105570*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff199999; valaddr_reg:x3; val_offset:105573*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105573*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff249249; valaddr_reg:x3; val_offset:105576*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105576*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff333333; valaddr_reg:x3; val_offset:105579*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105579*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:105582*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105582*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:105585*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105585*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff444444; valaddr_reg:x3; val_offset:105588*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105588*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:105591*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105591*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:105594*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105594*0 + 3*274*FLEN/8, x4, x1, x2)

inst_35199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff666666; valaddr_reg:x3; val_offset:105597*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105597*0 + 3*274*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2134021289,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581056,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581057,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581059,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581063,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581071,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581087,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581119,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581183,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581311,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897581567,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897582079,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897583103,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897585151,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897589247,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897597439,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897613823,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897646591,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897712127,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(897843199,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(898105343,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(898629631,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(899678207,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(901775359,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(901775360,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(903872512,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(904921088,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905445376,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905707520,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905838592,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905904128,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905936896,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905953280,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905961472,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905965568,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905967616,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905968640,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969152,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969408,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969536,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969600,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969632,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969648,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969656,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969660,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969662,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(905969663,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134031885,32,FLEN)
NAN_BOXED(3003601,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915392,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915393,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915395,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915399,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915407,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915423,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915455,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915519,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915647,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185915903,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185916415,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185917439,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185919487,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185923583,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185931775,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185948159,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4185980927,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4186046463,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4186177535,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4186439679,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4186963967,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4188012543,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4190109695,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4190109696,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4192206848,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4193255424,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4193779712,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194041856,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194172928,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194238464,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194271232,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194287616,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194295808,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194299904,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194301952,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194302976,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303488,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303744,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303872,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303936,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303968,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303984,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303992,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303996,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303998,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4194303999,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134056837,32,FLEN)
NAN_BOXED(3216437124,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
