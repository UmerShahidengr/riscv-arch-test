
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa80ffff; valaddr_reg:x3; val_offset:107520*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107520*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa81ffff; valaddr_reg:x3; val_offset:107523*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107523*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa83ffff; valaddr_reg:x3; val_offset:107526*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107526*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa87ffff; valaddr_reg:x3; val_offset:107529*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107529*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa8fffff; valaddr_reg:x3; val_offset:107532*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107532*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfa9fffff; valaddr_reg:x3; val_offset:107535*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107535*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfabfffff; valaddr_reg:x3; val_offset:107538*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107538*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfac00000; valaddr_reg:x3; val_offset:107541*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107541*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfae00000; valaddr_reg:x3; val_offset:107544*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107544*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaf00000; valaddr_reg:x3; val_offset:107547*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107547*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaf80000; valaddr_reg:x3; val_offset:107550*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107550*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafc0000; valaddr_reg:x3; val_offset:107553*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107553*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafe0000; valaddr_reg:x3; val_offset:107556*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107556*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaff0000; valaddr_reg:x3; val_offset:107559*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107559*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaff8000; valaddr_reg:x3; val_offset:107562*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107562*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffc000; valaddr_reg:x3; val_offset:107565*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107565*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffe000; valaddr_reg:x3; val_offset:107568*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107568*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafff000; valaddr_reg:x3; val_offset:107571*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107571*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafff800; valaddr_reg:x3; val_offset:107574*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107574*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffc00; valaddr_reg:x3; val_offset:107577*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107577*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffe00; valaddr_reg:x3; val_offset:107580*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107580*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffff00; valaddr_reg:x3; val_offset:107583*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107583*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffff80; valaddr_reg:x3; val_offset:107586*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107586*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffffc0; valaddr_reg:x3; val_offset:107589*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107589*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffffe0; valaddr_reg:x3; val_offset:107592*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107592*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffff0; valaddr_reg:x3; val_offset:107595*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107595*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffff8; valaddr_reg:x3; val_offset:107598*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107598*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffffc; valaddr_reg:x3; val_offset:107601*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107601*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfafffffe; valaddr_reg:x3; val_offset:107604*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107604*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xfaffffff; valaddr_reg:x3; val_offset:107607*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107607*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff000001; valaddr_reg:x3; val_offset:107610*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107610*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff000003; valaddr_reg:x3; val_offset:107613*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107613*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff000007; valaddr_reg:x3; val_offset:107616*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107616*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff199999; valaddr_reg:x3; val_offset:107619*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107619*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff249249; valaddr_reg:x3; val_offset:107622*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107622*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff333333; valaddr_reg:x3; val_offset:107625*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107625*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:107628*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107628*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:107631*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107631*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff444444; valaddr_reg:x3; val_offset:107634*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107634*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:107637*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107637*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:107640*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107640*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff666666; valaddr_reg:x3; val_offset:107643*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107643*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:107646*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107646*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:107649*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107649*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:107652*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107652*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x358805 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x34823e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f358805; op2val:0xbfb4823e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:107655*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107655*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b800000; valaddr_reg:x3; val_offset:107658*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107658*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b800001; valaddr_reg:x3; val_offset:107661*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107661*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b800003; valaddr_reg:x3; val_offset:107664*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107664*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b800007; valaddr_reg:x3; val_offset:107667*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107667*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b80000f; valaddr_reg:x3; val_offset:107670*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107670*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b80001f; valaddr_reg:x3; val_offset:107673*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107673*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b80003f; valaddr_reg:x3; val_offset:107676*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107676*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b80007f; valaddr_reg:x3; val_offset:107679*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107679*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b8000ff; valaddr_reg:x3; val_offset:107682*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107682*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b8001ff; valaddr_reg:x3; val_offset:107685*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107685*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b8003ff; valaddr_reg:x3; val_offset:107688*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107688*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b8007ff; valaddr_reg:x3; val_offset:107691*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107691*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b800fff; valaddr_reg:x3; val_offset:107694*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107694*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b801fff; valaddr_reg:x3; val_offset:107697*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107697*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b803fff; valaddr_reg:x3; val_offset:107700*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107700*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b807fff; valaddr_reg:x3; val_offset:107703*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107703*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b80ffff; valaddr_reg:x3; val_offset:107706*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107706*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b81ffff; valaddr_reg:x3; val_offset:107709*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107709*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b83ffff; valaddr_reg:x3; val_offset:107712*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107712*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b87ffff; valaddr_reg:x3; val_offset:107715*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107715*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b8fffff; valaddr_reg:x3; val_offset:107718*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107718*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2b9fffff; valaddr_reg:x3; val_offset:107721*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107721*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bbfffff; valaddr_reg:x3; val_offset:107724*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107724*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bc00000; valaddr_reg:x3; val_offset:107727*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107727*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2be00000; valaddr_reg:x3; val_offset:107730*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107730*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bf00000; valaddr_reg:x3; val_offset:107733*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107733*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bf80000; valaddr_reg:x3; val_offset:107736*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107736*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfc0000; valaddr_reg:x3; val_offset:107739*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107739*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfe0000; valaddr_reg:x3; val_offset:107742*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107742*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bff0000; valaddr_reg:x3; val_offset:107745*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107745*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bff8000; valaddr_reg:x3; val_offset:107748*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107748*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffc000; valaddr_reg:x3; val_offset:107751*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107751*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffe000; valaddr_reg:x3; val_offset:107754*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107754*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfff000; valaddr_reg:x3; val_offset:107757*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107757*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfff800; valaddr_reg:x3; val_offset:107760*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107760*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffc00; valaddr_reg:x3; val_offset:107763*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107763*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffe00; valaddr_reg:x3; val_offset:107766*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107766*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffff00; valaddr_reg:x3; val_offset:107769*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107769*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffff80; valaddr_reg:x3; val_offset:107772*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107772*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffffc0; valaddr_reg:x3; val_offset:107775*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107775*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffffe0; valaddr_reg:x3; val_offset:107778*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107778*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffff0; valaddr_reg:x3; val_offset:107781*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107781*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffff8; valaddr_reg:x3; val_offset:107784*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107784*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffffc; valaddr_reg:x3; val_offset:107787*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107787*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bfffffe; valaddr_reg:x3; val_offset:107790*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107790*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x57 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x2bffffff; valaddr_reg:x3; val_offset:107793*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107793*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:107796*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107796*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:107799*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107799*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:107802*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107802*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:107805*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107805*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:107808*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107808*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:107811*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107811*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:107814*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107814*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:107817*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107817*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:107820*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107820*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:107823*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107823*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:107826*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107826*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:107829*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107829*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:107832*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107832*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:107835*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107835*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:107838*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107838*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365899 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cecf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365899; op2val:0x2cecf1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:107841*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107841*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c800000; valaddr_reg:x3; val_offset:107844*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107844*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c800001; valaddr_reg:x3; val_offset:107847*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107847*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c800003; valaddr_reg:x3; val_offset:107850*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107850*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c800007; valaddr_reg:x3; val_offset:107853*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107853*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c80000f; valaddr_reg:x3; val_offset:107856*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107856*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c80001f; valaddr_reg:x3; val_offset:107859*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107859*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c80003f; valaddr_reg:x3; val_offset:107862*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107862*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c80007f; valaddr_reg:x3; val_offset:107865*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107865*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c8000ff; valaddr_reg:x3; val_offset:107868*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107868*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c8001ff; valaddr_reg:x3; val_offset:107871*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107871*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c8003ff; valaddr_reg:x3; val_offset:107874*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107874*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c8007ff; valaddr_reg:x3; val_offset:107877*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107877*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c800fff; valaddr_reg:x3; val_offset:107880*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107880*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c801fff; valaddr_reg:x3; val_offset:107883*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107883*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c803fff; valaddr_reg:x3; val_offset:107886*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107886*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c807fff; valaddr_reg:x3; val_offset:107889*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107889*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c80ffff; valaddr_reg:x3; val_offset:107892*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107892*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c81ffff; valaddr_reg:x3; val_offset:107895*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107895*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c83ffff; valaddr_reg:x3; val_offset:107898*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107898*0 + 3*280*FLEN/8, x4, x1, x2)

inst_35967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c87ffff; valaddr_reg:x3; val_offset:107901*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107901*0 + 3*280*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4202758143,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4202823679,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4202954751,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4203216895,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4203741183,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4204789759,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4206886911,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4206886912,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4208984064,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4210032640,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4210556928,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4210819072,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4210950144,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211015680,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211048448,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211064832,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211073024,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211077120,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211079168,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211080192,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211080704,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211080960,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081088,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081152,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081184,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081200,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081208,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081212,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081214,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4211081215,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2134214661,32,FLEN)
NAN_BOXED(3216278078,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808896,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808897,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808899,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808903,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808911,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808927,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729808959,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729809023,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729809151,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729809407,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729809919,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729810943,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729812991,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729817087,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729825279,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729841663,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729874431,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(729939967,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(730071039,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(730333183,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(730857471,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(731906047,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(734003199,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(734003200,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(736100352,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(737148928,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(737673216,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(737935360,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738066432,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738131968,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738164736,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738181120,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738189312,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738193408,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738195456,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738196480,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738196992,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197248,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197376,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197440,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197472,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197488,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197496,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197500,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197502,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(738197503,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134268057,32,FLEN)
NAN_BOXED(2944241,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021568,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021569,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021571,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021575,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021583,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021599,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021631,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021695,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015021823,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015022079,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015022591,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015023615,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015025663,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015029759,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015037951,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015054335,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015087103,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015152639,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015283711,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1015545855,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
