
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c8fffff; valaddr_reg:x3; val_offset:107904*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107904*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3c9fffff; valaddr_reg:x3; val_offset:107907*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107907*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cbfffff; valaddr_reg:x3; val_offset:107910*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107910*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cc00000; valaddr_reg:x3; val_offset:107913*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107913*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3ce00000; valaddr_reg:x3; val_offset:107916*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107916*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cf00000; valaddr_reg:x3; val_offset:107919*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107919*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cf80000; valaddr_reg:x3; val_offset:107922*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107922*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfc0000; valaddr_reg:x3; val_offset:107925*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107925*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfe0000; valaddr_reg:x3; val_offset:107928*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107928*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cff0000; valaddr_reg:x3; val_offset:107931*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107931*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cff8000; valaddr_reg:x3; val_offset:107934*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107934*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffc000; valaddr_reg:x3; val_offset:107937*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107937*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffe000; valaddr_reg:x3; val_offset:107940*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107940*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfff000; valaddr_reg:x3; val_offset:107943*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107943*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfff800; valaddr_reg:x3; val_offset:107946*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107946*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffc00; valaddr_reg:x3; val_offset:107949*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107949*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffe00; valaddr_reg:x3; val_offset:107952*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107952*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffff00; valaddr_reg:x3; val_offset:107955*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107955*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffff80; valaddr_reg:x3; val_offset:107958*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107958*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffffc0; valaddr_reg:x3; val_offset:107961*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107961*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffffe0; valaddr_reg:x3; val_offset:107964*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107964*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffff0; valaddr_reg:x3; val_offset:107967*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107967*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffff8; valaddr_reg:x3; val_offset:107970*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107970*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffffc; valaddr_reg:x3; val_offset:107973*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107973*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cfffffe; valaddr_reg:x3; val_offset:107976*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107976*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x79 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3cffffff; valaddr_reg:x3; val_offset:107979*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107979*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:107982*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107982*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:107985*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107985*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:107988*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107988*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:107991*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107991*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:107994*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107994*0 + 3*281*FLEN/8, x4, x1, x2)

inst_35999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:107997*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 107997*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:108000*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108000*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:108003*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108003*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:108006*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108006*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:108009*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108009*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:108012*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108012*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:108015*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108015*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:108018*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108018*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:108021*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108021*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:108024*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108024*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36c69e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cd1e6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36c69e; op2val:0x2cd1e6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:108027*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108027*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:108030*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108030*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:108033*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108033*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:108036*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108036*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:108039*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108039*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:108042*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108042*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:108045*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108045*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:108048*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108048*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:108051*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108051*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:108054*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108054*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:108057*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108057*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:108060*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108060*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:108063*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108063*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:108066*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108066*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:108069*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108069*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:108072*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108072*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:108075*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108075*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:108078*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108078*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:108081*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108081*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:108084*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108084*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:108087*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108087*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:108090*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108090*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:108093*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108093*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:108096*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108096*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:108099*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108099*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:108102*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108102*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:108105*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108105*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:108108*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108108*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:108111*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108111*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:108114*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108114*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:108117*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108117*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:108120*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108120*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:108123*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108123*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:108126*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108126*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:108129*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108129*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:108132*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108132*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:108135*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108135*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:108138*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108138*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:108141*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108141*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:108144*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108144*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:108147*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108147*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:108150*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108150*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:108153*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108153*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:108156*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108156*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:108159*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108159*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:108162*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108162*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:108165*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108165*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:108168*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108168*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:108171*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108171*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:108174*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108174*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:108177*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108177*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:108180*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108180*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:108183*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108183*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:108186*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108186*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:108189*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108189*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:108192*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108192*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:108195*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108195*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:108198*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108198*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:108201*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108201*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:108204*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108204*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:108207*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108207*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:108210*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108210*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4b7; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:108213*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108213*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbf800001; valaddr_reg:x3; val_offset:108216*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108216*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbf800003; valaddr_reg:x3; val_offset:108219*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108219*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbf800007; valaddr_reg:x3; val_offset:108222*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108222*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbf999999; valaddr_reg:x3; val_offset:108225*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108225*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:108228*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108228*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:108231*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108231*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:108234*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108234*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:108237*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108237*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:108240*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108240*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:108243*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108243*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:108246*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108246*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:108249*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108249*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:108252*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108252*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:108255*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108255*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:108258*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108258*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:108261*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108261*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3800000; valaddr_reg:x3; val_offset:108264*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108264*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3800001; valaddr_reg:x3; val_offset:108267*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108267*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3800003; valaddr_reg:x3; val_offset:108270*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108270*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3800007; valaddr_reg:x3; val_offset:108273*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108273*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc380000f; valaddr_reg:x3; val_offset:108276*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108276*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc380001f; valaddr_reg:x3; val_offset:108279*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108279*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc380003f; valaddr_reg:x3; val_offset:108282*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108282*0 + 3*281*FLEN/8, x4, x1, x2)

inst_36095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc380007f; valaddr_reg:x3; val_offset:108285*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108285*0 + 3*281*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1016070143,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1017118719,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1019215871,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1019215872,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1021313024,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1022361600,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1022885888,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023148032,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023279104,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023344640,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023377408,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023393792,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023401984,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023406080,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023408128,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023409152,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023409664,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023409920,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410048,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410112,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410144,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410160,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410168,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410172,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410174,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1023410175,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134296222,32,FLEN)
NAN_BOXED(2937318,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2134299831,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945728,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945729,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945731,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945735,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945743,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945759,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945791,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945855,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
