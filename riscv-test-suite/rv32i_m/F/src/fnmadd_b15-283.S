
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc38000ff; valaddr_reg:x3; val_offset:108288*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108288*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc38001ff; valaddr_reg:x3; val_offset:108291*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108291*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc38003ff; valaddr_reg:x3; val_offset:108294*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108294*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc38007ff; valaddr_reg:x3; val_offset:108297*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108297*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3800fff; valaddr_reg:x3; val_offset:108300*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108300*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3801fff; valaddr_reg:x3; val_offset:108303*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108303*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3803fff; valaddr_reg:x3; val_offset:108306*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108306*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3807fff; valaddr_reg:x3; val_offset:108309*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108309*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc380ffff; valaddr_reg:x3; val_offset:108312*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108312*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc381ffff; valaddr_reg:x3; val_offset:108315*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108315*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc383ffff; valaddr_reg:x3; val_offset:108318*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108318*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc387ffff; valaddr_reg:x3; val_offset:108321*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108321*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc38fffff; valaddr_reg:x3; val_offset:108324*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108324*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc39fffff; valaddr_reg:x3; val_offset:108327*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108327*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3bfffff; valaddr_reg:x3; val_offset:108330*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108330*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3c00000; valaddr_reg:x3; val_offset:108333*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108333*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3e00000; valaddr_reg:x3; val_offset:108336*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108336*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3f00000; valaddr_reg:x3; val_offset:108339*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108339*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3f80000; valaddr_reg:x3; val_offset:108342*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108342*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fc0000; valaddr_reg:x3; val_offset:108345*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108345*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fe0000; valaddr_reg:x3; val_offset:108348*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108348*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ff0000; valaddr_reg:x3; val_offset:108351*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108351*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ff8000; valaddr_reg:x3; val_offset:108354*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108354*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffc000; valaddr_reg:x3; val_offset:108357*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108357*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffe000; valaddr_reg:x3; val_offset:108360*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108360*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fff000; valaddr_reg:x3; val_offset:108363*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108363*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fff800; valaddr_reg:x3; val_offset:108366*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108366*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffc00; valaddr_reg:x3; val_offset:108369*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108369*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffe00; valaddr_reg:x3; val_offset:108372*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108372*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffff00; valaddr_reg:x3; val_offset:108375*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108375*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffff80; valaddr_reg:x3; val_offset:108378*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108378*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffffc0; valaddr_reg:x3; val_offset:108381*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108381*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffffe0; valaddr_reg:x3; val_offset:108384*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108384*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffff0; valaddr_reg:x3; val_offset:108387*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108387*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffff8; valaddr_reg:x3; val_offset:108390*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108390*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffffc; valaddr_reg:x3; val_offset:108393*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108393*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3fffffe; valaddr_reg:x3; val_offset:108396*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108396*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36d4ce and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2cce6c and fs3 == 1 and fe3 == 0x87 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36d4ce; op2val:0x802cce6c;
op3val:0xc3ffffff; valaddr_reg:x3; val_offset:108399*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108399*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28800000; valaddr_reg:x3; val_offset:108402*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108402*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28800001; valaddr_reg:x3; val_offset:108405*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108405*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28800003; valaddr_reg:x3; val_offset:108408*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108408*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28800007; valaddr_reg:x3; val_offset:108411*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108411*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2880000f; valaddr_reg:x3; val_offset:108414*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108414*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2880001f; valaddr_reg:x3; val_offset:108417*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108417*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2880003f; valaddr_reg:x3; val_offset:108420*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108420*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2880007f; valaddr_reg:x3; val_offset:108423*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108423*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x288000ff; valaddr_reg:x3; val_offset:108426*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108426*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x288001ff; valaddr_reg:x3; val_offset:108429*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108429*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x288003ff; valaddr_reg:x3; val_offset:108432*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108432*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x288007ff; valaddr_reg:x3; val_offset:108435*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108435*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28800fff; valaddr_reg:x3; val_offset:108438*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108438*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28801fff; valaddr_reg:x3; val_offset:108441*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108441*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28803fff; valaddr_reg:x3; val_offset:108444*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108444*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28807fff; valaddr_reg:x3; val_offset:108447*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108447*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2880ffff; valaddr_reg:x3; val_offset:108450*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108450*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2881ffff; valaddr_reg:x3; val_offset:108453*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108453*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2883ffff; valaddr_reg:x3; val_offset:108456*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108456*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x2887ffff; valaddr_reg:x3; val_offset:108459*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108459*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x288fffff; valaddr_reg:x3; val_offset:108462*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108462*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x289fffff; valaddr_reg:x3; val_offset:108465*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108465*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28bfffff; valaddr_reg:x3; val_offset:108468*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108468*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28c00000; valaddr_reg:x3; val_offset:108471*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108471*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28e00000; valaddr_reg:x3; val_offset:108474*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108474*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28f00000; valaddr_reg:x3; val_offset:108477*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108477*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28f80000; valaddr_reg:x3; val_offset:108480*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108480*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fc0000; valaddr_reg:x3; val_offset:108483*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108483*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fe0000; valaddr_reg:x3; val_offset:108486*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108486*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ff0000; valaddr_reg:x3; val_offset:108489*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108489*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ff8000; valaddr_reg:x3; val_offset:108492*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108492*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffc000; valaddr_reg:x3; val_offset:108495*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108495*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffe000; valaddr_reg:x3; val_offset:108498*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108498*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fff000; valaddr_reg:x3; val_offset:108501*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108501*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fff800; valaddr_reg:x3; val_offset:108504*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108504*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffc00; valaddr_reg:x3; val_offset:108507*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108507*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffe00; valaddr_reg:x3; val_offset:108510*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108510*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffff00; valaddr_reg:x3; val_offset:108513*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108513*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffff80; valaddr_reg:x3; val_offset:108516*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108516*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffffc0; valaddr_reg:x3; val_offset:108519*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108519*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffffe0; valaddr_reg:x3; val_offset:108522*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108522*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffff0; valaddr_reg:x3; val_offset:108525*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108525*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffff8; valaddr_reg:x3; val_offset:108528*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108528*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffffc; valaddr_reg:x3; val_offset:108531*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108531*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28fffffe; valaddr_reg:x3; val_offset:108534*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108534*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x51 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x28ffffff; valaddr_reg:x3; val_offset:108537*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108537*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3f800001; valaddr_reg:x3; val_offset:108540*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108540*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3f800003; valaddr_reg:x3; val_offset:108543*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108543*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3f800007; valaddr_reg:x3; val_offset:108546*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108546*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3f999999; valaddr_reg:x3; val_offset:108549*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108549*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:108552*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108552*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:108555*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108555*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:108558*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108558*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:108561*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108561*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:108564*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108564*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:108567*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108567*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:108570*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108570*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:108573*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108573*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:108576*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108576*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:108579*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108579*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:108582*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108582*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x374ac5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2cb195 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f374ac5; op2val:0x2cb195;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:108585*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108585*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:108588*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108588*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:108591*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108591*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:108594*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108594*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:108597*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108597*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:108600*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108600*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:108603*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108603*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:108606*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108606*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:108609*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108609*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:108612*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108612*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:108615*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108615*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:108618*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108618*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:108621*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108621*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:108624*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108624*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:108627*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108627*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:108630*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108630*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:108633*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108633*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x87000000; valaddr_reg:x3; val_offset:108636*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108636*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x87000001; valaddr_reg:x3; val_offset:108639*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108639*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x87000003; valaddr_reg:x3; val_offset:108642*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108642*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x87000007; valaddr_reg:x3; val_offset:108645*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108645*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x8700000f; valaddr_reg:x3; val_offset:108648*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108648*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x8700001f; valaddr_reg:x3; val_offset:108651*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108651*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x8700003f; valaddr_reg:x3; val_offset:108654*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108654*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x8700007f; valaddr_reg:x3; val_offset:108657*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108657*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x870000ff; valaddr_reg:x3; val_offset:108660*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108660*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x870001ff; valaddr_reg:x3; val_offset:108663*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108663*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x870003ff; valaddr_reg:x3; val_offset:108666*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108666*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37a7d6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37a7d6; op2val:0x80000000;
op3val:0x870007ff; valaddr_reg:x3; val_offset:108669*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108669*0 + 3*282*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279945983,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279946239,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279946751,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279947775,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279949823,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279953919,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279962111,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3279978495,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3280011263,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3280076799,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3280207871,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3280470015,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3280994303,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3282042879,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3284140031,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3284140032,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3286237184,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3287285760,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3287810048,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288072192,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288203264,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288268800,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288301568,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288317952,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288326144,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288330240,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288332288,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288333312,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288333824,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334080,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334208,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334272,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334304,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334320,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334328,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334332,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334334,32,FLEN)
NAN_BOXED(2134299854,32,FLEN)
NAN_BOXED(2150420076,32,FLEN)
NAN_BOXED(3288334335,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477248,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477249,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477251,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477255,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477263,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477279,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477311,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477375,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477503,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679477759,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679478271,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679479295,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679481343,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679485439,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679493631,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679510015,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679542783,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679608319,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(679739391,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(680001535,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(680525823,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(681574399,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(683671551,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(683671552,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(685768704,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(686817280,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687341568,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687603712,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687734784,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687800320,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687833088,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687849472,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687857664,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687861760,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687863808,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687864832,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865344,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865600,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865728,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865792,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865824,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865840,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865848,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865852,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865854,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(687865855,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134330053,32,FLEN)
NAN_BOXED(2929045,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924160,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924161,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924163,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924167,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924175,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924191,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924223,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924287,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924415,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924671,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264925183,32,FLEN)
NAN_BOXED(2134353878,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264926207,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
