
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:109056*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109056*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:109059*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109059*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:109062*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109062*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:109065*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109065*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:109068*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109068*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:109071*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109071*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:109074*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109074*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:109077*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109077*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:109080*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109080*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:109083*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109083*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:109086*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109086*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:109089*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109089*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:109092*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109092*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:109095*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109095*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:109098*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109098*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:109101*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109101*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:109104*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109104*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:109107*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109107*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:109110*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109110*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:109113*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109113*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:109116*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109116*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:109119*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109119*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:109122*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109122*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:109125*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109125*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:109128*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109128*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:109131*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109131*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:109134*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109134*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:109137*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109137*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:109140*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109140*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38484a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38484a; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:109143*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109143*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:109146*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109146*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:109149*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109149*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:109152*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109152*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:109155*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109155*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:109158*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109158*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:109161*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109161*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:109164*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109164*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:109167*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109167*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:109170*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109170*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:109173*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109173*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:109176*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109176*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:109179*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109179*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:109182*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109182*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:109185*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109185*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:109188*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109188*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:109191*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109191*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46800000; valaddr_reg:x3; val_offset:109194*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109194*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46800001; valaddr_reg:x3; val_offset:109197*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109197*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46800003; valaddr_reg:x3; val_offset:109200*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109200*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46800007; valaddr_reg:x3; val_offset:109203*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109203*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4680000f; valaddr_reg:x3; val_offset:109206*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109206*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4680001f; valaddr_reg:x3; val_offset:109209*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109209*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4680003f; valaddr_reg:x3; val_offset:109212*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109212*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4680007f; valaddr_reg:x3; val_offset:109215*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109215*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x468000ff; valaddr_reg:x3; val_offset:109218*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109218*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x468001ff; valaddr_reg:x3; val_offset:109221*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109221*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x468003ff; valaddr_reg:x3; val_offset:109224*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109224*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x468007ff; valaddr_reg:x3; val_offset:109227*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109227*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46800fff; valaddr_reg:x3; val_offset:109230*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109230*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46801fff; valaddr_reg:x3; val_offset:109233*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109233*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46803fff; valaddr_reg:x3; val_offset:109236*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109236*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46807fff; valaddr_reg:x3; val_offset:109239*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109239*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4680ffff; valaddr_reg:x3; val_offset:109242*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109242*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4681ffff; valaddr_reg:x3; val_offset:109245*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109245*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4683ffff; valaddr_reg:x3; val_offset:109248*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109248*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x4687ffff; valaddr_reg:x3; val_offset:109251*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109251*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x468fffff; valaddr_reg:x3; val_offset:109254*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109254*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x469fffff; valaddr_reg:x3; val_offset:109257*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109257*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46bfffff; valaddr_reg:x3; val_offset:109260*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109260*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46c00000; valaddr_reg:x3; val_offset:109263*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109263*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46e00000; valaddr_reg:x3; val_offset:109266*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109266*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46f00000; valaddr_reg:x3; val_offset:109269*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109269*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46f80000; valaddr_reg:x3; val_offset:109272*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109272*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fc0000; valaddr_reg:x3; val_offset:109275*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109275*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fe0000; valaddr_reg:x3; val_offset:109278*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109278*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ff0000; valaddr_reg:x3; val_offset:109281*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109281*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ff8000; valaddr_reg:x3; val_offset:109284*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109284*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffc000; valaddr_reg:x3; val_offset:109287*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109287*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffe000; valaddr_reg:x3; val_offset:109290*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109290*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fff000; valaddr_reg:x3; val_offset:109293*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109293*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fff800; valaddr_reg:x3; val_offset:109296*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109296*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffc00; valaddr_reg:x3; val_offset:109299*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109299*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffe00; valaddr_reg:x3; val_offset:109302*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109302*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffff00; valaddr_reg:x3; val_offset:109305*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109305*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffff80; valaddr_reg:x3; val_offset:109308*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109308*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffffc0; valaddr_reg:x3; val_offset:109311*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109311*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffffe0; valaddr_reg:x3; val_offset:109314*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109314*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffff0; valaddr_reg:x3; val_offset:109317*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109317*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffff8; valaddr_reg:x3; val_offset:109320*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109320*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffffc; valaddr_reg:x3; val_offset:109323*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109323*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46fffffe; valaddr_reg:x3; val_offset:109326*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109326*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x384cac and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c730a and fs3 == 0 and fe3 == 0x8d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f384cac; op2val:0x2c730a;
op3val:0x46ffffff; valaddr_reg:x3; val_offset:109329*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109329*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:109332*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109332*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:109335*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109335*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:109338*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109338*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:109341*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109341*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:109344*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109344*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:109347*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109347*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:109350*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109350*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:109353*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109353*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:109356*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109356*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:109359*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109359*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:109362*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109362*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:109365*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109365*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:109368*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109368*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:109371*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109371*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:109374*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109374*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:109377*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109377*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:109380*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109380*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:109383*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109383*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:109386*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109386*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:109389*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109389*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:109392*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109392*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:109395*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109395*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:109398*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109398*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:109401*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109401*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:109404*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109404*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:109407*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109407*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:109410*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109410*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:109413*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109413*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:109416*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109416*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:109419*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109419*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:109422*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109422*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:109425*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109425*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:109428*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109428*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:109431*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109431*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:109434*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109434*0 + 3*284*FLEN/8, x4, x1, x2)

inst_36479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3855ca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3855ca; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:109437*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109437*0 + 3*284*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2134394954,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793728,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793729,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793731,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793735,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793743,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793759,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793791,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793855,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182793983,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182794239,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182794751,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182795775,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182797823,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182801919,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182810111,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182826495,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182859263,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1182924799,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1183055871,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1183318015,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1183842303,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1184890879,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1186988031,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1186988032,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1189085184,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1190133760,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1190658048,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1190920192,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191051264,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191116800,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191149568,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191165952,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191174144,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191178240,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191180288,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191181312,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191181824,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182080,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182208,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182272,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182304,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182320,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182328,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182332,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182334,32,FLEN)
NAN_BOXED(2134396076,32,FLEN)
NAN_BOXED(2913034,32,FLEN)
NAN_BOXED(1191182335,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2134398410,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
