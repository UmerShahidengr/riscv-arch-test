
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3584:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:10752*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10752*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:10755*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10755*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:10758*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10758*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:10761*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10761*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:10764*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10764*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:10767*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10767*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3590:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:10770*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10770*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3591:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:10773*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10773*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3592:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:10776*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10776*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3593:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:10779*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10779*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5800000; valaddr_reg:x3; val_offset:10782*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10782*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3595:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5800001; valaddr_reg:x3; val_offset:10785*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10785*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3596:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5800003; valaddr_reg:x3; val_offset:10788*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10788*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3597:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5800007; valaddr_reg:x3; val_offset:10791*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10791*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3598:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc580000f; valaddr_reg:x3; val_offset:10794*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10794*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3599:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc580001f; valaddr_reg:x3; val_offset:10797*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10797*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3600:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc580003f; valaddr_reg:x3; val_offset:10800*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10800*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3601:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc580007f; valaddr_reg:x3; val_offset:10803*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10803*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3602:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc58000ff; valaddr_reg:x3; val_offset:10806*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10806*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3603:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc58001ff; valaddr_reg:x3; val_offset:10809*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10809*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3604:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc58003ff; valaddr_reg:x3; val_offset:10812*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10812*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc58007ff; valaddr_reg:x3; val_offset:10815*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10815*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5800fff; valaddr_reg:x3; val_offset:10818*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10818*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5801fff; valaddr_reg:x3; val_offset:10821*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10821*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5803fff; valaddr_reg:x3; val_offset:10824*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10824*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5807fff; valaddr_reg:x3; val_offset:10827*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10827*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc580ffff; valaddr_reg:x3; val_offset:10830*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10830*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc581ffff; valaddr_reg:x3; val_offset:10833*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10833*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc583ffff; valaddr_reg:x3; val_offset:10836*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10836*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc587ffff; valaddr_reg:x3; val_offset:10839*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10839*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc58fffff; valaddr_reg:x3; val_offset:10842*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10842*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc59fffff; valaddr_reg:x3; val_offset:10845*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10845*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5bfffff; valaddr_reg:x3; val_offset:10848*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10848*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5c00000; valaddr_reg:x3; val_offset:10851*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10851*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5e00000; valaddr_reg:x3; val_offset:10854*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10854*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5f00000; valaddr_reg:x3; val_offset:10857*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10857*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5f80000; valaddr_reg:x3; val_offset:10860*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10860*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fc0000; valaddr_reg:x3; val_offset:10863*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10863*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fe0000; valaddr_reg:x3; val_offset:10866*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10866*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ff0000; valaddr_reg:x3; val_offset:10869*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10869*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ff8000; valaddr_reg:x3; val_offset:10872*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10872*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffc000; valaddr_reg:x3; val_offset:10875*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10875*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffe000; valaddr_reg:x3; val_offset:10878*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10878*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fff000; valaddr_reg:x3; val_offset:10881*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10881*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fff800; valaddr_reg:x3; val_offset:10884*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10884*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffc00; valaddr_reg:x3; val_offset:10887*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10887*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffe00; valaddr_reg:x3; val_offset:10890*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10890*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffff00; valaddr_reg:x3; val_offset:10893*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10893*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffff80; valaddr_reg:x3; val_offset:10896*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10896*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffffc0; valaddr_reg:x3; val_offset:10899*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10899*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffffe0; valaddr_reg:x3; val_offset:10902*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10902*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffff0; valaddr_reg:x3; val_offset:10905*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10905*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffff8; valaddr_reg:x3; val_offset:10908*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10908*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffffc; valaddr_reg:x3; val_offset:10911*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10911*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5fffffe; valaddr_reg:x3; val_offset:10914*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10914*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2f96eb and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a9df7 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7daf96eb; op2val:0x813a9df7;
op3val:0xc5ffffff; valaddr_reg:x3; val_offset:10917*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10917*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbf800001; valaddr_reg:x3; val_offset:10920*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10920*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbf800003; valaddr_reg:x3; val_offset:10923*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10923*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbf800007; valaddr_reg:x3; val_offset:10926*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10926*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbf999999; valaddr_reg:x3; val_offset:10929*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10929*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:10932*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10932*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:10935*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10935*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:10938*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10938*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:10941*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10941*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:10944*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10944*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:10947*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10947*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:10950*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10950*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:10953*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10953*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:10956*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10956*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:10959*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10959*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:10962*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10962*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:10965*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10965*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0800000; valaddr_reg:x3; val_offset:10968*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10968*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0800001; valaddr_reg:x3; val_offset:10971*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10971*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0800003; valaddr_reg:x3; val_offset:10974*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10974*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0800007; valaddr_reg:x3; val_offset:10977*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10977*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc080000f; valaddr_reg:x3; val_offset:10980*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10980*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc080001f; valaddr_reg:x3; val_offset:10983*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10983*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc080003f; valaddr_reg:x3; val_offset:10986*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10986*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc080007f; valaddr_reg:x3; val_offset:10989*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10989*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc08000ff; valaddr_reg:x3; val_offset:10992*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10992*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc08001ff; valaddr_reg:x3; val_offset:10995*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10995*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc08003ff; valaddr_reg:x3; val_offset:10998*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10998*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc08007ff; valaddr_reg:x3; val_offset:11001*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11001*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0800fff; valaddr_reg:x3; val_offset:11004*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11004*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0801fff; valaddr_reg:x3; val_offset:11007*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11007*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0803fff; valaddr_reg:x3; val_offset:11010*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11010*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0807fff; valaddr_reg:x3; val_offset:11013*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11013*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc080ffff; valaddr_reg:x3; val_offset:11016*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11016*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc081ffff; valaddr_reg:x3; val_offset:11019*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11019*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc083ffff; valaddr_reg:x3; val_offset:11022*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11022*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc087ffff; valaddr_reg:x3; val_offset:11025*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11025*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc08fffff; valaddr_reg:x3; val_offset:11028*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11028*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc09fffff; valaddr_reg:x3; val_offset:11031*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11031*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0bfffff; valaddr_reg:x3; val_offset:11034*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11034*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0c00000; valaddr_reg:x3; val_offset:11037*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11037*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0e00000; valaddr_reg:x3; val_offset:11040*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11040*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0f00000; valaddr_reg:x3; val_offset:11043*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11043*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0f80000; valaddr_reg:x3; val_offset:11046*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11046*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fc0000; valaddr_reg:x3; val_offset:11049*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11049*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fe0000; valaddr_reg:x3; val_offset:11052*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11052*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ff0000; valaddr_reg:x3; val_offset:11055*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11055*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ff8000; valaddr_reg:x3; val_offset:11058*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11058*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffc000; valaddr_reg:x3; val_offset:11061*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11061*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffe000; valaddr_reg:x3; val_offset:11064*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11064*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fff000; valaddr_reg:x3; val_offset:11067*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11067*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fff800; valaddr_reg:x3; val_offset:11070*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11070*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffc00; valaddr_reg:x3; val_offset:11073*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11073*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffe00; valaddr_reg:x3; val_offset:11076*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11076*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffff00; valaddr_reg:x3; val_offset:11079*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11079*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffff80; valaddr_reg:x3; val_offset:11082*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11082*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffffc0; valaddr_reg:x3; val_offset:11085*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11085*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffffe0; valaddr_reg:x3; val_offset:11088*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11088*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffff0; valaddr_reg:x3; val_offset:11091*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11091*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffff8; valaddr_reg:x3; val_offset:11094*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11094*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffffc; valaddr_reg:x3; val_offset:11097*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11097*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0fffffe; valaddr_reg:x3; val_offset:11100*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11100*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3029b0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x3a027b and fs3 == 1 and fe3 == 0x81 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db029b0; op2val:0x813a027b;
op3val:0xc0ffffff; valaddr_reg:x3; val_offset:11103*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11103*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe800000; valaddr_reg:x3; val_offset:11106*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11106*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe800001; valaddr_reg:x3; val_offset:11109*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11109*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe800003; valaddr_reg:x3; val_offset:11112*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11112*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe800007; valaddr_reg:x3; val_offset:11115*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11115*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe80000f; valaddr_reg:x3; val_offset:11118*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11118*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe80001f; valaddr_reg:x3; val_offset:11121*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11121*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe80003f; valaddr_reg:x3; val_offset:11124*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11124*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe80007f; valaddr_reg:x3; val_offset:11127*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11127*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe8000ff; valaddr_reg:x3; val_offset:11130*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11130*0 + 3*28*FLEN/8, x4, x1, x2)

inst_3711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe8001ff; valaddr_reg:x3; val_offset:11133*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11133*0 + 3*28*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500160,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500161,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500163,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500167,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500175,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500191,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500223,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500287,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500415,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313500671,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313501183,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313502207,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313504255,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313508351,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313516543,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313532927,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313565695,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313631231,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3313762303,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3314024447,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3314548735,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3315597311,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3317694463,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3317694464,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3319791616,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3320840192,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321364480,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321626624,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321757696,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321823232,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321856000,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321872384,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321880576,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321884672,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321886720,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321887744,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888256,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888512,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888640,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888704,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888736,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888752,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888760,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888764,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888766,32,FLEN)
NAN_BOXED(2108659435,32,FLEN)
NAN_BOXED(2168102391,32,FLEN)
NAN_BOXED(3321888767,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614080,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614081,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614083,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614087,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614095,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614111,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614143,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614207,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614335,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229614591,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229615103,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229616127,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229618175,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229622271,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229630463,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229646847,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229679615,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229745151,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3229876223,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3230138367,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3230662655,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3231711231,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3233808383,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3233808384,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3235905536,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3236954112,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237478400,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237740544,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237871616,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237937152,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237969920,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237986304,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237994496,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3237998592,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238000640,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238001664,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002176,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002432,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002560,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002624,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002656,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002672,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002680,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002684,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002686,32,FLEN)
NAN_BOXED(2108697008,32,FLEN)
NAN_BOXED(2168062587,32,FLEN)
NAN_BOXED(3238002687,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801472,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801473,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801475,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801479,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801487,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801503,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801535,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801599,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801727,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269801983,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
