
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6c83ffff; valaddr_reg:x3; val_offset:113664*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113664*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6c87ffff; valaddr_reg:x3; val_offset:113667*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113667*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6c8fffff; valaddr_reg:x3; val_offset:113670*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113670*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6c9fffff; valaddr_reg:x3; val_offset:113673*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113673*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cbfffff; valaddr_reg:x3; val_offset:113676*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113676*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cc00000; valaddr_reg:x3; val_offset:113679*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113679*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6ce00000; valaddr_reg:x3; val_offset:113682*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113682*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cf00000; valaddr_reg:x3; val_offset:113685*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113685*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cf80000; valaddr_reg:x3; val_offset:113688*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113688*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfc0000; valaddr_reg:x3; val_offset:113691*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113691*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfe0000; valaddr_reg:x3; val_offset:113694*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113694*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cff0000; valaddr_reg:x3; val_offset:113697*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113697*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cff8000; valaddr_reg:x3; val_offset:113700*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113700*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffc000; valaddr_reg:x3; val_offset:113703*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113703*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffe000; valaddr_reg:x3; val_offset:113706*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113706*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfff000; valaddr_reg:x3; val_offset:113709*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113709*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfff800; valaddr_reg:x3; val_offset:113712*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113712*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffc00; valaddr_reg:x3; val_offset:113715*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113715*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffe00; valaddr_reg:x3; val_offset:113718*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113718*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffff00; valaddr_reg:x3; val_offset:113721*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113721*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffff80; valaddr_reg:x3; val_offset:113724*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113724*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffffc0; valaddr_reg:x3; val_offset:113727*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113727*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffffe0; valaddr_reg:x3; val_offset:113730*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113730*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffff0; valaddr_reg:x3; val_offset:113733*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113733*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffff8; valaddr_reg:x3; val_offset:113736*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113736*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffffc; valaddr_reg:x3; val_offset:113739*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113739*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cfffffe; valaddr_reg:x3; val_offset:113742*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113742*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x6cffffff; valaddr_reg:x3; val_offset:113745*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113745*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f000001; valaddr_reg:x3; val_offset:113748*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113748*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f000003; valaddr_reg:x3; val_offset:113751*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113751*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f000007; valaddr_reg:x3; val_offset:113754*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113754*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f199999; valaddr_reg:x3; val_offset:113757*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113757*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f249249; valaddr_reg:x3; val_offset:113760*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113760*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f333333; valaddr_reg:x3; val_offset:113763*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113763*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:113766*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113766*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:113769*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113769*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f444444; valaddr_reg:x3; val_offset:113772*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113772*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:113775*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113775*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:113778*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113778*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f666666; valaddr_reg:x3; val_offset:113781*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113781*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:113784*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113784*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:113787*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113787*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:113790*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113790*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d81e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ce94f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d81e9; op2val:0x3face94f;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:113793*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113793*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f000000; valaddr_reg:x3; val_offset:113796*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113796*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f000001; valaddr_reg:x3; val_offset:113799*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113799*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f000003; valaddr_reg:x3; val_offset:113802*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113802*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f000007; valaddr_reg:x3; val_offset:113805*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113805*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f00000f; valaddr_reg:x3; val_offset:113808*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113808*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f00001f; valaddr_reg:x3; val_offset:113811*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113811*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f00003f; valaddr_reg:x3; val_offset:113814*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113814*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f00007f; valaddr_reg:x3; val_offset:113817*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113817*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f0000ff; valaddr_reg:x3; val_offset:113820*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113820*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f0001ff; valaddr_reg:x3; val_offset:113823*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113823*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f0003ff; valaddr_reg:x3; val_offset:113826*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113826*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f0007ff; valaddr_reg:x3; val_offset:113829*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113829*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f000fff; valaddr_reg:x3; val_offset:113832*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113832*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f001fff; valaddr_reg:x3; val_offset:113835*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113835*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f003fff; valaddr_reg:x3; val_offset:113838*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113838*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f007fff; valaddr_reg:x3; val_offset:113841*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113841*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f00ffff; valaddr_reg:x3; val_offset:113844*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113844*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f01ffff; valaddr_reg:x3; val_offset:113847*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113847*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f03ffff; valaddr_reg:x3; val_offset:113850*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113850*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f07ffff; valaddr_reg:x3; val_offset:113853*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113853*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f0fffff; valaddr_reg:x3; val_offset:113856*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113856*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f1fffff; valaddr_reg:x3; val_offset:113859*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113859*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f3fffff; valaddr_reg:x3; val_offset:113862*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113862*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f400000; valaddr_reg:x3; val_offset:113865*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113865*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f600000; valaddr_reg:x3; val_offset:113868*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113868*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f700000; valaddr_reg:x3; val_offset:113871*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113871*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f780000; valaddr_reg:x3; val_offset:113874*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113874*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7c0000; valaddr_reg:x3; val_offset:113877*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113877*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7e0000; valaddr_reg:x3; val_offset:113880*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113880*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7f0000; valaddr_reg:x3; val_offset:113883*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113883*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7f8000; valaddr_reg:x3; val_offset:113886*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113886*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fc000; valaddr_reg:x3; val_offset:113889*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113889*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fe000; valaddr_reg:x3; val_offset:113892*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113892*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ff000; valaddr_reg:x3; val_offset:113895*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113895*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ff800; valaddr_reg:x3; val_offset:113898*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113898*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffc00; valaddr_reg:x3; val_offset:113901*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113901*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffe00; valaddr_reg:x3; val_offset:113904*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113904*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fff00; valaddr_reg:x3; val_offset:113907*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113907*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fff80; valaddr_reg:x3; val_offset:113910*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113910*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fffc0; valaddr_reg:x3; val_offset:113913*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113913*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fffe0; valaddr_reg:x3; val_offset:113916*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113916*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffff0; valaddr_reg:x3; val_offset:113919*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113919*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffff8; valaddr_reg:x3; val_offset:113922*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113922*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffffc; valaddr_reg:x3; val_offset:113925*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113925*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7ffffe; valaddr_reg:x3; val_offset:113928*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113928*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xde and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x6f7fffff; valaddr_reg:x3; val_offset:113931*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113931*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f000001; valaddr_reg:x3; val_offset:113934*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113934*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f000003; valaddr_reg:x3; val_offset:113937*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113937*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f000007; valaddr_reg:x3; val_offset:113940*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113940*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f199999; valaddr_reg:x3; val_offset:113943*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113943*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f249249; valaddr_reg:x3; val_offset:113946*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113946*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f333333; valaddr_reg:x3; val_offset:113949*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113949*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:113952*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113952*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:113955*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113955*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f444444; valaddr_reg:x3; val_offset:113958*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113958*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:113961*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113961*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:113964*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113964*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f666666; valaddr_reg:x3; val_offset:113967*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113967*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:113970*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113970*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:113973*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113973*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:113976*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113976*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d9e1a and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2ccf9a and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d9e1a; op2val:0x3faccf9a;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:113979*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113979*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf000000; valaddr_reg:x3; val_offset:113982*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113982*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf000001; valaddr_reg:x3; val_offset:113985*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113985*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf000003; valaddr_reg:x3; val_offset:113988*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113988*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf000007; valaddr_reg:x3; val_offset:113991*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113991*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf00000f; valaddr_reg:x3; val_offset:113994*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113994*0 + 3*296*FLEN/8, x4, x1, x2)

inst_37999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf00001f; valaddr_reg:x3; val_offset:113997*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 113997*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf00003f; valaddr_reg:x3; val_offset:114000*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114000*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf00007f; valaddr_reg:x3; val_offset:114003*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114003*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf0000ff; valaddr_reg:x3; val_offset:114006*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114006*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf0001ff; valaddr_reg:x3; val_offset:114009*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114009*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf0003ff; valaddr_reg:x3; val_offset:114012*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114012*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf0007ff; valaddr_reg:x3; val_offset:114015*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114015*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf000fff; valaddr_reg:x3; val_offset:114018*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114018*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf001fff; valaddr_reg:x3; val_offset:114021*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114021*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf003fff; valaddr_reg:x3; val_offset:114024*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114024*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf007fff; valaddr_reg:x3; val_offset:114027*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114027*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf00ffff; valaddr_reg:x3; val_offset:114030*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114030*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf01ffff; valaddr_reg:x3; val_offset:114033*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114033*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf03ffff; valaddr_reg:x3; val_offset:114036*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114036*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf07ffff; valaddr_reg:x3; val_offset:114039*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114039*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf0fffff; valaddr_reg:x3; val_offset:114042*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114042*0 + 3*296*FLEN/8, x4, x1, x2)

inst_38015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3e5119 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2b0b44 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3e5119; op2val:0x802b0b44;
op3val:0xbf1fffff; valaddr_reg:x3; val_offset:114045*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114045*0 + 3*296*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1820590079,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1820852223,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1821376511,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1822425087,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1824522239,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1824522240,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1826619392,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1827667968,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828192256,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828454400,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828585472,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828651008,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828683776,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828700160,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828708352,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828712448,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828714496,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828715520,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716032,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716288,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716416,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716480,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716512,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716528,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716536,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716540,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716542,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(1828716543,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134737385,32,FLEN)
NAN_BOXED(1068296527,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862270976,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862270977,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862270979,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862270983,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862270991,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271007,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271039,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271103,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271231,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271487,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862271999,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862273023,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862275071,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862279167,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862287359,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862303743,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862336511,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862402047,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862533119,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1862795263,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1863319551,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1864368127,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1866465279,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1866465280,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1868562432,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1869611008,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870135296,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870397440,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870528512,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870594048,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870626816,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870643200,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870651392,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870655488,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870657536,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870658560,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659072,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659328,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659456,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659520,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659552,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659568,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659576,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659580,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659582,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(1870659583,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134744602,32,FLEN)
NAN_BOXED(1068289946,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448256,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448257,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448259,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448263,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448271,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448287,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448319,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448383,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448511,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204448767,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204449279,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204450303,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204452351,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204456447,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204464639,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204481023,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204513791,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204579327,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204710399,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3204972543,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3205496831,32,FLEN)
NAN_BOXED(2134790425,32,FLEN)
NAN_BOXED(2150304580,32,FLEN)
NAN_BOXED(3206545407,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
