
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe8003ff; valaddr_reg:x3; val_offset:11136*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11136*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe8007ff; valaddr_reg:x3; val_offset:11139*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11139*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe800fff; valaddr_reg:x3; val_offset:11142*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11142*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe801fff; valaddr_reg:x3; val_offset:11145*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11145*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe803fff; valaddr_reg:x3; val_offset:11148*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11148*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe807fff; valaddr_reg:x3; val_offset:11151*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11151*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe80ffff; valaddr_reg:x3; val_offset:11154*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11154*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe81ffff; valaddr_reg:x3; val_offset:11157*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11157*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe83ffff; valaddr_reg:x3; val_offset:11160*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11160*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe87ffff; valaddr_reg:x3; val_offset:11163*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11163*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe8fffff; valaddr_reg:x3; val_offset:11166*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11166*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfe9fffff; valaddr_reg:x3; val_offset:11169*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11169*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfebfffff; valaddr_reg:x3; val_offset:11172*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11172*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfec00000; valaddr_reg:x3; val_offset:11175*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11175*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfee00000; valaddr_reg:x3; val_offset:11178*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11178*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfef00000; valaddr_reg:x3; val_offset:11181*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11181*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfef80000; valaddr_reg:x3; val_offset:11184*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11184*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefc0000; valaddr_reg:x3; val_offset:11187*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11187*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefe0000; valaddr_reg:x3; val_offset:11190*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11190*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeff0000; valaddr_reg:x3; val_offset:11193*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11193*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeff8000; valaddr_reg:x3; val_offset:11196*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11196*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffc000; valaddr_reg:x3; val_offset:11199*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11199*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffe000; valaddr_reg:x3; val_offset:11202*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11202*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefff000; valaddr_reg:x3; val_offset:11205*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11205*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefff800; valaddr_reg:x3; val_offset:11208*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11208*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffc00; valaddr_reg:x3; val_offset:11211*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11211*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffe00; valaddr_reg:x3; val_offset:11214*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11214*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffff00; valaddr_reg:x3; val_offset:11217*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11217*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffff80; valaddr_reg:x3; val_offset:11220*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11220*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffffc0; valaddr_reg:x3; val_offset:11223*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11223*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffffe0; valaddr_reg:x3; val_offset:11226*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11226*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffff0; valaddr_reg:x3; val_offset:11229*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11229*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffff8; valaddr_reg:x3; val_offset:11232*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11232*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffffc; valaddr_reg:x3; val_offset:11235*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11235*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfefffffe; valaddr_reg:x3; val_offset:11238*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11238*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xfeffffff; valaddr_reg:x3; val_offset:11241*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11241*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff000001; valaddr_reg:x3; val_offset:11244*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11244*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff000003; valaddr_reg:x3; val_offset:11247*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11247*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff000007; valaddr_reg:x3; val_offset:11250*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11250*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff199999; valaddr_reg:x3; val_offset:11253*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11253*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff249249; valaddr_reg:x3; val_offset:11256*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11256*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff333333; valaddr_reg:x3; val_offset:11259*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11259*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:11262*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11262*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:11265*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11265*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff444444; valaddr_reg:x3; val_offset:11268*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11268*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:11271*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11271*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:11274*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11274*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff666666; valaddr_reg:x3; val_offset:11277*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11277*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:11280*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11280*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:11283*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11283*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:11286*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11286*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x31ecf1 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x382aba and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db1ecf1; op2val:0xc1382aba;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:11289*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11289*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:11292*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11292*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:11295*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11295*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:11298*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11298*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:11301*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11301*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:11304*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11304*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:11307*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11307*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:11310*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11310*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:11313*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11313*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:11316*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11316*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:11319*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11319*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:11322*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11322*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:11325*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11325*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:11328*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11328*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:11331*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11331*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:11334*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11334*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:11337*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11337*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:11340*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11340*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:11343*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11343*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:11346*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11346*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:11349*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11349*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:11352*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11352*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:11355*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11355*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:11358*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11358*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:11361*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11361*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:11364*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11364*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:11367*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11367*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:11370*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11370*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:11373*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11373*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:11376*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11376*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:11379*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11379*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:11382*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11382*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:11385*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11385*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:11388*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11388*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:11391*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11391*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:11394*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11394*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:11397*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11397*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:11400*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11400*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:11403*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11403*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:11406*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11406*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:11409*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11409*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xe00000; valaddr_reg:x3; val_offset:11412*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11412*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xf00000; valaddr_reg:x3; val_offset:11415*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11415*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xf80000; valaddr_reg:x3; val_offset:11418*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11418*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfc0000; valaddr_reg:x3; val_offset:11421*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11421*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfe0000; valaddr_reg:x3; val_offset:11424*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11424*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xff0000; valaddr_reg:x3; val_offset:11427*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11427*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xff8000; valaddr_reg:x3; val_offset:11430*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11430*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffc000; valaddr_reg:x3; val_offset:11433*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11433*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffe000; valaddr_reg:x3; val_offset:11436*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11436*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfff000; valaddr_reg:x3; val_offset:11439*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11439*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfff800; valaddr_reg:x3; val_offset:11442*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11442*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffc00; valaddr_reg:x3; val_offset:11445*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11445*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffe00; valaddr_reg:x3; val_offset:11448*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11448*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffff00; valaddr_reg:x3; val_offset:11451*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11451*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffff80; valaddr_reg:x3; val_offset:11454*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11454*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffffc0; valaddr_reg:x3; val_offset:11457*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11457*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffffe0; valaddr_reg:x3; val_offset:11460*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11460*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffff0; valaddr_reg:x3; val_offset:11463*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11463*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:11466*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11466*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:11469*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11469*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:11472*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11472*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x351f84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db51f84; op2val:0x0;
op3val:0xffffff; valaddr_reg:x3; val_offset:11475*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11475*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3000000; valaddr_reg:x3; val_offset:11478*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11478*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3000001; valaddr_reg:x3; val_offset:11481*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11481*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3000003; valaddr_reg:x3; val_offset:11484*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11484*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3000007; valaddr_reg:x3; val_offset:11487*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11487*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x300000f; valaddr_reg:x3; val_offset:11490*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11490*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x300001f; valaddr_reg:x3; val_offset:11493*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11493*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x300003f; valaddr_reg:x3; val_offset:11496*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11496*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x300007f; valaddr_reg:x3; val_offset:11499*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11499*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x30000ff; valaddr_reg:x3; val_offset:11502*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11502*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x30001ff; valaddr_reg:x3; val_offset:11505*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11505*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x30003ff; valaddr_reg:x3; val_offset:11508*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11508*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x30007ff; valaddr_reg:x3; val_offset:11511*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11511*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3000fff; valaddr_reg:x3; val_offset:11514*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11514*0 + 3*29*FLEN/8, x4, x1, x2)

inst_3839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x355b9c and fs2 == 0 and fe2 == 0x82 and fm2 == 0x34ae72 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db55b9c; op2val:0x4134ae72;
op3val:0x3001fff; valaddr_reg:x3; val_offset:11517*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11517*0 + 3*29*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269802495,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269803519,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269805567,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269809663,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269817855,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269834239,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269867007,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4269932543,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4270063615,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4270325759,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4270850047,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4271898623,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4273995775,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4273995776,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4276092928,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4277141504,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4277665792,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4277927936,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278059008,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278124544,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278157312,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278173696,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278181888,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278185984,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278188032,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278189056,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278189568,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278189824,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278189952,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190016,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190048,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190064,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190072,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190076,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190078,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190079,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2108812529,32,FLEN)
NAN_BOXED(3241683642,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14680064,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15728640,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16252928,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16515072,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16646144,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16711680,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16744448,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16760832,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16769024,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16773120,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16775168,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776192,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776704,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16776960,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777088,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777152,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777184,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777200,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2109022084,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777215,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331648,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331649,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331651,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331655,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331663,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331679,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331711,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331775,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50331903,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50332159,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50332671,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50333695,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50335743,32,FLEN)
NAN_BOXED(2109037468,32,FLEN)
NAN_BOXED(1093971570,32,FLEN)
NAN_BOXED(50339839,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
