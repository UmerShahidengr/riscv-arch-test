
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4096:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e800fff; valaddr_reg:x3; val_offset:12288*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12288*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4097:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e801fff; valaddr_reg:x3; val_offset:12291*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12291*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4098:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e803fff; valaddr_reg:x3; val_offset:12294*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12294*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4099:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e807fff; valaddr_reg:x3; val_offset:12297*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12297*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e80ffff; valaddr_reg:x3; val_offset:12300*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12300*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e81ffff; valaddr_reg:x3; val_offset:12303*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12303*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e83ffff; valaddr_reg:x3; val_offset:12306*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12306*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e87ffff; valaddr_reg:x3; val_offset:12309*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12309*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e8fffff; valaddr_reg:x3; val_offset:12312*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12312*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4e9fffff; valaddr_reg:x3; val_offset:12315*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12315*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4106:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4ebfffff; valaddr_reg:x3; val_offset:12318*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12318*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4107:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4ec00000; valaddr_reg:x3; val_offset:12321*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12321*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4ee00000; valaddr_reg:x3; val_offset:12324*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12324*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4109:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4ef00000; valaddr_reg:x3; val_offset:12327*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12327*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4ef80000; valaddr_reg:x3; val_offset:12330*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12330*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efc0000; valaddr_reg:x3; val_offset:12333*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12333*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efe0000; valaddr_reg:x3; val_offset:12336*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12336*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4eff0000; valaddr_reg:x3; val_offset:12339*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12339*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4eff8000; valaddr_reg:x3; val_offset:12342*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12342*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effc000; valaddr_reg:x3; val_offset:12345*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12345*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effe000; valaddr_reg:x3; val_offset:12348*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12348*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efff000; valaddr_reg:x3; val_offset:12351*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12351*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efff800; valaddr_reg:x3; val_offset:12354*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12354*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffc00; valaddr_reg:x3; val_offset:12357*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12357*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffe00; valaddr_reg:x3; val_offset:12360*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12360*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effff00; valaddr_reg:x3; val_offset:12363*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12363*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effff80; valaddr_reg:x3; val_offset:12366*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12366*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effffc0; valaddr_reg:x3; val_offset:12369*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12369*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effffe0; valaddr_reg:x3; val_offset:12372*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12372*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffff0; valaddr_reg:x3; val_offset:12375*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12375*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffff8; valaddr_reg:x3; val_offset:12378*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12378*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffffc; valaddr_reg:x3; val_offset:12381*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12381*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4efffffe; valaddr_reg:x3; val_offset:12384*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12384*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x410cb0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x29bd20 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc10cb0; op2val:0x129bd20;
op3val:0x4effffff; valaddr_reg:x3; val_offset:12387*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12387*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a000000; valaddr_reg:x3; val_offset:12390*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12390*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a000001; valaddr_reg:x3; val_offset:12393*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12393*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a000003; valaddr_reg:x3; val_offset:12396*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12396*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a000007; valaddr_reg:x3; val_offset:12399*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12399*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a00000f; valaddr_reg:x3; val_offset:12402*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12402*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a00001f; valaddr_reg:x3; val_offset:12405*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12405*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a00003f; valaddr_reg:x3; val_offset:12408*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12408*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a00007f; valaddr_reg:x3; val_offset:12411*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12411*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a0000ff; valaddr_reg:x3; val_offset:12414*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12414*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a0001ff; valaddr_reg:x3; val_offset:12417*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12417*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a0003ff; valaddr_reg:x3; val_offset:12420*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12420*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a0007ff; valaddr_reg:x3; val_offset:12423*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12423*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a000fff; valaddr_reg:x3; val_offset:12426*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12426*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a001fff; valaddr_reg:x3; val_offset:12429*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12429*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a003fff; valaddr_reg:x3; val_offset:12432*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12432*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a007fff; valaddr_reg:x3; val_offset:12435*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12435*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a00ffff; valaddr_reg:x3; val_offset:12438*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12438*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a01ffff; valaddr_reg:x3; val_offset:12441*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12441*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a03ffff; valaddr_reg:x3; val_offset:12444*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12444*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a07ffff; valaddr_reg:x3; val_offset:12447*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12447*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a0fffff; valaddr_reg:x3; val_offset:12450*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12450*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a1fffff; valaddr_reg:x3; val_offset:12453*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12453*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a3fffff; valaddr_reg:x3; val_offset:12456*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12456*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a400000; valaddr_reg:x3; val_offset:12459*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12459*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a600000; valaddr_reg:x3; val_offset:12462*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12462*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a700000; valaddr_reg:x3; val_offset:12465*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12465*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a780000; valaddr_reg:x3; val_offset:12468*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12468*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7c0000; valaddr_reg:x3; val_offset:12471*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12471*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7e0000; valaddr_reg:x3; val_offset:12474*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12474*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7f0000; valaddr_reg:x3; val_offset:12477*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12477*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7f8000; valaddr_reg:x3; val_offset:12480*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12480*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fc000; valaddr_reg:x3; val_offset:12483*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12483*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fe000; valaddr_reg:x3; val_offset:12486*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12486*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ff000; valaddr_reg:x3; val_offset:12489*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12489*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ff800; valaddr_reg:x3; val_offset:12492*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12492*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffc00; valaddr_reg:x3; val_offset:12495*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12495*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffe00; valaddr_reg:x3; val_offset:12498*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12498*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fff00; valaddr_reg:x3; val_offset:12501*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12501*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fff80; valaddr_reg:x3; val_offset:12504*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12504*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fffc0; valaddr_reg:x3; val_offset:12507*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12507*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fffe0; valaddr_reg:x3; val_offset:12510*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12510*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffff0; valaddr_reg:x3; val_offset:12513*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12513*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffff8; valaddr_reg:x3; val_offset:12516*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12516*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffffc; valaddr_reg:x3; val_offset:12519*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12519*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7ffffe; valaddr_reg:x3; val_offset:12522*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12522*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x2a7fffff; valaddr_reg:x3; val_offset:12525*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12525*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3f800001; valaddr_reg:x3; val_offset:12528*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12528*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3f800003; valaddr_reg:x3; val_offset:12531*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12531*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3f800007; valaddr_reg:x3; val_offset:12534*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12534*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3f999999; valaddr_reg:x3; val_offset:12537*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12537*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:12540*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12540*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:12543*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12543*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:12546*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12546*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:12549*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12549*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:12552*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12552*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:12555*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12555*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:12558*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12558*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:12561*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12561*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:12564*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12564*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:12567*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12567*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:12570*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12570*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4686f0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x250e37 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc686f0; op2val:0x1250e37;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:12573*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12573*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0800000; valaddr_reg:x3; val_offset:12576*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12576*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0800001; valaddr_reg:x3; val_offset:12579*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12579*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0800003; valaddr_reg:x3; val_offset:12582*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12582*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0800007; valaddr_reg:x3; val_offset:12585*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12585*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa080000f; valaddr_reg:x3; val_offset:12588*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12588*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa080001f; valaddr_reg:x3; val_offset:12591*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12591*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa080003f; valaddr_reg:x3; val_offset:12594*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12594*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa080007f; valaddr_reg:x3; val_offset:12597*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12597*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa08000ff; valaddr_reg:x3; val_offset:12600*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12600*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa08001ff; valaddr_reg:x3; val_offset:12603*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12603*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa08003ff; valaddr_reg:x3; val_offset:12606*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12606*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa08007ff; valaddr_reg:x3; val_offset:12609*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12609*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0800fff; valaddr_reg:x3; val_offset:12612*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12612*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0801fff; valaddr_reg:x3; val_offset:12615*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12615*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0803fff; valaddr_reg:x3; val_offset:12618*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12618*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0807fff; valaddr_reg:x3; val_offset:12621*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12621*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa080ffff; valaddr_reg:x3; val_offset:12624*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12624*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa081ffff; valaddr_reg:x3; val_offset:12627*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12627*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa083ffff; valaddr_reg:x3; val_offset:12630*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12630*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa087ffff; valaddr_reg:x3; val_offset:12633*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12633*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa08fffff; valaddr_reg:x3; val_offset:12636*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12636*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa09fffff; valaddr_reg:x3; val_offset:12639*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12639*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0bfffff; valaddr_reg:x3; val_offset:12642*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12642*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0c00000; valaddr_reg:x3; val_offset:12645*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12645*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0e00000; valaddr_reg:x3; val_offset:12648*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12648*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0f00000; valaddr_reg:x3; val_offset:12651*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12651*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0f80000; valaddr_reg:x3; val_offset:12654*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12654*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fc0000; valaddr_reg:x3; val_offset:12657*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12657*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fe0000; valaddr_reg:x3; val_offset:12660*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12660*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ff0000; valaddr_reg:x3; val_offset:12663*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12663*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ff8000; valaddr_reg:x3; val_offset:12666*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12666*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffc000; valaddr_reg:x3; val_offset:12669*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12669*0 + 3*32*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317015551,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317019647,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317027839,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317044223,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317076991,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317142527,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317273599,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1317535743,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1318060031,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1319108607,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1321205759,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1321205760,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1323302912,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1324351488,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1324875776,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325137920,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325268992,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325334528,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325367296,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325383680,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325391872,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325395968,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325398016,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325399040,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325399552,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325399808,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325399936,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400000,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400032,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400048,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400056,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400060,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400062,32,FLEN)
NAN_BOXED(2109803696,32,FLEN)
NAN_BOXED(19512608,32,FLEN)
NAN_BOXED(1325400063,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643072,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643073,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643075,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643079,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643087,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643103,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643135,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643199,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643327,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704643583,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704644095,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704645119,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704647167,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704651263,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704659455,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704675839,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704708607,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704774143,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(704905215,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(705167359,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(705691647,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(706740223,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(708837375,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(708837376,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(710934528,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(711983104,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(712507392,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(712769536,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(712900608,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(712966144,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(712998912,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713015296,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713023488,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713027584,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713029632,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713030656,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031168,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031424,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031552,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031616,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031648,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031664,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031672,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031676,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031678,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(713031679,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2110162672,32,FLEN)
NAN_BOXED(19205687,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743168,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743169,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743171,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743175,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743183,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743199,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743231,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743295,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743423,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692743679,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692744191,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692745215,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692747263,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692751359,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692759551,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692775935,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692808703,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2692874239,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2693005311,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2693267455,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2693791743,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2694840319,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2696937471,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2696937472,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2699034624,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2700083200,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2700607488,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2700869632,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701000704,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701066240,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701099008,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701115392,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
