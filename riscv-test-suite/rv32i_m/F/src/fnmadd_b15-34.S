
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffe000; valaddr_reg:x3; val_offset:12672*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12672*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fff000; valaddr_reg:x3; val_offset:12675*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12675*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fff800; valaddr_reg:x3; val_offset:12678*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12678*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffc00; valaddr_reg:x3; val_offset:12681*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12681*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffe00; valaddr_reg:x3; val_offset:12684*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12684*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffff00; valaddr_reg:x3; val_offset:12687*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12687*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffff80; valaddr_reg:x3; val_offset:12690*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12690*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffffc0; valaddr_reg:x3; val_offset:12693*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12693*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffffe0; valaddr_reg:x3; val_offset:12696*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12696*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffff0; valaddr_reg:x3; val_offset:12699*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12699*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffff8; valaddr_reg:x3; val_offset:12702*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12702*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffffc; valaddr_reg:x3; val_offset:12705*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12705*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0fffffe; valaddr_reg:x3; val_offset:12708*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12708*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x41 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xa0ffffff; valaddr_reg:x3; val_offset:12711*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12711*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:12714*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12714*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:12717*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12717*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:12720*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12720*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:12723*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12723*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:12726*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12726*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:12729*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12729*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:12732*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12732*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:12735*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12735*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:12738*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12738*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:12741*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12741*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:12744*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12744*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:12747*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12747*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4250:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:12750*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12750*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4251:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:12753*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12753*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4252:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:12756*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12756*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4253:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4847e0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x239c3d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc847e0; op2val:0x81239c3d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:12759*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12759*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4254:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5800000; valaddr_reg:x3; val_offset:12762*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12762*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4255:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5800001; valaddr_reg:x3; val_offset:12765*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12765*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4256:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5800003; valaddr_reg:x3; val_offset:12768*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12768*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4257:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5800007; valaddr_reg:x3; val_offset:12771*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12771*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4258:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb580000f; valaddr_reg:x3; val_offset:12774*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12774*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4259:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb580001f; valaddr_reg:x3; val_offset:12777*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12777*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb580003f; valaddr_reg:x3; val_offset:12780*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12780*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb580007f; valaddr_reg:x3; val_offset:12783*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12783*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb58000ff; valaddr_reg:x3; val_offset:12786*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12786*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb58001ff; valaddr_reg:x3; val_offset:12789*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12789*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb58003ff; valaddr_reg:x3; val_offset:12792*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12792*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb58007ff; valaddr_reg:x3; val_offset:12795*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12795*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4266:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5800fff; valaddr_reg:x3; val_offset:12798*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12798*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4267:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5801fff; valaddr_reg:x3; val_offset:12801*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12801*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4268:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5803fff; valaddr_reg:x3; val_offset:12804*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12804*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4269:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5807fff; valaddr_reg:x3; val_offset:12807*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12807*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4270:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb580ffff; valaddr_reg:x3; val_offset:12810*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12810*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb581ffff; valaddr_reg:x3; val_offset:12813*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12813*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4272:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb583ffff; valaddr_reg:x3; val_offset:12816*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12816*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4273:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb587ffff; valaddr_reg:x3; val_offset:12819*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12819*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4274:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb58fffff; valaddr_reg:x3; val_offset:12822*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12822*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb59fffff; valaddr_reg:x3; val_offset:12825*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12825*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5bfffff; valaddr_reg:x3; val_offset:12828*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12828*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5c00000; valaddr_reg:x3; val_offset:12831*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12831*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5e00000; valaddr_reg:x3; val_offset:12834*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12834*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5f00000; valaddr_reg:x3; val_offset:12837*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12837*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4280:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5f80000; valaddr_reg:x3; val_offset:12840*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12840*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4281:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fc0000; valaddr_reg:x3; val_offset:12843*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12843*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4282:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fe0000; valaddr_reg:x3; val_offset:12846*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12846*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4283:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ff0000; valaddr_reg:x3; val_offset:12849*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12849*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4284:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ff8000; valaddr_reg:x3; val_offset:12852*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12852*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4285:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffc000; valaddr_reg:x3; val_offset:12855*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12855*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffe000; valaddr_reg:x3; val_offset:12858*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12858*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fff000; valaddr_reg:x3; val_offset:12861*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12861*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fff800; valaddr_reg:x3; val_offset:12864*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12864*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffc00; valaddr_reg:x3; val_offset:12867*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12867*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffe00; valaddr_reg:x3; val_offset:12870*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12870*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4291:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffff00; valaddr_reg:x3; val_offset:12873*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12873*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4292:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffff80; valaddr_reg:x3; val_offset:12876*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12876*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4293:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffffc0; valaddr_reg:x3; val_offset:12879*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12879*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4294:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffffe0; valaddr_reg:x3; val_offset:12882*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12882*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4295:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffff0; valaddr_reg:x3; val_offset:12885*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12885*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4296:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffff8; valaddr_reg:x3; val_offset:12888*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12888*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4297:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffffc; valaddr_reg:x3; val_offset:12891*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12891*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4298:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5fffffe; valaddr_reg:x3; val_offset:12894*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12894*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4299:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xb5ffffff; valaddr_reg:x3; val_offset:12897*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12897*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4300:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbf800001; valaddr_reg:x3; val_offset:12900*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12900*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4301:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbf800003; valaddr_reg:x3; val_offset:12903*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12903*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4302:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbf800007; valaddr_reg:x3; val_offset:12906*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12906*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4303:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbf999999; valaddr_reg:x3; val_offset:12909*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12909*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4304:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:12912*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12912*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4305:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:12915*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12915*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4306:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:12918*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12918*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4307:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:12921*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12921*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4308:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:12924*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12924*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4309:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:12927*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12927*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4310:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:12930*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12930*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4311:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:12933*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12933*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4312:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:12936*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12936*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4313:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:12939*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12939*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4314:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:12942*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12942*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4315:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4c506a and fs2 == 1 and fe2 == 0x02 and fm2 == 0x206168 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcc506a; op2val:0x81206168;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:12945*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12945*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4316:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:12948*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12948*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4317:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:12951*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12951*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4318:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:12954*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12954*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4319:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:12957*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12957*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4320:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:12960*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12960*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4321:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:12963*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12963*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4322:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:12966*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12966*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4323:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:12969*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12969*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4324:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:12972*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12972*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4325:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:12975*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12975*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4326:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:12978*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12978*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4327:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:12981*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12981*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4328:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:12984*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12984*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4329:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:12987*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12987*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4330:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:12990*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12990*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4331:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:12993*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12993*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4332:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:12996*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12996*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4333:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:12999*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12999*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4334:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:13002*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13002*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:13005*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13005*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:13008*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13008*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:13011*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13011*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:13014*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13014*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:13017*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13017*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4340:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:13020*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13020*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4341:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:13023*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13023*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4342:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:13026*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13026*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4343:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:13029*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13029*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4344:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:13032*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13032*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4345:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:13035*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13035*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4346:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:13038*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13038*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4347:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:13041*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13041*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4348:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:13044*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13044*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4349:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:13047*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13047*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:13050*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13050*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e622b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce622b; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:13053*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13053*0 + 3*33*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701123584,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701127680,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701129728,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701130752,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131264,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131520,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131648,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131712,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131744,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131760,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131768,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131772,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131774,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(2701131775,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2110277600,32,FLEN)
NAN_BOXED(2166594621,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064704,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064705,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064707,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064711,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064719,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064735,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064767,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064831,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045064959,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045065215,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045065727,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045066751,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045068799,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045072895,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045081087,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045097471,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045130239,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045195775,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045326847,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3045588991,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3046113279,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3047161855,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3049259007,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3049259008,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3051356160,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3052404736,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3052929024,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053191168,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053322240,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053387776,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053420544,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053436928,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053445120,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053449216,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053451264,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053452288,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053452800,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453056,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453184,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453248,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453280,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453296,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453304,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453308,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453310,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3053453311,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2110541930,32,FLEN)
NAN_BOXED(2166382952,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2110677547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
