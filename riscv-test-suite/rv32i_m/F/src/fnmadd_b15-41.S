
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80ffff; valaddr_reg:x3; val_offset:15360*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15360*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f81ffff; valaddr_reg:x3; val_offset:15363*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15363*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f83ffff; valaddr_reg:x3; val_offset:15366*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15366*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f87ffff; valaddr_reg:x3; val_offset:15369*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15369*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8fffff; valaddr_reg:x3; val_offset:15372*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15372*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f9fffff; valaddr_reg:x3; val_offset:15375*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15375*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fbfffff; valaddr_reg:x3; val_offset:15378*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15378*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fc00000; valaddr_reg:x3; val_offset:15381*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15381*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fe00000; valaddr_reg:x3; val_offset:15384*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15384*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ff00000; valaddr_reg:x3; val_offset:15387*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15387*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ff80000; valaddr_reg:x3; val_offset:15390*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15390*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffc0000; valaddr_reg:x3; val_offset:15393*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15393*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffe0000; valaddr_reg:x3; val_offset:15396*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15396*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fff0000; valaddr_reg:x3; val_offset:15399*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15399*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fff8000; valaddr_reg:x3; val_offset:15402*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15402*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffc000; valaddr_reg:x3; val_offset:15405*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15405*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffe000; valaddr_reg:x3; val_offset:15408*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15408*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffff000; valaddr_reg:x3; val_offset:15411*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15411*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffff800; valaddr_reg:x3; val_offset:15414*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15414*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffc00; valaddr_reg:x3; val_offset:15417*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15417*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffe00; valaddr_reg:x3; val_offset:15420*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15420*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffff00; valaddr_reg:x3; val_offset:15423*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15423*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffff80; valaddr_reg:x3; val_offset:15426*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15426*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffc0; valaddr_reg:x3; val_offset:15429*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15429*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffe0; valaddr_reg:x3; val_offset:15432*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15432*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffff0; valaddr_reg:x3; val_offset:15435*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15435*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffff8; valaddr_reg:x3; val_offset:15438*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15438*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffffc; valaddr_reg:x3; val_offset:15441*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15441*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffffe; valaddr_reg:x3; val_offset:15444*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15444*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffff; valaddr_reg:x3; val_offset:15447*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15447*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15450*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15450*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15453*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15453*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15456*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15456*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15459*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15459*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15462*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15462*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15465*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15465*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15468*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15468*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15471*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15471*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15474*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15474*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15477*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15477*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15480*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15480*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15483*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15483*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15486*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15486*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15489*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15489*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15492*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15492*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15495*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15495*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15498*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15498*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15501*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15501*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15504*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15504*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15507*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15507*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15510*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15510*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15513*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15513*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15516*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15516*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15519*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15519*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15522*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15522*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15525*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15525*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15528*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15528*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15531*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15531*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15534*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15534*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15537*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15537*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15540*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15540*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15543*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15543*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800000; valaddr_reg:x3; val_offset:15546*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15546*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800001; valaddr_reg:x3; val_offset:15549*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15549*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800003; valaddr_reg:x3; val_offset:15552*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15552*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800007; valaddr_reg:x3; val_offset:15555*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15555*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80000f; valaddr_reg:x3; val_offset:15558*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15558*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80001f; valaddr_reg:x3; val_offset:15561*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15561*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80003f; valaddr_reg:x3; val_offset:15564*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15564*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80007f; valaddr_reg:x3; val_offset:15567*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15567*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8000ff; valaddr_reg:x3; val_offset:15570*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15570*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8001ff; valaddr_reg:x3; val_offset:15573*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15573*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8003ff; valaddr_reg:x3; val_offset:15576*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15576*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8007ff; valaddr_reg:x3; val_offset:15579*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15579*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800fff; valaddr_reg:x3; val_offset:15582*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15582*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd801fff; valaddr_reg:x3; val_offset:15585*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15585*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd803fff; valaddr_reg:x3; val_offset:15588*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15588*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd807fff; valaddr_reg:x3; val_offset:15591*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15591*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80ffff; valaddr_reg:x3; val_offset:15594*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15594*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd81ffff; valaddr_reg:x3; val_offset:15597*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15597*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd83ffff; valaddr_reg:x3; val_offset:15600*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15600*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd87ffff; valaddr_reg:x3; val_offset:15603*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15603*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8fffff; valaddr_reg:x3; val_offset:15606*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15606*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd9fffff; valaddr_reg:x3; val_offset:15609*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15609*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdbfffff; valaddr_reg:x3; val_offset:15612*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15612*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdc00000; valaddr_reg:x3; val_offset:15615*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15615*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcde00000; valaddr_reg:x3; val_offset:15618*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15618*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdf00000; valaddr_reg:x3; val_offset:15621*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15621*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdf80000; valaddr_reg:x3; val_offset:15624*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15624*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfc0000; valaddr_reg:x3; val_offset:15627*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15627*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfe0000; valaddr_reg:x3; val_offset:15630*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15630*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdff0000; valaddr_reg:x3; val_offset:15633*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15633*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdff8000; valaddr_reg:x3; val_offset:15636*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15636*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffc000; valaddr_reg:x3; val_offset:15639*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15639*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffe000; valaddr_reg:x3; val_offset:15642*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15642*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfff000; valaddr_reg:x3; val_offset:15645*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15645*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfff800; valaddr_reg:x3; val_offset:15648*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15648*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffc00; valaddr_reg:x3; val_offset:15651*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15651*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffe00; valaddr_reg:x3; val_offset:15654*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15654*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffff00; valaddr_reg:x3; val_offset:15657*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15657*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffff80; valaddr_reg:x3; val_offset:15660*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15660*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffc0; valaddr_reg:x3; val_offset:15663*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15663*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffe0; valaddr_reg:x3; val_offset:15666*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15666*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffff0; valaddr_reg:x3; val_offset:15669*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15669*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffff8; valaddr_reg:x3; val_offset:15672*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15672*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffffc; valaddr_reg:x3; val_offset:15675*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15675*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffffe; valaddr_reg:x3; val_offset:15678*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15678*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffff; valaddr_reg:x3; val_offset:15681*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15681*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000000; valaddr_reg:x3; val_offset:15684*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15684*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000001; valaddr_reg:x3; val_offset:15687*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15687*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000003; valaddr_reg:x3; val_offset:15690*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15690*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000007; valaddr_reg:x3; val_offset:15693*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15693*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400000f; valaddr_reg:x3; val_offset:15696*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15696*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400001f; valaddr_reg:x3; val_offset:15699*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15699*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400003f; valaddr_reg:x3; val_offset:15702*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15702*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400007f; valaddr_reg:x3; val_offset:15705*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15705*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40000ff; valaddr_reg:x3; val_offset:15708*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15708*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40001ff; valaddr_reg:x3; val_offset:15711*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15711*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40003ff; valaddr_reg:x3; val_offset:15714*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15714*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40007ff; valaddr_reg:x3; val_offset:15717*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15717*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000fff; valaddr_reg:x3; val_offset:15720*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15720*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4001fff; valaddr_reg:x3; val_offset:15723*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15723*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4003fff; valaddr_reg:x3; val_offset:15726*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15726*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4007fff; valaddr_reg:x3; val_offset:15729*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15729*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400ffff; valaddr_reg:x3; val_offset:15732*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15732*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe401ffff; valaddr_reg:x3; val_offset:15735*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15735*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe403ffff; valaddr_reg:x3; val_offset:15738*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15738*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe407ffff; valaddr_reg:x3; val_offset:15741*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15741*0 + 3*40*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2676031487,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2676097023,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2676228095,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2676490239,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2677014527,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2678063103,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2680160255,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2680160256,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2682257408,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2683305984,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2683830272,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684092416,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684223488,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684289024,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684321792,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684338176,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684346368,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684350464,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684352512,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684353536,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354048,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354304,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354432,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354496,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354528,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354544,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354552,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354556,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354558,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(2684354559,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2113077676,32,FLEN)
NAN_BOXED(2164709399,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717888,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717889,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717891,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717895,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717903,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717919,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447717951,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447718015,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447718143,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447718399,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447718911,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447719935,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447721983,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447726079,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447734271,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447750655,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447783423,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447848959,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3447980031,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3448242175,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3448766463,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3449815039,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3451912191,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3451912192,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3454009344,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3455057920,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3455582208,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3455844352,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3455975424,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456040960,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456073728,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456090112,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456098304,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456102400,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456104448,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456105472,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456105984,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106240,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106368,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106432,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106464,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106480,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106488,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106492,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106494,32,FLEN)
NAN_BOXED(2113151902,32,FLEN)
NAN_BOXED(2164668402,32,FLEN)
NAN_BOXED(3456106495,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205248,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205249,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205251,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205255,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205263,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205279,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205311,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205375,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205503,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825205759,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825206271,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825207295,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825209343,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825213439,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825221631,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825238015,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825270783,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825336319,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825467391,32,FLEN)
NAN_BOXED(2113421920,32,FLEN)
NAN_BOXED(3238264243,32,FLEN)
NAN_BOXED(3825729535,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
