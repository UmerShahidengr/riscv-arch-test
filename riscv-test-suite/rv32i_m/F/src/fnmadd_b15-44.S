
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5504:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37e0000; valaddr_reg:x3; val_offset:16512*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16512*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37f0000; valaddr_reg:x3; val_offset:16515*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16515*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37f8000; valaddr_reg:x3; val_offset:16518*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16518*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fc000; valaddr_reg:x3; val_offset:16521*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16521*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fe000; valaddr_reg:x3; val_offset:16524*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16524*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ff000; valaddr_reg:x3; val_offset:16527*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16527*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ff800; valaddr_reg:x3; val_offset:16530*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16530*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5511:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffc00; valaddr_reg:x3; val_offset:16533*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16533*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5512:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffe00; valaddr_reg:x3; val_offset:16536*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16536*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5513:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fff00; valaddr_reg:x3; val_offset:16539*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16539*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5514:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fff80; valaddr_reg:x3; val_offset:16542*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16542*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5515:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fffc0; valaddr_reg:x3; val_offset:16545*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16545*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5516:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fffe0; valaddr_reg:x3; val_offset:16548*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16548*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5517:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffff0; valaddr_reg:x3; val_offset:16551*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16551*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5518:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffff8; valaddr_reg:x3; val_offset:16554*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16554*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5519:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffffc; valaddr_reg:x3; val_offset:16557*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16557*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5520:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37ffffe; valaddr_reg:x3; val_offset:16560*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16560*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5521:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xe37fffff; valaddr_reg:x3; val_offset:16563*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16563*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5522:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff000001; valaddr_reg:x3; val_offset:16566*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16566*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5523:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff000003; valaddr_reg:x3; val_offset:16569*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16569*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5524:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff000007; valaddr_reg:x3; val_offset:16572*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16572*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5525:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff199999; valaddr_reg:x3; val_offset:16575*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16575*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff249249; valaddr_reg:x3; val_offset:16578*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16578*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff333333; valaddr_reg:x3; val_offset:16581*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16581*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5528:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:16584*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16584*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5529:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:16587*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16587*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5530:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff444444; valaddr_reg:x3; val_offset:16590*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16590*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5531:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:16593*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16593*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5532:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:16596*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16596*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5533:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff666666; valaddr_reg:x3; val_offset:16599*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16599*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5534:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:16602*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16602*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5535:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:16605*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16605*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5536:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:16608*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16608*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5537:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7c1dfb and fs2 == 1 and fe2 == 0x82 and fm2 == 0x01f8a9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfc1dfb; op2val:0xc101f8a9;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:16611*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16611*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5538:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:16614*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16614*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5539:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:16617*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16617*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5540:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:16620*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16620*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5541:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:16623*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16623*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5542:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:16626*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16626*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5543:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:16629*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16629*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5544:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:16632*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16632*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5545:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:16635*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16635*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5546:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:16638*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16638*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5547:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:16641*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16641*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5548:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:16644*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16644*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5549:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:16647*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16647*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5550:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:16650*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16650*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5551:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:16653*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16653*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5552:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:16656*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16656*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5553:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:16659*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16659*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5554:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:16662*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16662*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5555:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:16665*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16665*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5556:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:16668*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16668*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5557:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:16671*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16671*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5558:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:16674*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16674*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5559:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:16677*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16677*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5560:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:16680*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16680*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5561:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:16683*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16683*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5562:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:16686*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16686*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5563:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:16689*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16689*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5564:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:16692*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16692*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5565:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:16695*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16695*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:16698*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16698*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:16701*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16701*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:16704*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16704*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:16707*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16707*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:16710*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16710*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:16713*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16713*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:16716*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16716*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:16719*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16719*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:16722*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16722*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5575:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:16725*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16725*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5576:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:16728*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16728*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5577:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:16731*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16731*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5578:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:16734*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16734*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5579:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:16737*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16737*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5580:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:16740*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16740*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5581:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:16743*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16743*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5582:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:16746*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16746*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5583:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:16749*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16749*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5584:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:16752*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16752*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:16755*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16755*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:16758*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16758*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:16761*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16761*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:16764*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16764*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:16767*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16767*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5590:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:16770*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16770*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5591:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:16773*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16773*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5592:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:16776*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16776*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5593:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:16779*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16779*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:16782*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16782*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5595:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:16785*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16785*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5596:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:16788*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16788*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5597:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:16791*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16791*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5598:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:16794*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16794*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5599:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d0ffe and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd0ffe; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:16797*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16797*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5600:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:16800*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16800*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5601:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:16803*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16803*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5602:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:16806*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16806*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5603:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:16809*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16809*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5604:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:16812*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16812*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:16815*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16815*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:16818*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16818*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:16821*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16821*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:16824*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16824*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:16827*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16827*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:16830*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16830*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:16833*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16833*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:16836*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16836*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:16839*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16839*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:16842*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16842*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:16845*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16845*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:16848*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16848*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:16851*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16851*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:16854*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16854*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:16857*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16857*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:16860*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16860*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:16863*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16863*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:16866*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16866*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:16869*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16869*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:16872*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16872*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:16875*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16875*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:16878*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16878*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:16881*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16881*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:16884*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16884*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:16887*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16887*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:16890*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16890*0 + 3*43*FLEN/8, x4, x1, x2)

inst_5631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7d2144 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dfd2144; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:16893*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16893*0 + 3*43*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816685568,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816751104,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816783872,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816800256,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816808448,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816812544,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816814592,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816815616,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816128,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816384,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816512,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816576,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816608,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816624,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816632,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816636,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816638,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(3816816639,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2113674747,32,FLEN)
NAN_BOXED(3238131881,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2113736702,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2113741124,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
