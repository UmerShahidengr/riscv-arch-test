
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67ffe00; valaddr_reg:x3; val_offset:17280*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17280*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67fff00; valaddr_reg:x3; val_offset:17283*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17283*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67fff80; valaddr_reg:x3; val_offset:17286*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17286*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67fffc0; valaddr_reg:x3; val_offset:17289*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17289*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67fffe0; valaddr_reg:x3; val_offset:17292*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17292*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67ffff0; valaddr_reg:x3; val_offset:17295*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17295*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67ffff8; valaddr_reg:x3; val_offset:17298*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17298*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67ffffc; valaddr_reg:x3; val_offset:17301*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17301*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67ffffe; valaddr_reg:x3; val_offset:17304*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17304*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x6c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xb67fffff; valaddr_reg:x3; val_offset:17307*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17307*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbf800001; valaddr_reg:x3; val_offset:17310*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17310*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbf800003; valaddr_reg:x3; val_offset:17313*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17313*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbf800007; valaddr_reg:x3; val_offset:17316*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17316*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbf999999; valaddr_reg:x3; val_offset:17319*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17319*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:17322*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17322*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:17325*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17325*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:17328*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17328*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:17331*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17331*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:17334*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17334*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:17337*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17337*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:17340*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17340*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:17343*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17343*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:17346*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17346*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:17349*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17349*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:17352*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17352*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7fd320 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x001673 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dffd320; op2val:0x81001673;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:17355*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17355*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b800000; valaddr_reg:x3; val_offset:17358*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17358*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b800001; valaddr_reg:x3; val_offset:17361*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17361*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b800003; valaddr_reg:x3; val_offset:17364*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17364*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b800007; valaddr_reg:x3; val_offset:17367*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17367*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b80000f; valaddr_reg:x3; val_offset:17370*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17370*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b80001f; valaddr_reg:x3; val_offset:17373*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17373*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b80003f; valaddr_reg:x3; val_offset:17376*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17376*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b80007f; valaddr_reg:x3; val_offset:17379*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17379*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b8000ff; valaddr_reg:x3; val_offset:17382*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17382*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b8001ff; valaddr_reg:x3; val_offset:17385*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17385*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b8003ff; valaddr_reg:x3; val_offset:17388*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17388*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b8007ff; valaddr_reg:x3; val_offset:17391*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17391*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b800fff; valaddr_reg:x3; val_offset:17394*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17394*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b801fff; valaddr_reg:x3; val_offset:17397*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17397*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b803fff; valaddr_reg:x3; val_offset:17400*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17400*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b807fff; valaddr_reg:x3; val_offset:17403*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17403*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b80ffff; valaddr_reg:x3; val_offset:17406*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17406*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b81ffff; valaddr_reg:x3; val_offset:17409*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17409*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b83ffff; valaddr_reg:x3; val_offset:17412*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17412*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b87ffff; valaddr_reg:x3; val_offset:17415*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17415*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b8fffff; valaddr_reg:x3; val_offset:17418*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17418*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3b9fffff; valaddr_reg:x3; val_offset:17421*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17421*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bbfffff; valaddr_reg:x3; val_offset:17424*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17424*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bc00000; valaddr_reg:x3; val_offset:17427*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17427*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3be00000; valaddr_reg:x3; val_offset:17430*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17430*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bf00000; valaddr_reg:x3; val_offset:17433*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17433*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bf80000; valaddr_reg:x3; val_offset:17436*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17436*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfc0000; valaddr_reg:x3; val_offset:17439*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17439*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfe0000; valaddr_reg:x3; val_offset:17442*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17442*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bff0000; valaddr_reg:x3; val_offset:17445*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17445*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bff8000; valaddr_reg:x3; val_offset:17448*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17448*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffc000; valaddr_reg:x3; val_offset:17451*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17451*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffe000; valaddr_reg:x3; val_offset:17454*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17454*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfff000; valaddr_reg:x3; val_offset:17457*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17457*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfff800; valaddr_reg:x3; val_offset:17460*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17460*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffc00; valaddr_reg:x3; val_offset:17463*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17463*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffe00; valaddr_reg:x3; val_offset:17466*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17466*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffff00; valaddr_reg:x3; val_offset:17469*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17469*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffff80; valaddr_reg:x3; val_offset:17472*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17472*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffffc0; valaddr_reg:x3; val_offset:17475*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17475*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffffe0; valaddr_reg:x3; val_offset:17478*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17478*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffff0; valaddr_reg:x3; val_offset:17481*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17481*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffff8; valaddr_reg:x3; val_offset:17484*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17484*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffffc; valaddr_reg:x3; val_offset:17487*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17487*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bfffffe; valaddr_reg:x3; val_offset:17490*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17490*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3bffffff; valaddr_reg:x3; val_offset:17493*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17493*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3f800001; valaddr_reg:x3; val_offset:17496*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17496*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3f800003; valaddr_reg:x3; val_offset:17499*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17499*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3f800007; valaddr_reg:x3; val_offset:17502*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17502*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3f999999; valaddr_reg:x3; val_offset:17505*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17505*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:17508*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17508*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:17511*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17511*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:17514*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17514*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:17517*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17517*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:17520*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17520*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:17523*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17523*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:17526*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17526*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:17529*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17529*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:17532*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17532*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:17535*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17535*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:17538*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17538*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x009e00 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7ec583 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e009e00; op2val:0xfec583;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:17541*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17541*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:17544*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17544*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:17547*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17547*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:17550*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17550*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:17553*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17553*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:17556*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17556*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:17559*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17559*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:17562*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17562*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:17565*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17565*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:17568*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17568*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:17571*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17571*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:17574*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17574*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:17577*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17577*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:17580*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17580*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:17583*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17583*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:17586*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17586*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:17589*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17589*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d000000; valaddr_reg:x3; val_offset:17592*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17592*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d000001; valaddr_reg:x3; val_offset:17595*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17595*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d000003; valaddr_reg:x3; val_offset:17598*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17598*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d000007; valaddr_reg:x3; val_offset:17601*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17601*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d00000f; valaddr_reg:x3; val_offset:17604*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17604*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d00001f; valaddr_reg:x3; val_offset:17607*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17607*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d00003f; valaddr_reg:x3; val_offset:17610*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17610*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d00007f; valaddr_reg:x3; val_offset:17613*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17613*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d0000ff; valaddr_reg:x3; val_offset:17616*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17616*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d0001ff; valaddr_reg:x3; val_offset:17619*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17619*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d0003ff; valaddr_reg:x3; val_offset:17622*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17622*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d0007ff; valaddr_reg:x3; val_offset:17625*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17625*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d000fff; valaddr_reg:x3; val_offset:17628*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17628*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d001fff; valaddr_reg:x3; val_offset:17631*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17631*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d003fff; valaddr_reg:x3; val_offset:17634*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17634*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d007fff; valaddr_reg:x3; val_offset:17637*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17637*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d00ffff; valaddr_reg:x3; val_offset:17640*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17640*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d01ffff; valaddr_reg:x3; val_offset:17643*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17643*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d03ffff; valaddr_reg:x3; val_offset:17646*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17646*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d07ffff; valaddr_reg:x3; val_offset:17649*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17649*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d0fffff; valaddr_reg:x3; val_offset:17652*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17652*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d1fffff; valaddr_reg:x3; val_offset:17655*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17655*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d3fffff; valaddr_reg:x3; val_offset:17658*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17658*0 + 3*45*FLEN/8, x4, x1, x2)

inst_5887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d400000; valaddr_reg:x3; val_offset:17661*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17661*0 + 3*45*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841408,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841664,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841792,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841856,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841888,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841904,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841912,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841916,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841918,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3061841919,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2113917728,32,FLEN)
NAN_BOXED(2164266611,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244352,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244353,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244355,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244359,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244367,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244383,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244415,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244479,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244607,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998244863,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998245375,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998246399,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998248447,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998252543,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998260735,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998277119,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998309887,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998375423,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998506495,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(998768639,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(999292927,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1000341503,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1002438655,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1002438656,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1004535808,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1005584384,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006108672,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006370816,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006501888,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006567424,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006600192,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006616576,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006624768,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006628864,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006630912,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006631936,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632448,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632704,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632832,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632896,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632928,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632944,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632952,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632956,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632958,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1006632959,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2113969664,32,FLEN)
NAN_BOXED(16696707,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587456,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587457,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587459,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587463,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587471,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587487,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587519,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587583,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587711,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587967,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365588479,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365589503,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365591551,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365595647,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365603839,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365620223,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365652991,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365718527,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365849599,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366111743,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2366636031,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2367684607,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781759,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2369781760,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
