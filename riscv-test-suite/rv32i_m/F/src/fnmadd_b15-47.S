
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d600000; valaddr_reg:x3; val_offset:17664*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17664*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d700000; valaddr_reg:x3; val_offset:17667*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17667*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:17670*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17670*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:17673*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17673*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:17676*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17676*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:17679*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17679*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:17682*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17682*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:17685*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17685*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:17688*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17688*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:17691*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17691*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:17694*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17694*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:17697*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17697*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:17700*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17700*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:17703*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17703*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:17706*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17706*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:17709*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17709*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:17712*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17712*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:17715*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17715*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:17718*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17718*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:17721*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17721*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:17724*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17724*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x01021f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e01021f; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:17727*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17727*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20800000; valaddr_reg:x3; val_offset:17730*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17730*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20800001; valaddr_reg:x3; val_offset:17733*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17733*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20800003; valaddr_reg:x3; val_offset:17736*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17736*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20800007; valaddr_reg:x3; val_offset:17739*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17739*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2080000f; valaddr_reg:x3; val_offset:17742*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17742*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2080001f; valaddr_reg:x3; val_offset:17745*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17745*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2080003f; valaddr_reg:x3; val_offset:17748*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17748*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2080007f; valaddr_reg:x3; val_offset:17751*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17751*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x208000ff; valaddr_reg:x3; val_offset:17754*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17754*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x208001ff; valaddr_reg:x3; val_offset:17757*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17757*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x208003ff; valaddr_reg:x3; val_offset:17760*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17760*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x208007ff; valaddr_reg:x3; val_offset:17763*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17763*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20800fff; valaddr_reg:x3; val_offset:17766*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17766*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20801fff; valaddr_reg:x3; val_offset:17769*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17769*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20803fff; valaddr_reg:x3; val_offset:17772*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17772*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20807fff; valaddr_reg:x3; val_offset:17775*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17775*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2080ffff; valaddr_reg:x3; val_offset:17778*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17778*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2081ffff; valaddr_reg:x3; val_offset:17781*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17781*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2083ffff; valaddr_reg:x3; val_offset:17784*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17784*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x2087ffff; valaddr_reg:x3; val_offset:17787*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17787*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x208fffff; valaddr_reg:x3; val_offset:17790*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17790*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x209fffff; valaddr_reg:x3; val_offset:17793*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17793*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20bfffff; valaddr_reg:x3; val_offset:17796*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17796*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20c00000; valaddr_reg:x3; val_offset:17799*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17799*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20e00000; valaddr_reg:x3; val_offset:17802*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17802*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20f00000; valaddr_reg:x3; val_offset:17805*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17805*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20f80000; valaddr_reg:x3; val_offset:17808*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17808*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fc0000; valaddr_reg:x3; val_offset:17811*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17811*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fe0000; valaddr_reg:x3; val_offset:17814*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17814*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ff0000; valaddr_reg:x3; val_offset:17817*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17817*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ff8000; valaddr_reg:x3; val_offset:17820*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17820*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffc000; valaddr_reg:x3; val_offset:17823*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17823*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffe000; valaddr_reg:x3; val_offset:17826*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17826*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fff000; valaddr_reg:x3; val_offset:17829*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17829*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fff800; valaddr_reg:x3; val_offset:17832*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17832*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffc00; valaddr_reg:x3; val_offset:17835*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17835*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffe00; valaddr_reg:x3; val_offset:17838*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17838*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffff00; valaddr_reg:x3; val_offset:17841*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17841*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffff80; valaddr_reg:x3; val_offset:17844*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17844*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffffc0; valaddr_reg:x3; val_offset:17847*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17847*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffffe0; valaddr_reg:x3; val_offset:17850*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17850*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffff0; valaddr_reg:x3; val_offset:17853*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17853*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffff8; valaddr_reg:x3; val_offset:17856*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17856*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffffc; valaddr_reg:x3; val_offset:17859*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17859*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20fffffe; valaddr_reg:x3; val_offset:17862*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17862*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x20ffffff; valaddr_reg:x3; val_offset:17865*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17865*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:17868*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17868*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:17871*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17871*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:17874*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17874*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:17877*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17877*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:17880*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17880*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:17883*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17883*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:17886*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17886*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:17889*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17889*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:17892*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17892*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:17895*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17895*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:17898*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17898*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:17901*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17901*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:17904*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17904*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:17907*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17907*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:17910*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17910*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x017afc and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7d12b1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e017afc; op2val:0xfd12b1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:17913*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17913*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000000; valaddr_reg:x3; val_offset:17916*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17916*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000001; valaddr_reg:x3; val_offset:17919*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17919*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000003; valaddr_reg:x3; val_offset:17922*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17922*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000007; valaddr_reg:x3; val_offset:17925*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17925*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00000f; valaddr_reg:x3; val_offset:17928*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17928*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00001f; valaddr_reg:x3; val_offset:17931*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17931*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00003f; valaddr_reg:x3; val_offset:17934*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17934*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00007f; valaddr_reg:x3; val_offset:17937*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17937*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0000ff; valaddr_reg:x3; val_offset:17940*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17940*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0001ff; valaddr_reg:x3; val_offset:17943*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17943*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0003ff; valaddr_reg:x3; val_offset:17946*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17946*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0007ff; valaddr_reg:x3; val_offset:17949*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17949*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf000fff; valaddr_reg:x3; val_offset:17952*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17952*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf001fff; valaddr_reg:x3; val_offset:17955*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17955*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf003fff; valaddr_reg:x3; val_offset:17958*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17958*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf007fff; valaddr_reg:x3; val_offset:17961*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17961*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf00ffff; valaddr_reg:x3; val_offset:17964*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17964*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf01ffff; valaddr_reg:x3; val_offset:17967*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17967*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf03ffff; valaddr_reg:x3; val_offset:17970*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17970*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf07ffff; valaddr_reg:x3; val_offset:17973*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17973*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf0fffff; valaddr_reg:x3; val_offset:17976*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17976*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf1fffff; valaddr_reg:x3; val_offset:17979*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17979*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf3fffff; valaddr_reg:x3; val_offset:17982*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17982*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf400000; valaddr_reg:x3; val_offset:17985*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17985*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf600000; valaddr_reg:x3; val_offset:17988*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17988*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf700000; valaddr_reg:x3; val_offset:17991*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17991*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf780000; valaddr_reg:x3; val_offset:17994*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17994*0 + 3*46*FLEN/8, x4, x1, x2)

inst_5999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7c0000; valaddr_reg:x3; val_offset:17997*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17997*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7e0000; valaddr_reg:x3; val_offset:18000*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18000*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7f0000; valaddr_reg:x3; val_offset:18003*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18003*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7f8000; valaddr_reg:x3; val_offset:18006*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18006*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fc000; valaddr_reg:x3; val_offset:18009*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18009*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fe000; valaddr_reg:x3; val_offset:18012*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18012*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ff000; valaddr_reg:x3; val_offset:18015*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18015*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ff800; valaddr_reg:x3; val_offset:18018*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18018*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffc00; valaddr_reg:x3; val_offset:18021*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18021*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffe00; valaddr_reg:x3; val_offset:18024*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18024*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fff00; valaddr_reg:x3; val_offset:18027*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18027*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fff80; valaddr_reg:x3; val_offset:18030*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18030*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffc0; valaddr_reg:x3; val_offset:18033*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18033*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffe0; valaddr_reg:x3; val_offset:18036*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18036*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffff0; valaddr_reg:x3; val_offset:18039*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18039*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffff8; valaddr_reg:x3; val_offset:18042*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18042*0 + 3*46*FLEN/8, x4, x1, x2)

inst_6015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffffc; valaddr_reg:x3; val_offset:18045*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18045*0 + 3*46*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2371878912,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2372927488,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2113995295,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259520,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259521,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259523,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259527,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259535,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259551,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259583,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259647,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545259775,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545260031,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545260543,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545261567,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545263615,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545267711,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545275903,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545292287,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545325055,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545390591,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545521663,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(545783807,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(546308095,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(547356671,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(549453823,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(549453824,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(551550976,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(552599552,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553123840,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553385984,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553517056,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553582592,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553615360,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553631744,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553639936,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553644032,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553646080,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553647104,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553647616,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553647872,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648000,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648064,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648096,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648112,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648120,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648124,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648126,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(553648127,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2114026236,32,FLEN)
NAN_BOXED(16585393,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319168,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319169,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319171,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319175,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319183,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319199,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319231,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319295,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319423,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741319679,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741320191,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741321215,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741323263,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741327359,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741335551,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741351935,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741384703,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741450239,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741581311,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3741843455,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3742367743,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3743416319,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3745513471,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3745513472,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3747610624,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3748659200,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749183488,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749445632,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749576704,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749642240,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749675008,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749691392,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749699584,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749703680,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749705728,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749706752,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707264,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707520,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707648,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707712,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707744,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707760,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707768,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707772,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
