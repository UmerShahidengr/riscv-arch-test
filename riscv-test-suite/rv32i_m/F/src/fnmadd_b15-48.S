
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7ffffe; valaddr_reg:x3; val_offset:18048*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18048*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xbe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xdf7fffff; valaddr_reg:x3; val_offset:18051*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18051*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000001; valaddr_reg:x3; val_offset:18054*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18054*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000003; valaddr_reg:x3; val_offset:18057*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18057*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff000007; valaddr_reg:x3; val_offset:18060*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18060*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff199999; valaddr_reg:x3; val_offset:18063*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18063*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff249249; valaddr_reg:x3; val_offset:18066*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18066*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff333333; valaddr_reg:x3; val_offset:18069*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18069*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:18072*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18072*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:18075*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18075*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff444444; valaddr_reg:x3; val_offset:18078*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18078*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:18081*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18081*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:18084*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18084*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff666666; valaddr_reg:x3; val_offset:18087*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18087*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:18090*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18090*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:18093*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18093*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:18096*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18096*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x024505 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x7b8a32 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e024505; op2val:0xc0fb8a32;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:18099*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18099*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70000000; valaddr_reg:x3; val_offset:18102*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18102*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70000001; valaddr_reg:x3; val_offset:18105*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18105*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70000003; valaddr_reg:x3; val_offset:18108*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18108*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70000007; valaddr_reg:x3; val_offset:18111*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18111*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7000000f; valaddr_reg:x3; val_offset:18114*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18114*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7000001f; valaddr_reg:x3; val_offset:18117*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18117*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7000003f; valaddr_reg:x3; val_offset:18120*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18120*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7000007f; valaddr_reg:x3; val_offset:18123*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18123*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x700000ff; valaddr_reg:x3; val_offset:18126*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18126*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x700001ff; valaddr_reg:x3; val_offset:18129*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18129*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x700003ff; valaddr_reg:x3; val_offset:18132*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18132*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x700007ff; valaddr_reg:x3; val_offset:18135*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18135*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70000fff; valaddr_reg:x3; val_offset:18138*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18138*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70001fff; valaddr_reg:x3; val_offset:18141*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18141*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70003fff; valaddr_reg:x3; val_offset:18144*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18144*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70007fff; valaddr_reg:x3; val_offset:18147*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18147*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7000ffff; valaddr_reg:x3; val_offset:18150*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18150*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7001ffff; valaddr_reg:x3; val_offset:18153*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18153*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7003ffff; valaddr_reg:x3; val_offset:18156*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18156*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7007ffff; valaddr_reg:x3; val_offset:18159*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18159*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x700fffff; valaddr_reg:x3; val_offset:18162*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18162*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x701fffff; valaddr_reg:x3; val_offset:18165*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18165*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x703fffff; valaddr_reg:x3; val_offset:18168*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18168*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70400000; valaddr_reg:x3; val_offset:18171*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18171*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70600000; valaddr_reg:x3; val_offset:18174*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18174*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70700000; valaddr_reg:x3; val_offset:18177*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18177*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x70780000; valaddr_reg:x3; val_offset:18180*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18180*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707c0000; valaddr_reg:x3; val_offset:18183*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18183*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707e0000; valaddr_reg:x3; val_offset:18186*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18186*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707f0000; valaddr_reg:x3; val_offset:18189*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18189*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707f8000; valaddr_reg:x3; val_offset:18192*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18192*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fc000; valaddr_reg:x3; val_offset:18195*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18195*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fe000; valaddr_reg:x3; val_offset:18198*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18198*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ff000; valaddr_reg:x3; val_offset:18201*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18201*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ff800; valaddr_reg:x3; val_offset:18204*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18204*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffc00; valaddr_reg:x3; val_offset:18207*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18207*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffe00; valaddr_reg:x3; val_offset:18210*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18210*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fff00; valaddr_reg:x3; val_offset:18213*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18213*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fff80; valaddr_reg:x3; val_offset:18216*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18216*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fffc0; valaddr_reg:x3; val_offset:18219*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18219*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fffe0; valaddr_reg:x3; val_offset:18222*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18222*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffff0; valaddr_reg:x3; val_offset:18225*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18225*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffff8; valaddr_reg:x3; val_offset:18228*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18228*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffffc; valaddr_reg:x3; val_offset:18231*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18231*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707ffffe; valaddr_reg:x3; val_offset:18234*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18234*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x707fffff; valaddr_reg:x3; val_offset:18237*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18237*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f000001; valaddr_reg:x3; val_offset:18240*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18240*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f000003; valaddr_reg:x3; val_offset:18243*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18243*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f000007; valaddr_reg:x3; val_offset:18246*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18246*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f199999; valaddr_reg:x3; val_offset:18249*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18249*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f249249; valaddr_reg:x3; val_offset:18252*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18252*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f333333; valaddr_reg:x3; val_offset:18255*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18255*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:18258*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18258*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:18261*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18261*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f444444; valaddr_reg:x3; val_offset:18264*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18264*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:18267*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18267*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:18270*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18270*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f666666; valaddr_reg:x3; val_offset:18273*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18273*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:18276*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18276*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:18279*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18279*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:18282*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18282*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02ccdc and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a84f7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02ccdc; op2val:0x40fa84f7;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:18285*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18285*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:18288*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18288*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:18291*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18291*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:18294*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18294*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:18297*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18297*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:18300*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18300*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:18303*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18303*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:18306*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18306*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:18309*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18309*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:18312*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18312*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:18315*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18315*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:18318*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18318*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:18321*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18321*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:18324*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18324*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:18327*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18327*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:18330*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18330*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:18333*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18333*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:18336*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18336*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:18339*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18339*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:18342*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18342*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:18345*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18345*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:18348*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18348*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:18351*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18351*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:18354*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18354*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:18357*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18357*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:18360*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18360*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:18363*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18363*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:18366*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18366*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:18369*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18369*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:18372*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18372*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:18375*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18375*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:18378*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18378*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:18381*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18381*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:18384*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18384*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:18387*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18387*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:18390*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18390*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:18393*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18393*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:18396*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18396*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:18399*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18399*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:18402*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18402*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:18405*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18405*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:18408*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18408*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:18411*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18411*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:18414*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18414*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:18417*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18417*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:18420*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18420*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:18423*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18423*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:18426*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18426*0 + 3*47*FLEN/8, x4, x1, x2)

inst_6143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x043ad3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e043ad3; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:18429*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18429*0 + 3*47*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707774,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(3749707775,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2114077957,32,FLEN)
NAN_BOXED(3237710386,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048192,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048193,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048195,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048199,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048207,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048223,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048255,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048319,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048447,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879048703,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879049215,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879050239,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879052287,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879056383,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879064575,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879080959,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879113727,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879179263,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879310335,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1879572479,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1880096767,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1881145343,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1883242495,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1883242496,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1885339648,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1886388224,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1886912512,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887174656,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887305728,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887371264,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887404032,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887420416,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887428608,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887432704,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887434752,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887435776,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436288,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436544,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436672,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436736,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436768,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436784,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436792,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436796,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436798,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(1887436799,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2114112732,32,FLEN)
NAN_BOXED(1090159863,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2114206419,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
