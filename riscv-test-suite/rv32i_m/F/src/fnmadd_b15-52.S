
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ad793 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6c0254 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0ad793; op2val:0xec0254;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:19584*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19584*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0ad793 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x6c0254 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0ad793; op2val:0xec0254;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:19587*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19587*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a800000; valaddr_reg:x3; val_offset:19590*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19590*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a800001; valaddr_reg:x3; val_offset:19593*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19593*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a800003; valaddr_reg:x3; val_offset:19596*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19596*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a800007; valaddr_reg:x3; val_offset:19599*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19599*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a80000f; valaddr_reg:x3; val_offset:19602*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19602*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a80001f; valaddr_reg:x3; val_offset:19605*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19605*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a80003f; valaddr_reg:x3; val_offset:19608*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19608*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a80007f; valaddr_reg:x3; val_offset:19611*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19611*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a8000ff; valaddr_reg:x3; val_offset:19614*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19614*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a8001ff; valaddr_reg:x3; val_offset:19617*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19617*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a8003ff; valaddr_reg:x3; val_offset:19620*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19620*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a8007ff; valaddr_reg:x3; val_offset:19623*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19623*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a800fff; valaddr_reg:x3; val_offset:19626*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19626*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a801fff; valaddr_reg:x3; val_offset:19629*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19629*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a803fff; valaddr_reg:x3; val_offset:19632*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19632*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a807fff; valaddr_reg:x3; val_offset:19635*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19635*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a80ffff; valaddr_reg:x3; val_offset:19638*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19638*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a81ffff; valaddr_reg:x3; val_offset:19641*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19641*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a83ffff; valaddr_reg:x3; val_offset:19644*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19644*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a87ffff; valaddr_reg:x3; val_offset:19647*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19647*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a8fffff; valaddr_reg:x3; val_offset:19650*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19650*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3a9fffff; valaddr_reg:x3; val_offset:19653*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19653*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3abfffff; valaddr_reg:x3; val_offset:19656*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19656*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3ac00000; valaddr_reg:x3; val_offset:19659*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19659*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3ae00000; valaddr_reg:x3; val_offset:19662*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19662*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3af00000; valaddr_reg:x3; val_offset:19665*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19665*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3af80000; valaddr_reg:x3; val_offset:19668*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19668*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afc0000; valaddr_reg:x3; val_offset:19671*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19671*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afe0000; valaddr_reg:x3; val_offset:19674*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19674*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3aff0000; valaddr_reg:x3; val_offset:19677*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19677*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3aff8000; valaddr_reg:x3; val_offset:19680*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19680*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affc000; valaddr_reg:x3; val_offset:19683*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19683*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affe000; valaddr_reg:x3; val_offset:19686*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19686*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afff000; valaddr_reg:x3; val_offset:19689*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19689*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afff800; valaddr_reg:x3; val_offset:19692*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19692*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffc00; valaddr_reg:x3; val_offset:19695*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19695*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffe00; valaddr_reg:x3; val_offset:19698*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19698*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affff00; valaddr_reg:x3; val_offset:19701*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19701*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affff80; valaddr_reg:x3; val_offset:19704*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19704*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affffc0; valaddr_reg:x3; val_offset:19707*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19707*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affffe0; valaddr_reg:x3; val_offset:19710*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19710*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffff0; valaddr_reg:x3; val_offset:19713*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19713*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffff8; valaddr_reg:x3; val_offset:19716*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19716*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffffc; valaddr_reg:x3; val_offset:19719*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19719*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3afffffe; valaddr_reg:x3; val_offset:19722*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19722*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3affffff; valaddr_reg:x3; val_offset:19725*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19725*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:19728*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19728*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:19731*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19731*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:19734*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19734*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:19737*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19737*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:19740*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19740*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:19743*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19743*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:19746*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19746*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:19749*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19749*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:19752*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19752*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:19755*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19755*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:19758*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19758*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:19761*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19761*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:19764*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19764*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:19767*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19767*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:19770*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19770*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0dc7d6 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x671e1d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0dc7d6; op2val:0xe71e1d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:19773*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19773*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:19776*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19776*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:19779*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19779*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:19782*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19782*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:19785*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19785*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:19788*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19788*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:19791*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19791*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:19794*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19794*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:19797*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19797*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:19800*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19800*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:19803*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19803*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:19806*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19806*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:19809*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19809*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:19812*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19812*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:19815*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19815*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:19818*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19818*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:19821*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19821*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:19824*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19824*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:19827*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19827*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:19830*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19830*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:19833*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19833*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:19836*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19836*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:19839*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19839*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:19842*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19842*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:19845*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19845*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:19848*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19848*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:19851*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19851*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:19854*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19854*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:19857*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19857*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:19860*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19860*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:19863*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19863*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:19866*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19866*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:19869*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19869*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:19872*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19872*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:19875*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19875*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:19878*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19878*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:19881*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19881*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:19884*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19884*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:19887*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19887*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:19890*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19890*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:19893*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19893*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:19896*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19896*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:19899*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19899*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:19902*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19902*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:19905*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19905*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:19908*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19908*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:19911*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19911*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:19914*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19914*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:19917*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19917*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:19920*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19920*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:19923*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19923*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:19926*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19926*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:19929*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19929*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:19932*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19932*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:19935*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19935*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:19938*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19938*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0f78e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0f78e6; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:19941*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19941*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbf800001; valaddr_reg:x3; val_offset:19944*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19944*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbf800003; valaddr_reg:x3; val_offset:19947*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19947*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbf800007; valaddr_reg:x3; val_offset:19950*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19950*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbf999999; valaddr_reg:x3; val_offset:19953*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19953*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:19956*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19956*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:19959*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19959*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:19962*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19962*0 + 3*51*FLEN/8, x4, x1, x2)

inst_6655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1052fc and fs2 == 1 and fe2 == 0x01 and fm2 == 0x630b61 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1052fc; op2val:0x80e30b61;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:19965*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19965*0 + 3*51*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114639763,32,FLEN)
NAN_BOXED(15467092,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2114639763,32,FLEN)
NAN_BOXED(15467092,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467136,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467137,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467139,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467143,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467151,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467167,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467199,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467263,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467391,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981467647,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981468159,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981469183,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981471231,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981475327,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981483519,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981499903,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981532671,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981598207,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981729279,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(981991423,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(982515711,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(983564287,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(985661439,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(985661440,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(987758592,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(988807168,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989331456,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989593600,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989724672,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989790208,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989822976,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989839360,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989847552,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989851648,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989853696,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989854720,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855232,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855488,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855616,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855680,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855712,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855728,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855736,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855740,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855742,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(989855743,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2114832342,32,FLEN)
NAN_BOXED(15146525,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2114943206,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2114999036,32,FLEN)
NAN_BOXED(2162363233,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
