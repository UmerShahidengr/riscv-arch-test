
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89800000; valaddr_reg:x3; val_offset:20736*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20736*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89800001; valaddr_reg:x3; val_offset:20739*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20739*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89800003; valaddr_reg:x3; val_offset:20742*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20742*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89800007; valaddr_reg:x3; val_offset:20745*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20745*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8980000f; valaddr_reg:x3; val_offset:20748*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20748*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8980001f; valaddr_reg:x3; val_offset:20751*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20751*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8980003f; valaddr_reg:x3; val_offset:20754*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20754*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8980007f; valaddr_reg:x3; val_offset:20757*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20757*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x898000ff; valaddr_reg:x3; val_offset:20760*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20760*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x898001ff; valaddr_reg:x3; val_offset:20763*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20763*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x898003ff; valaddr_reg:x3; val_offset:20766*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20766*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x898007ff; valaddr_reg:x3; val_offset:20769*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20769*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89800fff; valaddr_reg:x3; val_offset:20772*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20772*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89801fff; valaddr_reg:x3; val_offset:20775*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20775*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89803fff; valaddr_reg:x3; val_offset:20778*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20778*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89807fff; valaddr_reg:x3; val_offset:20781*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20781*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8980ffff; valaddr_reg:x3; val_offset:20784*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20784*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8981ffff; valaddr_reg:x3; val_offset:20787*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20787*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8983ffff; valaddr_reg:x3; val_offset:20790*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20790*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x8987ffff; valaddr_reg:x3; val_offset:20793*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20793*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x898fffff; valaddr_reg:x3; val_offset:20796*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20796*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x899fffff; valaddr_reg:x3; val_offset:20799*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20799*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89bfffff; valaddr_reg:x3; val_offset:20802*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20802*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89c00000; valaddr_reg:x3; val_offset:20805*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20805*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89e00000; valaddr_reg:x3; val_offset:20808*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20808*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89f00000; valaddr_reg:x3; val_offset:20811*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20811*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89f80000; valaddr_reg:x3; val_offset:20814*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20814*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fc0000; valaddr_reg:x3; val_offset:20817*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20817*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fe0000; valaddr_reg:x3; val_offset:20820*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20820*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ff0000; valaddr_reg:x3; val_offset:20823*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20823*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ff8000; valaddr_reg:x3; val_offset:20826*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20826*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffc000; valaddr_reg:x3; val_offset:20829*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20829*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffe000; valaddr_reg:x3; val_offset:20832*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20832*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fff000; valaddr_reg:x3; val_offset:20835*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20835*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fff800; valaddr_reg:x3; val_offset:20838*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20838*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffc00; valaddr_reg:x3; val_offset:20841*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20841*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffe00; valaddr_reg:x3; val_offset:20844*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20844*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffff00; valaddr_reg:x3; val_offset:20847*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20847*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffff80; valaddr_reg:x3; val_offset:20850*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20850*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffffc0; valaddr_reg:x3; val_offset:20853*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20853*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffffe0; valaddr_reg:x3; val_offset:20856*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20856*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffff0; valaddr_reg:x3; val_offset:20859*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20859*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffff8; valaddr_reg:x3; val_offset:20862*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20862*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffffc; valaddr_reg:x3; val_offset:20865*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20865*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89fffffe; valaddr_reg:x3; val_offset:20868*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20868*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19f187 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19f187; op2val:0x80000000;
op3val:0x89ffffff; valaddr_reg:x3; val_offset:20871*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20871*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:20874*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20874*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:20877*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20877*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:20880*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20880*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:20883*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20883*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:20886*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20886*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:20889*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20889*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:20892*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20892*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:20895*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20895*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:20898*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20898*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:20901*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20901*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:20904*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20904*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:20907*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20907*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:20910*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20910*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:20913*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20913*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:20916*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20916*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:20919*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20919*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:20922*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20922*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:20925*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20925*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:20928*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20928*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:20931*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20931*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:20934*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20934*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:20937*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20937*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:20940*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20940*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:20943*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20943*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:20946*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20946*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:20949*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20949*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x3; val_offset:20952*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20952*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x3; val_offset:20955*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20955*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x3; val_offset:20958*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20958*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x3; val_offset:20961*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20961*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x3; val_offset:20964*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20964*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x3; val_offset:20967*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20967*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x3; val_offset:20970*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20970*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x3; val_offset:20973*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20973*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x3; val_offset:20976*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20976*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x3; val_offset:20979*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20979*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x3; val_offset:20982*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20982*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x3; val_offset:20985*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20985*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x3; val_offset:20988*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20988*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x3; val_offset:20991*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20991*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x3; val_offset:20994*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20994*0 + 3*54*FLEN/8, x4, x1, x2)

inst_6999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x3; val_offset:20997*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20997*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x3; val_offset:21000*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21000*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x3; val_offset:21003*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21003*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x3; val_offset:21006*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21006*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:21009*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21009*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:21012*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21012*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:21015*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21015*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:21018*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21018*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:21021*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21021*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:21024*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21024*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:21027*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21027*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:21030*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21030*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:21033*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21033*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:21036*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21036*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:21039*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21039*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:21042*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21042*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:21045*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21045*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:21048*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21048*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:21051*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21051*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:21054*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21054*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c8d67 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c8d67; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:21057*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21057*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69000000; valaddr_reg:x3; val_offset:21060*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21060*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69000001; valaddr_reg:x3; val_offset:21063*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21063*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69000003; valaddr_reg:x3; val_offset:21066*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21066*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69000007; valaddr_reg:x3; val_offset:21069*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21069*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6900000f; valaddr_reg:x3; val_offset:21072*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21072*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6900001f; valaddr_reg:x3; val_offset:21075*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21075*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6900003f; valaddr_reg:x3; val_offset:21078*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21078*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6900007f; valaddr_reg:x3; val_offset:21081*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21081*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x690000ff; valaddr_reg:x3; val_offset:21084*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21084*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x690001ff; valaddr_reg:x3; val_offset:21087*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21087*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x690003ff; valaddr_reg:x3; val_offset:21090*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21090*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x690007ff; valaddr_reg:x3; val_offset:21093*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21093*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69000fff; valaddr_reg:x3; val_offset:21096*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21096*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69001fff; valaddr_reg:x3; val_offset:21099*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21099*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69003fff; valaddr_reg:x3; val_offset:21102*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21102*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x69007fff; valaddr_reg:x3; val_offset:21105*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21105*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6900ffff; valaddr_reg:x3; val_offset:21108*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21108*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6901ffff; valaddr_reg:x3; val_offset:21111*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21111*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6903ffff; valaddr_reg:x3; val_offset:21114*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21114*0 + 3*54*FLEN/8, x4, x1, x2)

inst_7039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c9b21 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x513d0c and fs3 == 0 and fe3 == 0xd2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c9b21; op2val:0x40d13d0c;
op3val:0x6907ffff; valaddr_reg:x3; val_offset:21117*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21117*0 + 3*54*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867200,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867201,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867203,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867207,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867215,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867231,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867263,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867327,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867455,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867711,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306868223,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306869247,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306871295,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306875391,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306883583,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306899967,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306932735,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306998271,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307129343,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307391487,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307915775,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2308964351,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2311061503,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2311061504,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2313158656,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314207232,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314731520,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314993664,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315124736,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315190272,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315223040,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315239424,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315247616,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315251712,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315253760,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315254784,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255296,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255552,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255680,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255744,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255776,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255792,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255800,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255804,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255806,32,FLEN)
NAN_BOXED(2115629447,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255807,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364672,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364673,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364675,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364679,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364687,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364703,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364735,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364799,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364927,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365183,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365695,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382366719,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382368767,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382372863,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382381055,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382397439,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382430207,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382495743,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382626815,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382888959,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2383413247,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2384461823,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558975,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558976,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2388656128,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2389704704,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390228992,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390491136,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390622208,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390687744,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390720512,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390736896,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390745088,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390749184,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390751232,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752256,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752768,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753024,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753152,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753216,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753248,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753264,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753272,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753276,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2115800423,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607680,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607681,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607683,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607687,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607695,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607711,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607743,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607807,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761607935,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761608191,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761608703,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761609727,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761611775,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761615871,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761624063,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761640447,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761673215,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761738751,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1761869823,32,FLEN)
NAN_BOXED(2115803937,32,FLEN)
NAN_BOXED(1087454476,32,FLEN)
NAN_BOXED(1762131967,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
