
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:22272*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22272*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:22275*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22275*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:22278*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22278*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:22281*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22281*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:22284*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22284*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:22287*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22287*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:22290*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22290*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:22293*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22293*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:22296*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22296*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:22299*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22299*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:22302*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22302*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:22305*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22305*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:22308*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22308*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:22311*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22311*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:22314*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22314*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:22317*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22317*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:22320*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22320*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:22323*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22323*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:22326*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22326*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:22329*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22329*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:22332*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22332*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:22335*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22335*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:22338*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22338*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22d3de and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22d3de; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:22341*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22341*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3f800001; valaddr_reg:x3; val_offset:22344*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22344*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3f800003; valaddr_reg:x3; val_offset:22347*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22347*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3f800007; valaddr_reg:x3; val_offset:22350*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22350*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3f999999; valaddr_reg:x3; val_offset:22353*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22353*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:22356*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22356*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:22359*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22359*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:22362*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22362*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:22365*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22365*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:22368*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22368*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:22371*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22371*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:22374*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22374*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:22377*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22377*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:22380*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22380*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:22383*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22383*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:22386*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22386*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:22389*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22389*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f000000; valaddr_reg:x3; val_offset:22392*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22392*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f000001; valaddr_reg:x3; val_offset:22395*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22395*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f000003; valaddr_reg:x3; val_offset:22398*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22398*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f000007; valaddr_reg:x3; val_offset:22401*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22401*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f00000f; valaddr_reg:x3; val_offset:22404*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22404*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f00001f; valaddr_reg:x3; val_offset:22407*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22407*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f00003f; valaddr_reg:x3; val_offset:22410*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22410*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f00007f; valaddr_reg:x3; val_offset:22413*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22413*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f0000ff; valaddr_reg:x3; val_offset:22416*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22416*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f0001ff; valaddr_reg:x3; val_offset:22419*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22419*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f0003ff; valaddr_reg:x3; val_offset:22422*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22422*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f0007ff; valaddr_reg:x3; val_offset:22425*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22425*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f000fff; valaddr_reg:x3; val_offset:22428*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22428*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f001fff; valaddr_reg:x3; val_offset:22431*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22431*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f003fff; valaddr_reg:x3; val_offset:22434*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22434*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f007fff; valaddr_reg:x3; val_offset:22437*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22437*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f00ffff; valaddr_reg:x3; val_offset:22440*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22440*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f01ffff; valaddr_reg:x3; val_offset:22443*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22443*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f03ffff; valaddr_reg:x3; val_offset:22446*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22446*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f07ffff; valaddr_reg:x3; val_offset:22449*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22449*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f0fffff; valaddr_reg:x3; val_offset:22452*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22452*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f1fffff; valaddr_reg:x3; val_offset:22455*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22455*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f3fffff; valaddr_reg:x3; val_offset:22458*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22458*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f400000; valaddr_reg:x3; val_offset:22461*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22461*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f600000; valaddr_reg:x3; val_offset:22464*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22464*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f700000; valaddr_reg:x3; val_offset:22467*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22467*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f780000; valaddr_reg:x3; val_offset:22470*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22470*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7c0000; valaddr_reg:x3; val_offset:22473*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22473*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7e0000; valaddr_reg:x3; val_offset:22476*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22476*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7f0000; valaddr_reg:x3; val_offset:22479*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22479*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7f8000; valaddr_reg:x3; val_offset:22482*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22482*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fc000; valaddr_reg:x3; val_offset:22485*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22485*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fe000; valaddr_reg:x3; val_offset:22488*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22488*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ff000; valaddr_reg:x3; val_offset:22491*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22491*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ff800; valaddr_reg:x3; val_offset:22494*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22494*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffc00; valaddr_reg:x3; val_offset:22497*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22497*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffe00; valaddr_reg:x3; val_offset:22500*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22500*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fff00; valaddr_reg:x3; val_offset:22503*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22503*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fff80; valaddr_reg:x3; val_offset:22506*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22506*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fffc0; valaddr_reg:x3; val_offset:22509*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22509*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fffe0; valaddr_reg:x3; val_offset:22512*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22512*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffff0; valaddr_reg:x3; val_offset:22515*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22515*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffff8; valaddr_reg:x3; val_offset:22518*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22518*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffffc; valaddr_reg:x3; val_offset:22521*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22521*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7ffffe; valaddr_reg:x3; val_offset:22524*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22524*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x22eac9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x492207 and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e22eac9; op2val:0xc92207;
op3val:0x4f7fffff; valaddr_reg:x3; val_offset:22527*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22527*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:22530*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22530*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:22533*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22533*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:22536*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22536*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:22539*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22539*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:22542*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22542*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:22545*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22545*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:22548*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22548*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:22551*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22551*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:22554*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22554*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:22557*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22557*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:22560*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22560*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:22563*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22563*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:22566*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22566*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:22569*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22569*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:22572*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22572*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:22575*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22575*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8000000; valaddr_reg:x3; val_offset:22578*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22578*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8000001; valaddr_reg:x3; val_offset:22581*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22581*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8000003; valaddr_reg:x3; val_offset:22584*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22584*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8000007; valaddr_reg:x3; val_offset:22587*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22587*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x800000f; valaddr_reg:x3; val_offset:22590*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22590*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x800001f; valaddr_reg:x3; val_offset:22593*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22593*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x800003f; valaddr_reg:x3; val_offset:22596*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22596*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x800007f; valaddr_reg:x3; val_offset:22599*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22599*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x80000ff; valaddr_reg:x3; val_offset:22602*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22602*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x80001ff; valaddr_reg:x3; val_offset:22605*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22605*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x80003ff; valaddr_reg:x3; val_offset:22608*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22608*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x80007ff; valaddr_reg:x3; val_offset:22611*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22611*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8000fff; valaddr_reg:x3; val_offset:22614*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22614*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8001fff; valaddr_reg:x3; val_offset:22617*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22617*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8003fff; valaddr_reg:x3; val_offset:22620*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22620*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8007fff; valaddr_reg:x3; val_offset:22623*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22623*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x800ffff; valaddr_reg:x3; val_offset:22626*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22626*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x801ffff; valaddr_reg:x3; val_offset:22629*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22629*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x803ffff; valaddr_reg:x3; val_offset:22632*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22632*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x807ffff; valaddr_reg:x3; val_offset:22635*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22635*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x80fffff; valaddr_reg:x3; val_offset:22638*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22638*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x81fffff; valaddr_reg:x3; val_offset:22641*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22641*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x83fffff; valaddr_reg:x3; val_offset:22644*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22644*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8400000; valaddr_reg:x3; val_offset:22647*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22647*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8600000; valaddr_reg:x3; val_offset:22650*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22650*0 + 3*58*FLEN/8, x4, x1, x2)

inst_7551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2544b7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2544b7; op2val:0x0;
op3val:0x8700000; valaddr_reg:x3; val_offset:22653*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22653*0 + 3*58*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2116211678,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400064,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400065,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400067,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400071,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400079,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400095,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400127,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400191,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400319,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325400575,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325401087,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325402111,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325404159,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325408255,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325416447,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325432831,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325465599,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325531135,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325662207,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1325924351,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1326448639,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1327497215,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1329594367,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1329594368,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1331691520,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1332740096,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333264384,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333526528,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333657600,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333723136,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333755904,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333772288,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333780480,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333784576,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333786624,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333787648,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788160,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788416,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788544,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788608,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788640,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788656,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788664,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788668,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788670,32,FLEN)
NAN_BOXED(2116217545,32,FLEN)
NAN_BOXED(13181447,32,FLEN)
NAN_BOXED(1333788671,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217728,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217729,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217731,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217735,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217743,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217759,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217791,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217855,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217983,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218239,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218751,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134219775,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134221823,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134225919,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134234111,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134250495,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134283263,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134348799,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134479871,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134742015,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(135266303,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(136314879,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412031,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412032,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(140509184,32,FLEN)
NAN_BOXED(2116371639,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(141557760,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
