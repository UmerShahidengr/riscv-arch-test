
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:23424*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23424*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:23427*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23427*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:23430*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23430*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:23433*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23433*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:23436*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23436*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:23439*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23439*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:23442*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23442*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:23445*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23445*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:23448*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23448*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:23451*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23451*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:23454*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23454*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x291450 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e291450; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:23457*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23457*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3f800001; valaddr_reg:x3; val_offset:23460*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23460*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3f800003; valaddr_reg:x3; val_offset:23463*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23463*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3f800007; valaddr_reg:x3; val_offset:23466*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23466*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3f999999; valaddr_reg:x3; val_offset:23469*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23469*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:23472*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23472*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:23475*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23475*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:23478*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23478*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:23481*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23481*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:23484*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23484*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:23487*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23487*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:23490*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23490*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:23493*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23493*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:23496*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23496*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:23499*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23499*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:23502*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23502*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:23505*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23505*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45000000; valaddr_reg:x3; val_offset:23508*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23508*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45000001; valaddr_reg:x3; val_offset:23511*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23511*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45000003; valaddr_reg:x3; val_offset:23514*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23514*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45000007; valaddr_reg:x3; val_offset:23517*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23517*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4500000f; valaddr_reg:x3; val_offset:23520*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23520*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4500001f; valaddr_reg:x3; val_offset:23523*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23523*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4500003f; valaddr_reg:x3; val_offset:23526*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23526*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4500007f; valaddr_reg:x3; val_offset:23529*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23529*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x450000ff; valaddr_reg:x3; val_offset:23532*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23532*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x450001ff; valaddr_reg:x3; val_offset:23535*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23535*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x450003ff; valaddr_reg:x3; val_offset:23538*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23538*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x450007ff; valaddr_reg:x3; val_offset:23541*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23541*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45000fff; valaddr_reg:x3; val_offset:23544*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23544*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45001fff; valaddr_reg:x3; val_offset:23547*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23547*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45003fff; valaddr_reg:x3; val_offset:23550*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23550*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45007fff; valaddr_reg:x3; val_offset:23553*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23553*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4500ffff; valaddr_reg:x3; val_offset:23556*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23556*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4501ffff; valaddr_reg:x3; val_offset:23559*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23559*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4503ffff; valaddr_reg:x3; val_offset:23562*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23562*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x4507ffff; valaddr_reg:x3; val_offset:23565*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23565*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x450fffff; valaddr_reg:x3; val_offset:23568*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23568*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x451fffff; valaddr_reg:x3; val_offset:23571*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23571*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x453fffff; valaddr_reg:x3; val_offset:23574*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23574*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45400000; valaddr_reg:x3; val_offset:23577*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23577*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45600000; valaddr_reg:x3; val_offset:23580*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23580*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45700000; valaddr_reg:x3; val_offset:23583*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23583*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x45780000; valaddr_reg:x3; val_offset:23586*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23586*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457c0000; valaddr_reg:x3; val_offset:23589*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23589*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457e0000; valaddr_reg:x3; val_offset:23592*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23592*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457f0000; valaddr_reg:x3; val_offset:23595*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23595*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457f8000; valaddr_reg:x3; val_offset:23598*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23598*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fc000; valaddr_reg:x3; val_offset:23601*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23601*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fe000; valaddr_reg:x3; val_offset:23604*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23604*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ff000; valaddr_reg:x3; val_offset:23607*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23607*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ff800; valaddr_reg:x3; val_offset:23610*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23610*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffc00; valaddr_reg:x3; val_offset:23613*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23613*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffe00; valaddr_reg:x3; val_offset:23616*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23616*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fff00; valaddr_reg:x3; val_offset:23619*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23619*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fff80; valaddr_reg:x3; val_offset:23622*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23622*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fffc0; valaddr_reg:x3; val_offset:23625*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23625*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fffe0; valaddr_reg:x3; val_offset:23628*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23628*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffff0; valaddr_reg:x3; val_offset:23631*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23631*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffff8; valaddr_reg:x3; val_offset:23634*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23634*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffffc; valaddr_reg:x3; val_offset:23637*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23637*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457ffffe; valaddr_reg:x3; val_offset:23640*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23640*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d1655 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x3d50a0 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d1655; op2val:0xbd50a0;
op3val:0x457fffff; valaddr_reg:x3; val_offset:23643*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23643*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:23646*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23646*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:23649*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23649*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:23652*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23652*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:23655*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23655*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:23658*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23658*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:23661*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23661*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:23664*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23664*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:23667*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23667*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:23670*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23670*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:23673*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23673*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:23676*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23676*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:23679*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23679*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:23682*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23682*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:23685*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23685*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:23688*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23688*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:23691*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23691*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85800000; valaddr_reg:x3; val_offset:23694*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23694*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85800001; valaddr_reg:x3; val_offset:23697*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23697*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85800003; valaddr_reg:x3; val_offset:23700*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23700*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85800007; valaddr_reg:x3; val_offset:23703*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23703*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8580000f; valaddr_reg:x3; val_offset:23706*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23706*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8580001f; valaddr_reg:x3; val_offset:23709*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23709*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8580003f; valaddr_reg:x3; val_offset:23712*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23712*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8580007f; valaddr_reg:x3; val_offset:23715*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23715*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x858000ff; valaddr_reg:x3; val_offset:23718*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23718*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x858001ff; valaddr_reg:x3; val_offset:23721*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23721*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x858003ff; valaddr_reg:x3; val_offset:23724*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23724*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x858007ff; valaddr_reg:x3; val_offset:23727*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23727*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85800fff; valaddr_reg:x3; val_offset:23730*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23730*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85801fff; valaddr_reg:x3; val_offset:23733*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23733*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85803fff; valaddr_reg:x3; val_offset:23736*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23736*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85807fff; valaddr_reg:x3; val_offset:23739*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23739*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8580ffff; valaddr_reg:x3; val_offset:23742*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23742*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8581ffff; valaddr_reg:x3; val_offset:23745*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23745*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8583ffff; valaddr_reg:x3; val_offset:23748*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23748*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x8587ffff; valaddr_reg:x3; val_offset:23751*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23751*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x858fffff; valaddr_reg:x3; val_offset:23754*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23754*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x859fffff; valaddr_reg:x3; val_offset:23757*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23757*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85bfffff; valaddr_reg:x3; val_offset:23760*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23760*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85c00000; valaddr_reg:x3; val_offset:23763*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23763*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85e00000; valaddr_reg:x3; val_offset:23766*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23766*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85f00000; valaddr_reg:x3; val_offset:23769*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23769*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85f80000; valaddr_reg:x3; val_offset:23772*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23772*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fc0000; valaddr_reg:x3; val_offset:23775*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23775*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fe0000; valaddr_reg:x3; val_offset:23778*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23778*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85ff0000; valaddr_reg:x3; val_offset:23781*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23781*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85ff8000; valaddr_reg:x3; val_offset:23784*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23784*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85ffc000; valaddr_reg:x3; val_offset:23787*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23787*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85ffe000; valaddr_reg:x3; val_offset:23790*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23790*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fff000; valaddr_reg:x3; val_offset:23793*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23793*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fff800; valaddr_reg:x3; val_offset:23796*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23796*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fffc00; valaddr_reg:x3; val_offset:23799*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23799*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85fffe00; valaddr_reg:x3; val_offset:23802*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23802*0 + 3*61*FLEN/8, x4, x1, x2)

inst_7935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2d5c6f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2d5c6f; op2val:0x80000000;
op3val:0x85ffff00; valaddr_reg:x3; val_offset:23805*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23805*0 + 3*61*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2116621392,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627904,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627905,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627907,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627911,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627919,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627935,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157627967,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157628031,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157628159,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157628415,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157628927,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157629951,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157631999,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157636095,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157644287,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157660671,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157693439,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157758975,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1157890047,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1158152191,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1158676479,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1159725055,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1161822207,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1161822208,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1163919360,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1164967936,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1165492224,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1165754368,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1165885440,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1165950976,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1165983744,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166000128,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166008320,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166012416,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166014464,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166015488,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016000,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016256,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016384,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016448,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016480,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016496,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016504,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016508,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016510,32,FLEN)
NAN_BOXED(2116884053,32,FLEN)
NAN_BOXED(12406944,32,FLEN)
NAN_BOXED(1166016511,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758336,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758337,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758339,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758343,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758351,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758367,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758399,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758463,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758591,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758847,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239759359,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239760383,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239762431,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239766527,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239774719,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239791103,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239823871,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239889407,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240020479,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240282623,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240806911,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2241855487,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952639,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952640,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2246049792,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247098368,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247622656,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247884800,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248015872,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248081408,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248114176,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248130560,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248138752,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248142848,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248144896,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248145920,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146432,32,FLEN)
NAN_BOXED(2116901999,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146688,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
