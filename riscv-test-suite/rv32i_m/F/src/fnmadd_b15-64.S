
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34a023 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3569fb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34a023; op2val:0x80b569fb;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:24192*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24192*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34a023 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3569fb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34a023; op2val:0x80b569fb;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:24195*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24195*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34a023 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3569fb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34a023; op2val:0x80b569fb;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:24198*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24198*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34a023 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x3569fb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34a023; op2val:0x80b569fb;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:24201*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24201*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7000000; valaddr_reg:x3; val_offset:24204*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24204*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7000001; valaddr_reg:x3; val_offset:24207*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24207*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7000003; valaddr_reg:x3; val_offset:24210*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24210*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7000007; valaddr_reg:x3; val_offset:24213*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24213*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe700000f; valaddr_reg:x3; val_offset:24216*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24216*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe700001f; valaddr_reg:x3; val_offset:24219*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24219*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe700003f; valaddr_reg:x3; val_offset:24222*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24222*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe700007f; valaddr_reg:x3; val_offset:24225*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24225*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe70000ff; valaddr_reg:x3; val_offset:24228*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24228*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe70001ff; valaddr_reg:x3; val_offset:24231*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24231*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe70003ff; valaddr_reg:x3; val_offset:24234*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24234*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe70007ff; valaddr_reg:x3; val_offset:24237*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24237*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7000fff; valaddr_reg:x3; val_offset:24240*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24240*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7001fff; valaddr_reg:x3; val_offset:24243*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24243*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7003fff; valaddr_reg:x3; val_offset:24246*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24246*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7007fff; valaddr_reg:x3; val_offset:24249*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24249*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe700ffff; valaddr_reg:x3; val_offset:24252*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24252*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe701ffff; valaddr_reg:x3; val_offset:24255*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24255*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe703ffff; valaddr_reg:x3; val_offset:24258*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24258*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe707ffff; valaddr_reg:x3; val_offset:24261*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24261*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe70fffff; valaddr_reg:x3; val_offset:24264*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24264*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe71fffff; valaddr_reg:x3; val_offset:24267*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24267*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe73fffff; valaddr_reg:x3; val_offset:24270*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24270*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7400000; valaddr_reg:x3; val_offset:24273*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24273*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7600000; valaddr_reg:x3; val_offset:24276*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24276*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7700000; valaddr_reg:x3; val_offset:24279*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24279*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe7780000; valaddr_reg:x3; val_offset:24282*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24282*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77c0000; valaddr_reg:x3; val_offset:24285*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24285*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77e0000; valaddr_reg:x3; val_offset:24288*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24288*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77f0000; valaddr_reg:x3; val_offset:24291*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24291*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77f8000; valaddr_reg:x3; val_offset:24294*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24294*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fc000; valaddr_reg:x3; val_offset:24297*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24297*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fe000; valaddr_reg:x3; val_offset:24300*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24300*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ff000; valaddr_reg:x3; val_offset:24303*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24303*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ff800; valaddr_reg:x3; val_offset:24306*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24306*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffc00; valaddr_reg:x3; val_offset:24309*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24309*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffe00; valaddr_reg:x3; val_offset:24312*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24312*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fff00; valaddr_reg:x3; val_offset:24315*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24315*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fff80; valaddr_reg:x3; val_offset:24318*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24318*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fffc0; valaddr_reg:x3; val_offset:24321*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24321*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fffe0; valaddr_reg:x3; val_offset:24324*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24324*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffff0; valaddr_reg:x3; val_offset:24327*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24327*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffff8; valaddr_reg:x3; val_offset:24330*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24330*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffffc; valaddr_reg:x3; val_offset:24333*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24333*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77ffffe; valaddr_reg:x3; val_offset:24336*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24336*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xce and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xe77fffff; valaddr_reg:x3; val_offset:24339*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24339*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff000001; valaddr_reg:x3; val_offset:24342*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24342*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff000003; valaddr_reg:x3; val_offset:24345*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24345*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff000007; valaddr_reg:x3; val_offset:24348*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24348*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff199999; valaddr_reg:x3; val_offset:24351*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24351*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff249249; valaddr_reg:x3; val_offset:24354*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24354*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff333333; valaddr_reg:x3; val_offset:24357*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24357*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:24360*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24360*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:24363*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24363*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff444444; valaddr_reg:x3; val_offset:24366*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24366*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:24369*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24369*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:24372*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24372*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff666666; valaddr_reg:x3; val_offset:24375*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24375*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:24378*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24378*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:24381*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24381*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:24384*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24384*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x363201 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x33d9d5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e363201; op2val:0xc0b3d9d5;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:24387*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24387*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:24390*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24390*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:24393*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24393*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:24396*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24396*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:24399*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24399*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:24402*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24402*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:24405*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24405*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:24408*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24408*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:24411*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24411*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:24414*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24414*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:24417*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24417*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:24420*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24420*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:24423*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24423*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:24426*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24426*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:24429*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24429*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:24432*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24432*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:24435*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24435*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87800000; valaddr_reg:x3; val_offset:24438*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24438*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87800001; valaddr_reg:x3; val_offset:24441*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24441*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87800003; valaddr_reg:x3; val_offset:24444*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24444*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87800007; valaddr_reg:x3; val_offset:24447*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24447*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8780000f; valaddr_reg:x3; val_offset:24450*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24450*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8780001f; valaddr_reg:x3; val_offset:24453*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24453*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8780003f; valaddr_reg:x3; val_offset:24456*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24456*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8780007f; valaddr_reg:x3; val_offset:24459*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24459*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x878000ff; valaddr_reg:x3; val_offset:24462*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24462*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x878001ff; valaddr_reg:x3; val_offset:24465*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24465*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x878003ff; valaddr_reg:x3; val_offset:24468*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24468*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x878007ff; valaddr_reg:x3; val_offset:24471*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24471*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87800fff; valaddr_reg:x3; val_offset:24474*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24474*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87801fff; valaddr_reg:x3; val_offset:24477*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24477*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87803fff; valaddr_reg:x3; val_offset:24480*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24480*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87807fff; valaddr_reg:x3; val_offset:24483*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24483*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8780ffff; valaddr_reg:x3; val_offset:24486*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24486*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8781ffff; valaddr_reg:x3; val_offset:24489*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24489*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8783ffff; valaddr_reg:x3; val_offset:24492*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24492*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x8787ffff; valaddr_reg:x3; val_offset:24495*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24495*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x878fffff; valaddr_reg:x3; val_offset:24498*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24498*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x879fffff; valaddr_reg:x3; val_offset:24501*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24501*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87bfffff; valaddr_reg:x3; val_offset:24504*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24504*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87c00000; valaddr_reg:x3; val_offset:24507*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24507*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87e00000; valaddr_reg:x3; val_offset:24510*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24510*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87f00000; valaddr_reg:x3; val_offset:24513*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24513*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87f80000; valaddr_reg:x3; val_offset:24516*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24516*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fc0000; valaddr_reg:x3; val_offset:24519*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24519*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fe0000; valaddr_reg:x3; val_offset:24522*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24522*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ff0000; valaddr_reg:x3; val_offset:24525*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24525*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ff8000; valaddr_reg:x3; val_offset:24528*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24528*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffc000; valaddr_reg:x3; val_offset:24531*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24531*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffe000; valaddr_reg:x3; val_offset:24534*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24534*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fff000; valaddr_reg:x3; val_offset:24537*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24537*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fff800; valaddr_reg:x3; val_offset:24540*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24540*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffc00; valaddr_reg:x3; val_offset:24543*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24543*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffe00; valaddr_reg:x3; val_offset:24546*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24546*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffff00; valaddr_reg:x3; val_offset:24549*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24549*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffff80; valaddr_reg:x3; val_offset:24552*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24552*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffffc0; valaddr_reg:x3; val_offset:24555*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24555*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffffe0; valaddr_reg:x3; val_offset:24558*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24558*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffff0; valaddr_reg:x3; val_offset:24561*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24561*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffff8; valaddr_reg:x3; val_offset:24564*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24564*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffffc; valaddr_reg:x3; val_offset:24567*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24567*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87fffffe; valaddr_reg:x3; val_offset:24570*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24570*0 + 3*63*FLEN/8, x4, x1, x2)

inst_8191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3a0a29 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3a0a29; op2val:0x80000000;
op3val:0x87ffffff; valaddr_reg:x3; val_offset:24573*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24573*0 + 3*63*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2117378083,32,FLEN)
NAN_BOXED(2159372795,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2117378083,32,FLEN)
NAN_BOXED(2159372795,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2117378083,32,FLEN)
NAN_BOXED(2159372795,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2117378083,32,FLEN)
NAN_BOXED(2159372795,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536896,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536897,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536899,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536903,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536911,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536927,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875536959,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875537023,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875537151,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875537407,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875537919,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875538943,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875540991,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875545087,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875553279,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875569663,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875602431,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875667967,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3875799039,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3876061183,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3876585471,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3877634047,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3879731199,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3879731200,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3881828352,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3882876928,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883401216,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883663360,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883794432,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883859968,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883892736,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883909120,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883917312,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883921408,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883923456,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883924480,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883924992,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925248,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925376,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925440,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925472,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925488,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925496,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925500,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925502,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(3883925503,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2117480961,32,FLEN)
NAN_BOXED(3233012181,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312768,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312769,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312771,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312775,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312783,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312799,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312831,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273312895,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313023,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313279,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273313791,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273314815,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273316863,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273320959,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273329151,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273345535,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273378303,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273443839,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273574911,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273837055,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2274361343,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2275409919,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507071,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2277507072,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2279604224,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2280652800,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281177088,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281439232,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281570304,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281635840,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281668608,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281684992,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281693184,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281697280,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281699328,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700352,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281700864,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701120,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701248,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701312,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701344,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701360,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701368,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701372,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701374,32,FLEN)
NAN_BOXED(2117732905,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701375,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
