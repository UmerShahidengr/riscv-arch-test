
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2800000; valaddr_reg:x3; val_offset:24576*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24576*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2800001; valaddr_reg:x3; val_offset:24579*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24579*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2800003; valaddr_reg:x3; val_offset:24582*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24582*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2800007; valaddr_reg:x3; val_offset:24585*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24585*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf280000f; valaddr_reg:x3; val_offset:24588*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24588*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf280001f; valaddr_reg:x3; val_offset:24591*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24591*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf280003f; valaddr_reg:x3; val_offset:24594*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24594*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf280007f; valaddr_reg:x3; val_offset:24597*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24597*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf28000ff; valaddr_reg:x3; val_offset:24600*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24600*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf28001ff; valaddr_reg:x3; val_offset:24603*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24603*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf28003ff; valaddr_reg:x3; val_offset:24606*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24606*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf28007ff; valaddr_reg:x3; val_offset:24609*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24609*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2800fff; valaddr_reg:x3; val_offset:24612*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24612*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2801fff; valaddr_reg:x3; val_offset:24615*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24615*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2803fff; valaddr_reg:x3; val_offset:24618*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24618*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2807fff; valaddr_reg:x3; val_offset:24621*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24621*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf280ffff; valaddr_reg:x3; val_offset:24624*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24624*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf281ffff; valaddr_reg:x3; val_offset:24627*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24627*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf283ffff; valaddr_reg:x3; val_offset:24630*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24630*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf287ffff; valaddr_reg:x3; val_offset:24633*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24633*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf28fffff; valaddr_reg:x3; val_offset:24636*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24636*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf29fffff; valaddr_reg:x3; val_offset:24639*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24639*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2bfffff; valaddr_reg:x3; val_offset:24642*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24642*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2c00000; valaddr_reg:x3; val_offset:24645*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24645*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2e00000; valaddr_reg:x3; val_offset:24648*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24648*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2f00000; valaddr_reg:x3; val_offset:24651*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24651*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2f80000; valaddr_reg:x3; val_offset:24654*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24654*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fc0000; valaddr_reg:x3; val_offset:24657*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24657*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fe0000; valaddr_reg:x3; val_offset:24660*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24660*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ff0000; valaddr_reg:x3; val_offset:24663*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24663*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ff8000; valaddr_reg:x3; val_offset:24666*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24666*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffc000; valaddr_reg:x3; val_offset:24669*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24669*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffe000; valaddr_reg:x3; val_offset:24672*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24672*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fff000; valaddr_reg:x3; val_offset:24675*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24675*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fff800; valaddr_reg:x3; val_offset:24678*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24678*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffc00; valaddr_reg:x3; val_offset:24681*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24681*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffe00; valaddr_reg:x3; val_offset:24684*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24684*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffff00; valaddr_reg:x3; val_offset:24687*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24687*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffff80; valaddr_reg:x3; val_offset:24690*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24690*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffffc0; valaddr_reg:x3; val_offset:24693*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24693*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffffe0; valaddr_reg:x3; val_offset:24696*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24696*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffff0; valaddr_reg:x3; val_offset:24699*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24699*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffff8; valaddr_reg:x3; val_offset:24702*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24702*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffffc; valaddr_reg:x3; val_offset:24705*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24705*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2fffffe; valaddr_reg:x3; val_offset:24708*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24708*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xf2ffffff; valaddr_reg:x3; val_offset:24711*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24711*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff000001; valaddr_reg:x3; val_offset:24714*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24714*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff000003; valaddr_reg:x3; val_offset:24717*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24717*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff000007; valaddr_reg:x3; val_offset:24720*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24720*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff199999; valaddr_reg:x3; val_offset:24723*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24723*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff249249; valaddr_reg:x3; val_offset:24726*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24726*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff333333; valaddr_reg:x3; val_offset:24729*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24729*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:24732*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24732*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:24735*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24735*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff444444; valaddr_reg:x3; val_offset:24738*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24738*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:24741*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24741*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:24744*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24744*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff666666; valaddr_reg:x3; val_offset:24747*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24747*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:24750*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24750*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:24753*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24753*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:24756*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24756*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b9111 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2eb356 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b9111; op2val:0xc0aeb356;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:24759*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24759*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:24762*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24762*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:24765*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24765*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:24768*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24768*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:24771*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24771*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:24774*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24774*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:24777*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24777*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:24780*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24780*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:24783*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24783*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:24786*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24786*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:24789*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24789*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:24792*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24792*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:24795*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24795*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:24798*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24798*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:24801*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24801*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:24804*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24804*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:24807*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24807*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:24810*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24810*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:24813*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24813*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:24816*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24816*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:24819*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24819*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:24822*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24822*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:24825*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24825*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:24828*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24828*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:24831*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24831*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:24834*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24834*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:24837*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24837*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:24840*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24840*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:24843*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24843*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:24846*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24846*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:24849*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24849*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:24852*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24852*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:24855*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24855*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:24858*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24858*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:24861*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24861*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:24864*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24864*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:24867*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24867*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:24870*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24870*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:24873*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24873*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:24876*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24876*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:24879*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24879*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:24882*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24882*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:24885*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24885*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:24888*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24888*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:24891*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24891*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:24894*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24894*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:24897*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24897*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:24900*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24900*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:24903*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24903*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:24906*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24906*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:24909*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24909*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:24912*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24912*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:24915*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24915*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:24918*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24918*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:24921*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24921*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:24924*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24924*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:24927*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24927*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:24930*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24930*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:24933*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24933*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:24936*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24936*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:24939*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24939*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:24942*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24942*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ccfb5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ccfb5; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:24945*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24945*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:24948*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24948*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:24951*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24951*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:24954*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24954*0 + 3*64*FLEN/8, x4, x1, x2)

inst_8319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:24957*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24957*0 + 3*64*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474880,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474881,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474883,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474887,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474895,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474911,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068474943,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068475007,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068475135,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068475391,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068475903,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068476927,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068478975,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068483071,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068491263,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068507647,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068540415,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068605951,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068737023,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4068999167,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4069523455,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4070572031,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4072669183,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4072669184,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4074766336,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4075814912,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076339200,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076601344,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076732416,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076797952,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076830720,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076847104,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076855296,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076859392,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076861440,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076862464,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076862976,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863232,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863360,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863424,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863456,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863472,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863480,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863484,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863486,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4076863487,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2117832977,32,FLEN)
NAN_BOXED(3232674646,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2117914549,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
