
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:24960*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24960*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:24963*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24963*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:24966*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24966*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:24969*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24969*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:24972*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24972*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:24975*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24975*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:24978*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24978*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:24981*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24981*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:24984*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24984*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:24987*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24987*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:24990*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24990*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:24993*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24993*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:24996*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24996*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:24999*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 24999*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:25002*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25002*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:25005*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25005*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:25008*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25008*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:25011*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25011*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:25014*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25014*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:25017*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25017*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:25020*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25020*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:25023*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25023*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:25026*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25026*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:25029*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25029*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:25032*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25032*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:25035*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25035*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:25038*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25038*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:25041*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25041*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:25044*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25044*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:25047*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25047*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:25050*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25050*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:25053*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25053*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:25056*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25056*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:25059*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25059*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:25062*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25062*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:25065*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25065*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:25068*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25068*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:25071*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25071*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:25074*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25074*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:25077*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25077*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:25080*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25080*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:25083*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25083*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:25086*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25086*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:25089*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25089*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:25092*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25092*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:25095*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25095*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:25098*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25098*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:25101*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25101*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:25104*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25104*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:25107*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25107*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:25110*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25110*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:25113*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25113*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:25116*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25116*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:25119*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25119*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:25122*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25122*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:25125*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25125*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:25128*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25128*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3d3883 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3d3883; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:25131*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25131*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6000000; valaddr_reg:x3; val_offset:25134*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25134*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6000001; valaddr_reg:x3; val_offset:25137*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25137*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6000003; valaddr_reg:x3; val_offset:25140*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25140*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6000007; valaddr_reg:x3; val_offset:25143*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25143*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf600000f; valaddr_reg:x3; val_offset:25146*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25146*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf600001f; valaddr_reg:x3; val_offset:25149*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25149*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf600003f; valaddr_reg:x3; val_offset:25152*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25152*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf600007f; valaddr_reg:x3; val_offset:25155*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25155*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf60000ff; valaddr_reg:x3; val_offset:25158*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25158*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf60001ff; valaddr_reg:x3; val_offset:25161*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25161*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf60003ff; valaddr_reg:x3; val_offset:25164*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25164*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf60007ff; valaddr_reg:x3; val_offset:25167*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25167*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6000fff; valaddr_reg:x3; val_offset:25170*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25170*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6001fff; valaddr_reg:x3; val_offset:25173*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25173*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6003fff; valaddr_reg:x3; val_offset:25176*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25176*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6007fff; valaddr_reg:x3; val_offset:25179*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25179*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf600ffff; valaddr_reg:x3; val_offset:25182*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25182*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf601ffff; valaddr_reg:x3; val_offset:25185*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25185*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf603ffff; valaddr_reg:x3; val_offset:25188*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25188*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf607ffff; valaddr_reg:x3; val_offset:25191*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25191*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf60fffff; valaddr_reg:x3; val_offset:25194*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25194*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf61fffff; valaddr_reg:x3; val_offset:25197*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25197*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf63fffff; valaddr_reg:x3; val_offset:25200*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25200*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6400000; valaddr_reg:x3; val_offset:25203*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25203*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6600000; valaddr_reg:x3; val_offset:25206*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25206*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6700000; valaddr_reg:x3; val_offset:25209*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25209*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf6780000; valaddr_reg:x3; val_offset:25212*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25212*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67c0000; valaddr_reg:x3; val_offset:25215*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25215*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67e0000; valaddr_reg:x3; val_offset:25218*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25218*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67f0000; valaddr_reg:x3; val_offset:25221*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25221*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67f8000; valaddr_reg:x3; val_offset:25224*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25224*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fc000; valaddr_reg:x3; val_offset:25227*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25227*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fe000; valaddr_reg:x3; val_offset:25230*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25230*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ff000; valaddr_reg:x3; val_offset:25233*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25233*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ff800; valaddr_reg:x3; val_offset:25236*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25236*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffc00; valaddr_reg:x3; val_offset:25239*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25239*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffe00; valaddr_reg:x3; val_offset:25242*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25242*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fff00; valaddr_reg:x3; val_offset:25245*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25245*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fff80; valaddr_reg:x3; val_offset:25248*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25248*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fffc0; valaddr_reg:x3; val_offset:25251*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25251*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fffe0; valaddr_reg:x3; val_offset:25254*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25254*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffff0; valaddr_reg:x3; val_offset:25257*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25257*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffff8; valaddr_reg:x3; val_offset:25260*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25260*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffffc; valaddr_reg:x3; val_offset:25263*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25263*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67ffffe; valaddr_reg:x3; val_offset:25266*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25266*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xec and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xf67fffff; valaddr_reg:x3; val_offset:25269*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25269*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff000001; valaddr_reg:x3; val_offset:25272*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25272*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff000003; valaddr_reg:x3; val_offset:25275*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25275*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff000007; valaddr_reg:x3; val_offset:25278*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25278*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff199999; valaddr_reg:x3; val_offset:25281*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25281*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff249249; valaddr_reg:x3; val_offset:25284*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25284*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff333333; valaddr_reg:x3; val_offset:25287*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25287*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:25290*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25290*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:25293*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25293*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff444444; valaddr_reg:x3; val_offset:25296*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25296*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:25299*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25299*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:25302*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25302*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff666666; valaddr_reg:x3; val_offset:25305*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25305*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:25308*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25308*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:25311*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25311*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:25314*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25314*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3ecaa2 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2bbf65 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3ecaa2; op2val:0xc0abbf65;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:25317*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25317*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:25320*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25320*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:25323*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25323*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:25326*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25326*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:25329*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25329*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:25332*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25332*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:25335*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25335*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:25338*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25338*0 + 3*65*FLEN/8, x4, x1, x2)

inst_8447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40750f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40750f; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:25341*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25341*0 + 3*65*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2117941379,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195136,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195137,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195139,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195143,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195151,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195167,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195199,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195263,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195391,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127195647,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127196159,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127197183,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127199231,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127203327,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127211519,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127227903,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127260671,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127326207,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127457279,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4127719423,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4128243711,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4129292287,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4131389439,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4131389440,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4133486592,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4134535168,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135059456,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135321600,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135452672,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135518208,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135550976,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135567360,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135575552,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135579648,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135581696,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135582720,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583232,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583488,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583616,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583680,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583712,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583728,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583736,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583740,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583742,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4135583743,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118044322,32,FLEN)
NAN_BOXED(3232481125,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2118153487,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
