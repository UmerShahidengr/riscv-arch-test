
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:25728*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25728*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:25731*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25731*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:25734*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25734*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:25737*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25737*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:25740*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25740*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:25743*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25743*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:25746*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25746*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:25749*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25749*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:25752*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25752*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:25755*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25755*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:25758*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25758*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:25761*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25761*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:25764*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25764*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:25767*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25767*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:25770*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25770*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:25773*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25773*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:25776*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25776*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:25779*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25779*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:25782*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25782*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:25785*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25785*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:25788*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25788*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:25791*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25791*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:25794*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25794*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:25797*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25797*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:25800*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25800*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:25803*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25803*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:25806*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25806*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:25809*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25809*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:25812*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25812*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:25815*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25815*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:25818*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25818*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:25821*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25821*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:25824*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25824*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:25827*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25827*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:25830*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25830*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:25833*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25833*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:25836*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25836*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:25839*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25839*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:25842*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25842*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:25845*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25845*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:25848*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25848*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:25851*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25851*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:25854*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25854*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x429e75 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e429e75; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:25857*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25857*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:25860*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25860*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:25863*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25863*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:25866*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25866*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:25869*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25869*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:25872*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25872*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:25875*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25875*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:25878*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25878*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:25881*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25881*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:25884*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25884*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:25887*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25887*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:25890*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25890*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:25893*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25893*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:25896*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25896*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:25899*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25899*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:25902*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25902*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:25905*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25905*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000000; valaddr_reg:x3; val_offset:25908*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25908*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000001; valaddr_reg:x3; val_offset:25911*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25911*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000003; valaddr_reg:x3; val_offset:25914*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25914*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000007; valaddr_reg:x3; val_offset:25917*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25917*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200000f; valaddr_reg:x3; val_offset:25920*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25920*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200001f; valaddr_reg:x3; val_offset:25923*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25923*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200003f; valaddr_reg:x3; val_offset:25926*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25926*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200007f; valaddr_reg:x3; val_offset:25929*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25929*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420000ff; valaddr_reg:x3; val_offset:25932*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25932*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420001ff; valaddr_reg:x3; val_offset:25935*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25935*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420003ff; valaddr_reg:x3; val_offset:25938*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25938*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420007ff; valaddr_reg:x3; val_offset:25941*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25941*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42000fff; valaddr_reg:x3; val_offset:25944*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25944*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42001fff; valaddr_reg:x3; val_offset:25947*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25947*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42003fff; valaddr_reg:x3; val_offset:25950*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25950*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42007fff; valaddr_reg:x3; val_offset:25953*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25953*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4200ffff; valaddr_reg:x3; val_offset:25956*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25956*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4201ffff; valaddr_reg:x3; val_offset:25959*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25959*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4203ffff; valaddr_reg:x3; val_offset:25962*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25962*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x4207ffff; valaddr_reg:x3; val_offset:25965*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25965*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x420fffff; valaddr_reg:x3; val_offset:25968*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25968*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x421fffff; valaddr_reg:x3; val_offset:25971*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25971*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x423fffff; valaddr_reg:x3; val_offset:25974*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25974*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42400000; valaddr_reg:x3; val_offset:25977*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25977*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42600000; valaddr_reg:x3; val_offset:25980*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25980*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42700000; valaddr_reg:x3; val_offset:25983*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25983*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x42780000; valaddr_reg:x3; val_offset:25986*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25986*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427c0000; valaddr_reg:x3; val_offset:25989*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25989*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427e0000; valaddr_reg:x3; val_offset:25992*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25992*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427f0000; valaddr_reg:x3; val_offset:25995*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25995*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427f8000; valaddr_reg:x3; val_offset:25998*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 25998*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fc000; valaddr_reg:x3; val_offset:26001*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26001*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fe000; valaddr_reg:x3; val_offset:26004*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26004*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ff000; valaddr_reg:x3; val_offset:26007*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26007*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ff800; valaddr_reg:x3; val_offset:26010*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26010*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffc00; valaddr_reg:x3; val_offset:26013*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26013*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffe00; valaddr_reg:x3; val_offset:26016*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26016*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fff00; valaddr_reg:x3; val_offset:26019*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26019*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fff80; valaddr_reg:x3; val_offset:26022*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26022*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffc0; valaddr_reg:x3; val_offset:26025*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26025*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffe0; valaddr_reg:x3; val_offset:26028*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26028*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffff0; valaddr_reg:x3; val_offset:26031*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26031*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffff8; valaddr_reg:x3; val_offset:26034*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26034*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffffc; valaddr_reg:x3; val_offset:26037*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26037*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427ffffe; valaddr_reg:x3; val_offset:26040*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26040*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x42a7e5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x28568f and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e42a7e5; op2val:0xa8568f;
op3val:0x427fffff; valaddr_reg:x3; val_offset:26043*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26043*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000000; valaddr_reg:x3; val_offset:26046*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26046*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000001; valaddr_reg:x3; val_offset:26049*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26049*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000003; valaddr_reg:x3; val_offset:26052*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26052*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000007; valaddr_reg:x3; val_offset:26055*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26055*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00000f; valaddr_reg:x3; val_offset:26058*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26058*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00001f; valaddr_reg:x3; val_offset:26061*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26061*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00003f; valaddr_reg:x3; val_offset:26064*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26064*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00007f; valaddr_reg:x3; val_offset:26067*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26067*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0000ff; valaddr_reg:x3; val_offset:26070*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26070*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0001ff; valaddr_reg:x3; val_offset:26073*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26073*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0003ff; valaddr_reg:x3; val_offset:26076*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26076*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0007ff; valaddr_reg:x3; val_offset:26079*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26079*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c000fff; valaddr_reg:x3; val_offset:26082*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26082*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c001fff; valaddr_reg:x3; val_offset:26085*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26085*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c003fff; valaddr_reg:x3; val_offset:26088*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26088*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c007fff; valaddr_reg:x3; val_offset:26091*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26091*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c00ffff; valaddr_reg:x3; val_offset:26094*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26094*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c01ffff; valaddr_reg:x3; val_offset:26097*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26097*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c03ffff; valaddr_reg:x3; val_offset:26100*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26100*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c07ffff; valaddr_reg:x3; val_offset:26103*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26103*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c0fffff; valaddr_reg:x3; val_offset:26106*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26106*0 + 3*67*FLEN/8, x4, x1, x2)

inst_8703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x440187 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x272db7 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e440187; op2val:0xa72db7;
op3val:0x3c1fffff; valaddr_reg:x3; val_offset:26109*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26109*0 + 3*67*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118295157,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296256,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296257,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296259,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296263,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296271,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296287,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296319,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296383,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296511,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107296767,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107297279,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107298303,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107300351,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107304447,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107312639,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107329023,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107361791,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107427327,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107558399,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1107820543,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1108344831,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1109393407,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1111490559,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1111490560,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1113587712,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1114636288,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115160576,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115422720,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115553792,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115619328,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115652096,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115668480,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115676672,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115680768,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115682816,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115683840,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684352,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684608,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684736,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684800,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684832,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684848,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684856,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684860,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684862,32,FLEN)
NAN_BOXED(2118297573,32,FLEN)
NAN_BOXED(11032207,32,FLEN)
NAN_BOXED(1115684863,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632960,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632961,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632963,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632967,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632975,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006632991,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633023,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633087,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633215,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633471,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006633983,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006635007,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006637055,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006641151,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006649343,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006665727,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006698495,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006764031,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1006895103,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1007157247,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1007681535,32,FLEN)
NAN_BOXED(2118386055,32,FLEN)
NAN_BOXED(10956215,32,FLEN)
NAN_BOXED(1008730111,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
