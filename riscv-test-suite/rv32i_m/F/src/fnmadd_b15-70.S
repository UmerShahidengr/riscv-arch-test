
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:26496*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26496*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:26499*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26499*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:26502*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26502*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:26505*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26505*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:26508*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26508*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:26511*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26511*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:26514*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26514*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:26517*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26517*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:26520*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26520*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:26523*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26523*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:26526*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26526*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:26529*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26529*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:26532*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26532*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:26535*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26535*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:26538*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26538*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:26541*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26541*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:26544*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26544*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:26547*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26547*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:26550*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26550*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:26553*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26553*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:26556*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26556*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:26559*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26559*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:26562*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26562*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:26565*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26565*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:26568*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26568*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:26571*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26571*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:26574*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26574*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:26577*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26577*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:26580*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26580*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:26583*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26583*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:26586*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26586*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:26589*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26589*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:26592*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26592*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:26595*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26595*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:26598*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26598*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x461ec9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e461ec9; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:26601*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26601*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800001; valaddr_reg:x3; val_offset:26604*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26604*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800003; valaddr_reg:x3; val_offset:26607*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26607*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f800007; valaddr_reg:x3; val_offset:26610*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26610*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3f999999; valaddr_reg:x3; val_offset:26613*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26613*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:26616*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26616*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:26619*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26619*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:26622*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26622*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:26625*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26625*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:26628*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26628*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:26631*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26631*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:26634*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26634*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:26637*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26637*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:26640*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26640*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:26643*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26643*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:26646*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26646*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:26649*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26649*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800000; valaddr_reg:x3; val_offset:26652*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26652*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800001; valaddr_reg:x3; val_offset:26655*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26655*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800003; valaddr_reg:x3; val_offset:26658*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26658*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800007; valaddr_reg:x3; val_offset:26661*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26661*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180000f; valaddr_reg:x3; val_offset:26664*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26664*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180001f; valaddr_reg:x3; val_offset:26667*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26667*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180003f; valaddr_reg:x3; val_offset:26670*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26670*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180007f; valaddr_reg:x3; val_offset:26673*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26673*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418000ff; valaddr_reg:x3; val_offset:26676*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26676*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418001ff; valaddr_reg:x3; val_offset:26679*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26679*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418003ff; valaddr_reg:x3; val_offset:26682*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26682*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418007ff; valaddr_reg:x3; val_offset:26685*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26685*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41800fff; valaddr_reg:x3; val_offset:26688*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26688*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41801fff; valaddr_reg:x3; val_offset:26691*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26691*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41803fff; valaddr_reg:x3; val_offset:26694*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26694*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41807fff; valaddr_reg:x3; val_offset:26697*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26697*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4180ffff; valaddr_reg:x3; val_offset:26700*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26700*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4181ffff; valaddr_reg:x3; val_offset:26703*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26703*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4183ffff; valaddr_reg:x3; val_offset:26706*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26706*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x4187ffff; valaddr_reg:x3; val_offset:26709*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26709*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x418fffff; valaddr_reg:x3; val_offset:26712*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26712*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x419fffff; valaddr_reg:x3; val_offset:26715*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26715*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41bfffff; valaddr_reg:x3; val_offset:26718*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26718*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41c00000; valaddr_reg:x3; val_offset:26721*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26721*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41e00000; valaddr_reg:x3; val_offset:26724*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26724*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41f00000; valaddr_reg:x3; val_offset:26727*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26727*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41f80000; valaddr_reg:x3; val_offset:26730*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26730*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fc0000; valaddr_reg:x3; val_offset:26733*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26733*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fe0000; valaddr_reg:x3; val_offset:26736*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26736*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ff0000; valaddr_reg:x3; val_offset:26739*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26739*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ff8000; valaddr_reg:x3; val_offset:26742*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26742*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffc000; valaddr_reg:x3; val_offset:26745*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26745*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffe000; valaddr_reg:x3; val_offset:26748*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26748*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fff000; valaddr_reg:x3; val_offset:26751*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26751*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fff800; valaddr_reg:x3; val_offset:26754*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26754*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffc00; valaddr_reg:x3; val_offset:26757*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26757*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffe00; valaddr_reg:x3; val_offset:26760*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26760*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffff00; valaddr_reg:x3; val_offset:26763*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26763*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffff80; valaddr_reg:x3; val_offset:26766*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26766*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffc0; valaddr_reg:x3; val_offset:26769*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26769*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffe0; valaddr_reg:x3; val_offset:26772*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26772*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffff0; valaddr_reg:x3; val_offset:26775*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26775*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffff8; valaddr_reg:x3; val_offset:26778*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26778*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffffc; valaddr_reg:x3; val_offset:26781*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26781*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41fffffe; valaddr_reg:x3; val_offset:26784*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26784*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x467799 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x251af9 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e467799; op2val:0xa51af9;
op3val:0x41ffffff; valaddr_reg:x3; val_offset:26787*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26787*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800000; valaddr_reg:x3; val_offset:26790*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26790*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800001; valaddr_reg:x3; val_offset:26793*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26793*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800003; valaddr_reg:x3; val_offset:26796*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26796*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800007; valaddr_reg:x3; val_offset:26799*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26799*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180000f; valaddr_reg:x3; val_offset:26802*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26802*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180001f; valaddr_reg:x3; val_offset:26805*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26805*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180003f; valaddr_reg:x3; val_offset:26808*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26808*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180007f; valaddr_reg:x3; val_offset:26811*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26811*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18000ff; valaddr_reg:x3; val_offset:26814*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26814*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18001ff; valaddr_reg:x3; val_offset:26817*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26817*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18003ff; valaddr_reg:x3; val_offset:26820*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26820*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18007ff; valaddr_reg:x3; val_offset:26823*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26823*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1800fff; valaddr_reg:x3; val_offset:26826*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26826*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1801fff; valaddr_reg:x3; val_offset:26829*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26829*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1803fff; valaddr_reg:x3; val_offset:26832*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26832*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1807fff; valaddr_reg:x3; val_offset:26835*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26835*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf180ffff; valaddr_reg:x3; val_offset:26838*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26838*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf181ffff; valaddr_reg:x3; val_offset:26841*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26841*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf183ffff; valaddr_reg:x3; val_offset:26844*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26844*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf187ffff; valaddr_reg:x3; val_offset:26847*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26847*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf18fffff; valaddr_reg:x3; val_offset:26850*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26850*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf19fffff; valaddr_reg:x3; val_offset:26853*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26853*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1bfffff; valaddr_reg:x3; val_offset:26856*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26856*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1c00000; valaddr_reg:x3; val_offset:26859*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26859*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1e00000; valaddr_reg:x3; val_offset:26862*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26862*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1f00000; valaddr_reg:x3; val_offset:26865*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26865*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1f80000; valaddr_reg:x3; val_offset:26868*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26868*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fc0000; valaddr_reg:x3; val_offset:26871*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26871*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fe0000; valaddr_reg:x3; val_offset:26874*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26874*0 + 3*69*FLEN/8, x4, x1, x2)

inst_8959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ff0000; valaddr_reg:x3; val_offset:26877*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26877*0 + 3*69*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2118524617,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907648,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907649,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907651,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907655,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907663,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907679,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907711,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907775,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098907903,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098908159,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098908671,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098909695,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098911743,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098915839,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098924031,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098940415,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1098973183,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099038719,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099169791,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099431935,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1099956223,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1101004799,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1103101951,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1103101952,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1105199104,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1106247680,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1106771968,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107034112,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107165184,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107230720,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107263488,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107279872,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107288064,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107292160,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107294208,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107295232,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107295744,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296000,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296128,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296192,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296224,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296240,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296248,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296252,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296254,32,FLEN)
NAN_BOXED(2118547353,32,FLEN)
NAN_BOXED(10820345,32,FLEN)
NAN_BOXED(1107296255,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697664,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697665,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697667,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697671,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697679,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697695,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697727,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697791,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051697919,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051698175,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051698687,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051699711,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051701759,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051705855,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051714047,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051730431,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051763199,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051828735,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4051959807,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4052221951,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4052746239,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4053794815,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4055891967,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4055891968,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4057989120,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059037696,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059561984,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059824128,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4059955200,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060020736,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
