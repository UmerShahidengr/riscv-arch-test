
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_8960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ff8000; valaddr_reg:x3; val_offset:26880*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26880*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffc000; valaddr_reg:x3; val_offset:26883*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26883*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffe000; valaddr_reg:x3; val_offset:26886*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26886*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fff000; valaddr_reg:x3; val_offset:26889*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26889*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fff800; valaddr_reg:x3; val_offset:26892*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26892*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffc00; valaddr_reg:x3; val_offset:26895*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26895*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffe00; valaddr_reg:x3; val_offset:26898*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26898*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffff00; valaddr_reg:x3; val_offset:26901*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26901*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffff80; valaddr_reg:x3; val_offset:26904*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26904*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffc0; valaddr_reg:x3; val_offset:26907*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26907*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffe0; valaddr_reg:x3; val_offset:26910*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26910*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffff0; valaddr_reg:x3; val_offset:26913*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26913*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffff8; valaddr_reg:x3; val_offset:26916*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26916*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffffc; valaddr_reg:x3; val_offset:26919*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26919*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1fffffe; valaddr_reg:x3; val_offset:26922*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26922*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xf1ffffff; valaddr_reg:x3; val_offset:26925*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26925*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000001; valaddr_reg:x3; val_offset:26928*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26928*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000003; valaddr_reg:x3; val_offset:26931*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26931*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff000007; valaddr_reg:x3; val_offset:26934*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26934*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff199999; valaddr_reg:x3; val_offset:26937*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26937*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff249249; valaddr_reg:x3; val_offset:26940*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26940*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff333333; valaddr_reg:x3; val_offset:26943*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26943*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:26946*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26946*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:26949*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26949*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff444444; valaddr_reg:x3; val_offset:26952*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26952*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:26955*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26955*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:26958*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26958*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff666666; valaddr_reg:x3; val_offset:26961*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26961*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:26964*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26964*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:26967*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26967*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:26970*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26970*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46bbc4 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x24e257 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46bbc4; op2val:0xc0a4e257;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:26973*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26973*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:26976*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26976*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:26979*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26979*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:26982*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26982*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:26985*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26985*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:26988*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26988*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:26991*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26991*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:26994*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26994*0 + 3*70*FLEN/8, x4, x1, x2)

inst_8999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:26997*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 26997*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:27000*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27000*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:27003*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27003*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:27006*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27006*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:27009*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27009*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:27012*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27012*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:27015*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27015*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:27018*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27018*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:27021*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27021*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000000; valaddr_reg:x3; val_offset:27024*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27024*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000001; valaddr_reg:x3; val_offset:27027*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27027*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000003; valaddr_reg:x3; val_offset:27030*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27030*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000007; valaddr_reg:x3; val_offset:27033*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27033*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00000f; valaddr_reg:x3; val_offset:27036*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27036*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00001f; valaddr_reg:x3; val_offset:27039*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27039*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00003f; valaddr_reg:x3; val_offset:27042*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27042*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:27045*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27045*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:27048*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27048*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:27051*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27051*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:27054*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27054*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:27057*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27057*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:27060*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27060*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:27063*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27063*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:27066*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27066*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:27069*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27069*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:27072*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27072*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:27075*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27075*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:27078*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27078*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:27081*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27081*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:27084*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27084*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:27087*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27087*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:27090*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27090*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:27093*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27093*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:27096*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27096*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:27099*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27099*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:27102*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27102*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:27105*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27105*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:27108*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27108*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:27111*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27111*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:27114*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27114*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:27117*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27117*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:27120*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27120*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:27123*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27123*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:27126*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27126*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:27129*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27129*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:27132*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27132*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:27135*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27135*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:27138*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27138*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:27141*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27141*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:27144*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27144*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:27147*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27147*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:27150*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27150*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:27153*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27153*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:27156*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27156*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46fa60 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46fa60; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:27159*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27159*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800000; valaddr_reg:x3; val_offset:27162*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27162*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800001; valaddr_reg:x3; val_offset:27165*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27165*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800003; valaddr_reg:x3; val_offset:27168*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27168*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800007; valaddr_reg:x3; val_offset:27171*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27171*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80000f; valaddr_reg:x3; val_offset:27174*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27174*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80001f; valaddr_reg:x3; val_offset:27177*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27177*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80003f; valaddr_reg:x3; val_offset:27180*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27180*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80007f; valaddr_reg:x3; val_offset:27183*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27183*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8000ff; valaddr_reg:x3; val_offset:27186*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27186*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8001ff; valaddr_reg:x3; val_offset:27189*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27189*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8003ff; valaddr_reg:x3; val_offset:27192*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27192*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8007ff; valaddr_reg:x3; val_offset:27195*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27195*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde800fff; valaddr_reg:x3; val_offset:27198*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27198*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde801fff; valaddr_reg:x3; val_offset:27201*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27201*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde803fff; valaddr_reg:x3; val_offset:27204*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27204*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde807fff; valaddr_reg:x3; val_offset:27207*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27207*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde80ffff; valaddr_reg:x3; val_offset:27210*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27210*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde81ffff; valaddr_reg:x3; val_offset:27213*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27213*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde83ffff; valaddr_reg:x3; val_offset:27216*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27216*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde87ffff; valaddr_reg:x3; val_offset:27219*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27219*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde8fffff; valaddr_reg:x3; val_offset:27222*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27222*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xde9fffff; valaddr_reg:x3; val_offset:27225*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27225*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdebfffff; valaddr_reg:x3; val_offset:27228*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27228*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdec00000; valaddr_reg:x3; val_offset:27231*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27231*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdee00000; valaddr_reg:x3; val_offset:27234*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27234*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef00000; valaddr_reg:x3; val_offset:27237*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27237*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdef80000; valaddr_reg:x3; val_offset:27240*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27240*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefc0000; valaddr_reg:x3; val_offset:27243*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27243*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefe0000; valaddr_reg:x3; val_offset:27246*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27246*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff0000; valaddr_reg:x3; val_offset:27249*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27249*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeff8000; valaddr_reg:x3; val_offset:27252*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27252*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffc000; valaddr_reg:x3; val_offset:27255*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27255*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffe000; valaddr_reg:x3; val_offset:27258*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27258*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff000; valaddr_reg:x3; val_offset:27261*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27261*0 + 3*70*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060053504,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060069888,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060078080,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060082176,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060084224,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060085248,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060085760,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086016,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086144,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086208,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086240,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086256,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086264,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086268,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086270,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4060086271,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118564804,32,FLEN)
NAN_BOXED(3232031319,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549376,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549377,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549379,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549383,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549391,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549407,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549439,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192929792,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192933888,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192935936,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192936960,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937472,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937728,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937856,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937920,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937952,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937968,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937976,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937980,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937982,32,FLEN)
NAN_BOXED(2118580832,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937983,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930560,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930561,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930563,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930567,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930575,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930591,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930623,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930687,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732930815,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931071,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732931583,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732932607,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732934655,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732938751,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732946943,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732963327,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3732996095,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733061631,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733192703,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733454847,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3733979135,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3735027711,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124863,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3737124864,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3739222016,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740270592,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3740794880,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741057024,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741188096,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741253632,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741286400,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741302784,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741310976,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741315072,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
