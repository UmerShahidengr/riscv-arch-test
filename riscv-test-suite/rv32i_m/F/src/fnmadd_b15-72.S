
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefff800; valaddr_reg:x3; val_offset:27264*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27264*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffc00; valaddr_reg:x3; val_offset:27267*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27267*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffe00; valaddr_reg:x3; val_offset:27270*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27270*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff00; valaddr_reg:x3; val_offset:27273*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27273*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffff80; valaddr_reg:x3; val_offset:27276*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27276*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffc0; valaddr_reg:x3; val_offset:27279*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27279*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffe0; valaddr_reg:x3; val_offset:27282*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27282*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff0; valaddr_reg:x3; val_offset:27285*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27285*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffff8; valaddr_reg:x3; val_offset:27288*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27288*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffc; valaddr_reg:x3; val_offset:27291*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27291*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdefffffe; valaddr_reg:x3; val_offset:27294*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27294*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xdeffffff; valaddr_reg:x3; val_offset:27297*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27297*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000001; valaddr_reg:x3; val_offset:27300*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27300*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000003; valaddr_reg:x3; val_offset:27303*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27303*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff000007; valaddr_reg:x3; val_offset:27306*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27306*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff199999; valaddr_reg:x3; val_offset:27309*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27309*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff249249; valaddr_reg:x3; val_offset:27312*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27312*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff333333; valaddr_reg:x3; val_offset:27315*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27315*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:27318*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27318*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:27321*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27321*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff444444; valaddr_reg:x3; val_offset:27324*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27324*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:27327*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27327*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:27330*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27330*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff666666; valaddr_reg:x3; val_offset:27333*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27333*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:27336*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27336*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:27339*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27339*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:27342*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27342*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x472e73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x248367 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e472e73; op2val:0xc0a48367;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:27345*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27345*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000000; valaddr_reg:x3; val_offset:27348*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27348*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000001; valaddr_reg:x3; val_offset:27351*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27351*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000003; valaddr_reg:x3; val_offset:27354*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27354*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000007; valaddr_reg:x3; val_offset:27357*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27357*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000000f; valaddr_reg:x3; val_offset:27360*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27360*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000001f; valaddr_reg:x3; val_offset:27363*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27363*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000003f; valaddr_reg:x3; val_offset:27366*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27366*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000007f; valaddr_reg:x3; val_offset:27369*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27369*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00000ff; valaddr_reg:x3; val_offset:27372*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27372*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00001ff; valaddr_reg:x3; val_offset:27375*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27375*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00003ff; valaddr_reg:x3; val_offset:27378*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27378*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00007ff; valaddr_reg:x3; val_offset:27381*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27381*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0000fff; valaddr_reg:x3; val_offset:27384*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27384*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0001fff; valaddr_reg:x3; val_offset:27387*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27387*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0003fff; valaddr_reg:x3; val_offset:27390*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27390*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0007fff; valaddr_reg:x3; val_offset:27393*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27393*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf000ffff; valaddr_reg:x3; val_offset:27396*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27396*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf001ffff; valaddr_reg:x3; val_offset:27399*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27399*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf003ffff; valaddr_reg:x3; val_offset:27402*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27402*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf007ffff; valaddr_reg:x3; val_offset:27405*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27405*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf00fffff; valaddr_reg:x3; val_offset:27408*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27408*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf01fffff; valaddr_reg:x3; val_offset:27411*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27411*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf03fffff; valaddr_reg:x3; val_offset:27414*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27414*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0400000; valaddr_reg:x3; val_offset:27417*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27417*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0600000; valaddr_reg:x3; val_offset:27420*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27420*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0700000; valaddr_reg:x3; val_offset:27423*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27423*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf0780000; valaddr_reg:x3; val_offset:27426*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27426*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07c0000; valaddr_reg:x3; val_offset:27429*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27429*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07e0000; valaddr_reg:x3; val_offset:27432*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27432*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07f0000; valaddr_reg:x3; val_offset:27435*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27435*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07f8000; valaddr_reg:x3; val_offset:27438*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27438*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fc000; valaddr_reg:x3; val_offset:27441*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27441*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fe000; valaddr_reg:x3; val_offset:27444*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27444*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ff000; valaddr_reg:x3; val_offset:27447*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27447*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ff800; valaddr_reg:x3; val_offset:27450*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27450*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffc00; valaddr_reg:x3; val_offset:27453*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27453*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffe00; valaddr_reg:x3; val_offset:27456*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27456*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fff00; valaddr_reg:x3; val_offset:27459*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27459*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fff80; valaddr_reg:x3; val_offset:27462*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27462*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffc0; valaddr_reg:x3; val_offset:27465*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27465*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffe0; valaddr_reg:x3; val_offset:27468*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27468*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffff0; valaddr_reg:x3; val_offset:27471*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27471*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffff8; valaddr_reg:x3; val_offset:27474*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27474*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffffc; valaddr_reg:x3; val_offset:27477*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27477*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07ffffe; valaddr_reg:x3; val_offset:27480*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27480*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xf07fffff; valaddr_reg:x3; val_offset:27483*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27483*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000001; valaddr_reg:x3; val_offset:27486*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27486*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000003; valaddr_reg:x3; val_offset:27489*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27489*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff000007; valaddr_reg:x3; val_offset:27492*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27492*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff199999; valaddr_reg:x3; val_offset:27495*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27495*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff249249; valaddr_reg:x3; val_offset:27498*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27498*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff333333; valaddr_reg:x3; val_offset:27501*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27501*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:27504*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27504*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:27507*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27507*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff444444; valaddr_reg:x3; val_offset:27510*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27510*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:27513*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27513*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:27516*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27516*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff666666; valaddr_reg:x3; val_offset:27519*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27519*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:27522*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27522*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:27525*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27525*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:27528*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27528*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x475011 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2467a8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e475011; op2val:0xc0a467a8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:27531*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27531*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:27534*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27534*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:27537*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27537*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:27540*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27540*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:27543*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27543*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:27546*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27546*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:27549*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27549*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:27552*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27552*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:27555*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27555*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:27558*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27558*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:27561*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27561*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:27564*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27564*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:27567*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27567*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:27570*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27570*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:27573*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27573*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:27576*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27576*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:27579*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27579*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:27582*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27582*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:27585*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27585*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:27588*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27588*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:27591*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27591*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:27594*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27594*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:27597*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27597*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:27600*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27600*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:27603*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27603*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:27606*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27606*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:27609*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27609*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:27612*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27612*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:27615*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27615*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:27618*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27618*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:27621*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27621*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:27624*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27624*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:27627*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27627*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:27630*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27630*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:27633*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27633*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:27636*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27636*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:27639*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27639*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:27642*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27642*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x47fc16 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e47fc16; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:27645*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27645*0 + 3*71*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741317120,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318144,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318656,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741318912,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319040,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319104,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319136,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319152,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319160,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319164,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319166,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(3741319167,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118594163,32,FLEN)
NAN_BOXED(3232007015,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531840,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531841,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531843,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531847,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531855,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531871,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531903,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026531967,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532095,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532351,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026532863,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026533887,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026535935,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026540031,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026548223,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026564607,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026597375,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026662911,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4026793983,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4027056127,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4027580415,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4028628991,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4030726143,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4030726144,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4032823296,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4033871872,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034396160,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034658304,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034789376,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034854912,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034887680,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034904064,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034912256,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034916352,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034918400,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034919424,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034919936,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920192,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920320,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920384,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920416,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920432,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920440,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920444,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920446,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4034920447,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2118602769,32,FLEN)
NAN_BOXED(3231999912,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2118646806,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
