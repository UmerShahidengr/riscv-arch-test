
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:28032*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28032*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:28035*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28035*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:28038*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28038*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:28041*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28041*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:28044*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28044*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:28047*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28047*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:28050*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28050*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:28053*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28053*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:28056*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28056*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:28059*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28059*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:28062*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28062*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:28065*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28065*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:28068*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28068*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:28071*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28071*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:28074*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28074*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:28077*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28077*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:28080*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28080*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:28083*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28083*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:28086*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28086*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4c8ab7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4c8ab7; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:28089*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28089*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0000000; valaddr_reg:x3; val_offset:28092*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28092*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0000001; valaddr_reg:x3; val_offset:28095*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28095*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0000003; valaddr_reg:x3; val_offset:28098*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28098*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0000007; valaddr_reg:x3; val_offset:28101*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28101*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb000000f; valaddr_reg:x3; val_offset:28104*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28104*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb000001f; valaddr_reg:x3; val_offset:28107*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28107*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb000003f; valaddr_reg:x3; val_offset:28110*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28110*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb000007f; valaddr_reg:x3; val_offset:28113*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28113*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb00000ff; valaddr_reg:x3; val_offset:28116*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28116*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb00001ff; valaddr_reg:x3; val_offset:28119*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28119*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb00003ff; valaddr_reg:x3; val_offset:28122*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28122*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb00007ff; valaddr_reg:x3; val_offset:28125*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28125*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0000fff; valaddr_reg:x3; val_offset:28128*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28128*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0001fff; valaddr_reg:x3; val_offset:28131*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28131*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0003fff; valaddr_reg:x3; val_offset:28134*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28134*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0007fff; valaddr_reg:x3; val_offset:28137*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28137*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb000ffff; valaddr_reg:x3; val_offset:28140*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28140*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb001ffff; valaddr_reg:x3; val_offset:28143*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28143*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb003ffff; valaddr_reg:x3; val_offset:28146*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28146*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb007ffff; valaddr_reg:x3; val_offset:28149*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28149*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb00fffff; valaddr_reg:x3; val_offset:28152*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28152*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb01fffff; valaddr_reg:x3; val_offset:28155*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28155*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb03fffff; valaddr_reg:x3; val_offset:28158*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28158*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0400000; valaddr_reg:x3; val_offset:28161*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28161*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0600000; valaddr_reg:x3; val_offset:28164*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28164*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0700000; valaddr_reg:x3; val_offset:28167*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28167*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb0780000; valaddr_reg:x3; val_offset:28170*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28170*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07c0000; valaddr_reg:x3; val_offset:28173*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28173*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07e0000; valaddr_reg:x3; val_offset:28176*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28176*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07f0000; valaddr_reg:x3; val_offset:28179*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28179*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07f8000; valaddr_reg:x3; val_offset:28182*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28182*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fc000; valaddr_reg:x3; val_offset:28185*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28185*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fe000; valaddr_reg:x3; val_offset:28188*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28188*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ff000; valaddr_reg:x3; val_offset:28191*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28191*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ff800; valaddr_reg:x3; val_offset:28194*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28194*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffc00; valaddr_reg:x3; val_offset:28197*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28197*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffe00; valaddr_reg:x3; val_offset:28200*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28200*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fff00; valaddr_reg:x3; val_offset:28203*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28203*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fff80; valaddr_reg:x3; val_offset:28206*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28206*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fffc0; valaddr_reg:x3; val_offset:28209*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28209*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fffe0; valaddr_reg:x3; val_offset:28212*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28212*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffff0; valaddr_reg:x3; val_offset:28215*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28215*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffff8; valaddr_reg:x3; val_offset:28218*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28218*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffffc; valaddr_reg:x3; val_offset:28221*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28221*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07ffffe; valaddr_reg:x3; val_offset:28224*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28224*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x60 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xb07fffff; valaddr_reg:x3; val_offset:28227*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28227*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:28230*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28230*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:28233*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28233*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:28236*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28236*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:28239*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28239*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:28242*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28242*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:28245*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28245*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:28248*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28248*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:28251*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28251*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:28254*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28254*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:28257*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28257*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:28260*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28260*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:28263*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28263*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:28266*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28266*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:28269*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28269*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:28272*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28272*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4cb2ff and fs2 == 1 and fe2 == 0x01 and fm2 == 0x20142a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4cb2ff; op2val:0x80a0142a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:28275*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28275*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:28278*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28278*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:28281*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28281*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:28284*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28284*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:28287*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28287*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:28290*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28290*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:28293*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28293*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:28296*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28296*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:28299*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28299*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:28302*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28302*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:28305*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28305*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:28308*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28308*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:28311*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28311*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:28314*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28314*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:28317*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28317*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:28320*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28320*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:28323*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28323*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:28326*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28326*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa000001; valaddr_reg:x3; val_offset:28329*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28329*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa000003; valaddr_reg:x3; val_offset:28332*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28332*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa000007; valaddr_reg:x3; val_offset:28335*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28335*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa00000f; valaddr_reg:x3; val_offset:28338*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28338*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa00001f; valaddr_reg:x3; val_offset:28341*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28341*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa00003f; valaddr_reg:x3; val_offset:28344*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28344*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa00007f; valaddr_reg:x3; val_offset:28347*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28347*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa0000ff; valaddr_reg:x3; val_offset:28350*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28350*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa0001ff; valaddr_reg:x3; val_offset:28353*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28353*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa0003ff; valaddr_reg:x3; val_offset:28356*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28356*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa0007ff; valaddr_reg:x3; val_offset:28359*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28359*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa000fff; valaddr_reg:x3; val_offset:28362*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28362*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa001fff; valaddr_reg:x3; val_offset:28365*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28365*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa003fff; valaddr_reg:x3; val_offset:28368*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28368*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa007fff; valaddr_reg:x3; val_offset:28371*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28371*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa00ffff; valaddr_reg:x3; val_offset:28374*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28374*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa01ffff; valaddr_reg:x3; val_offset:28377*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28377*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa03ffff; valaddr_reg:x3; val_offset:28380*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28380*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa07ffff; valaddr_reg:x3; val_offset:28383*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28383*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa0fffff; valaddr_reg:x3; val_offset:28386*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28386*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa1fffff; valaddr_reg:x3; val_offset:28389*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28389*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:28392*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28392*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:28395*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28395*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:28398*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28398*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:28401*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28401*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:28404*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28404*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:28407*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28407*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:28410*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28410*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4d75cc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4d75cc; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:28413*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28413*0 + 3*73*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2118945463,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790016,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790017,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790019,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790023,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790031,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790047,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790079,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790143,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790271,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952790527,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952791039,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952792063,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952794111,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952798207,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952806399,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952822783,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952855551,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2952921087,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2953052159,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2953314303,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2953838591,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2954887167,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2956984319,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2956984320,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2959081472,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2960130048,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2960654336,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2960916480,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961047552,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961113088,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961145856,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961162240,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961170432,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961174528,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961176576,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961177600,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178112,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178368,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178496,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178560,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178592,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178608,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178616,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178620,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178622,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(2961178623,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2118955775,32,FLEN)
NAN_BOXED(2157974570,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772161,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772163,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772167,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772175,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772191,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772223,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772287,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772415,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772671,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167773183,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167774207,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167776255,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167780351,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167788543,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167804927,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167837695,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167903231,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168034303,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168296447,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168820735,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(169869311,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2119005644,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
