
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ff800; valaddr_reg:x3; val_offset:28800*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28800*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffc00; valaddr_reg:x3; val_offset:28803*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28803*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffe00; valaddr_reg:x3; val_offset:28806*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28806*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867fff00; valaddr_reg:x3; val_offset:28809*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28809*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867fff80; valaddr_reg:x3; val_offset:28812*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28812*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867fffc0; valaddr_reg:x3; val_offset:28815*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28815*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867fffe0; valaddr_reg:x3; val_offset:28818*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28818*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffff0; valaddr_reg:x3; val_offset:28821*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28821*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffff8; valaddr_reg:x3; val_offset:28824*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28824*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffffc; valaddr_reg:x3; val_offset:28827*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28827*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867ffffe; valaddr_reg:x3; val_offset:28830*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28830*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ddf7d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ddf7d; op2val:0x80000000;
op3val:0x867fffff; valaddr_reg:x3; val_offset:28833*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28833*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39800000; valaddr_reg:x3; val_offset:28836*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28836*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39800001; valaddr_reg:x3; val_offset:28839*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28839*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39800003; valaddr_reg:x3; val_offset:28842*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28842*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39800007; valaddr_reg:x3; val_offset:28845*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28845*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3980000f; valaddr_reg:x3; val_offset:28848*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28848*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3980001f; valaddr_reg:x3; val_offset:28851*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28851*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3980003f; valaddr_reg:x3; val_offset:28854*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28854*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3980007f; valaddr_reg:x3; val_offset:28857*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28857*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x398000ff; valaddr_reg:x3; val_offset:28860*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28860*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x398001ff; valaddr_reg:x3; val_offset:28863*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28863*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x398003ff; valaddr_reg:x3; val_offset:28866*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28866*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x398007ff; valaddr_reg:x3; val_offset:28869*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28869*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39800fff; valaddr_reg:x3; val_offset:28872*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28872*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39801fff; valaddr_reg:x3; val_offset:28875*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28875*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39803fff; valaddr_reg:x3; val_offset:28878*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28878*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39807fff; valaddr_reg:x3; val_offset:28881*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28881*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3980ffff; valaddr_reg:x3; val_offset:28884*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28884*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3981ffff; valaddr_reg:x3; val_offset:28887*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28887*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3983ffff; valaddr_reg:x3; val_offset:28890*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28890*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3987ffff; valaddr_reg:x3; val_offset:28893*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28893*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x398fffff; valaddr_reg:x3; val_offset:28896*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28896*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x399fffff; valaddr_reg:x3; val_offset:28899*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28899*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39bfffff; valaddr_reg:x3; val_offset:28902*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28902*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39c00000; valaddr_reg:x3; val_offset:28905*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28905*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39e00000; valaddr_reg:x3; val_offset:28908*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28908*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39f00000; valaddr_reg:x3; val_offset:28911*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28911*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39f80000; valaddr_reg:x3; val_offset:28914*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28914*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fc0000; valaddr_reg:x3; val_offset:28917*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28917*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fe0000; valaddr_reg:x3; val_offset:28920*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28920*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ff0000; valaddr_reg:x3; val_offset:28923*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28923*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ff8000; valaddr_reg:x3; val_offset:28926*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28926*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffc000; valaddr_reg:x3; val_offset:28929*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28929*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffe000; valaddr_reg:x3; val_offset:28932*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28932*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fff000; valaddr_reg:x3; val_offset:28935*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28935*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fff800; valaddr_reg:x3; val_offset:28938*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28938*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffc00; valaddr_reg:x3; val_offset:28941*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28941*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffe00; valaddr_reg:x3; val_offset:28944*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28944*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffff00; valaddr_reg:x3; val_offset:28947*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28947*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffff80; valaddr_reg:x3; val_offset:28950*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28950*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffffc0; valaddr_reg:x3; val_offset:28953*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28953*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffffe0; valaddr_reg:x3; val_offset:28956*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28956*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffff0; valaddr_reg:x3; val_offset:28959*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28959*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffff8; valaddr_reg:x3; val_offset:28962*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28962*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffffc; valaddr_reg:x3; val_offset:28965*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28965*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39fffffe; valaddr_reg:x3; val_offset:28968*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28968*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x73 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x39ffffff; valaddr_reg:x3; val_offset:28971*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28971*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3f800001; valaddr_reg:x3; val_offset:28974*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28974*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3f800003; valaddr_reg:x3; val_offset:28977*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28977*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3f800007; valaddr_reg:x3; val_offset:28980*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28980*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3f999999; valaddr_reg:x3; val_offset:28983*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28983*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:28986*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28986*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:28989*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28989*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:28992*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28992*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:28995*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28995*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:28998*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28998*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:29001*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29001*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:29004*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29004*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:29007*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29007*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:29010*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29010*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:29013*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29013*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:29016*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29016*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4e511c and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1ed2dc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4e511c; op2val:0x9ed2dc;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:29019*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29019*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6800000; valaddr_reg:x3; val_offset:29022*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29022*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6800001; valaddr_reg:x3; val_offset:29025*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29025*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6800003; valaddr_reg:x3; val_offset:29028*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29028*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6800007; valaddr_reg:x3; val_offset:29031*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29031*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf680000f; valaddr_reg:x3; val_offset:29034*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29034*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf680001f; valaddr_reg:x3; val_offset:29037*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29037*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf680003f; valaddr_reg:x3; val_offset:29040*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29040*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf680007f; valaddr_reg:x3; val_offset:29043*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29043*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf68000ff; valaddr_reg:x3; val_offset:29046*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29046*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf68001ff; valaddr_reg:x3; val_offset:29049*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29049*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf68003ff; valaddr_reg:x3; val_offset:29052*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29052*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf68007ff; valaddr_reg:x3; val_offset:29055*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29055*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6800fff; valaddr_reg:x3; val_offset:29058*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29058*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6801fff; valaddr_reg:x3; val_offset:29061*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29061*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6803fff; valaddr_reg:x3; val_offset:29064*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29064*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6807fff; valaddr_reg:x3; val_offset:29067*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29067*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf680ffff; valaddr_reg:x3; val_offset:29070*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29070*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf681ffff; valaddr_reg:x3; val_offset:29073*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29073*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf683ffff; valaddr_reg:x3; val_offset:29076*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29076*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf687ffff; valaddr_reg:x3; val_offset:29079*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29079*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf68fffff; valaddr_reg:x3; val_offset:29082*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29082*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf69fffff; valaddr_reg:x3; val_offset:29085*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29085*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6bfffff; valaddr_reg:x3; val_offset:29088*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29088*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6c00000; valaddr_reg:x3; val_offset:29091*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29091*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6e00000; valaddr_reg:x3; val_offset:29094*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29094*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6f00000; valaddr_reg:x3; val_offset:29097*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29097*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6f80000; valaddr_reg:x3; val_offset:29100*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29100*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fc0000; valaddr_reg:x3; val_offset:29103*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29103*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fe0000; valaddr_reg:x3; val_offset:29106*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29106*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ff0000; valaddr_reg:x3; val_offset:29109*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29109*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ff8000; valaddr_reg:x3; val_offset:29112*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29112*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffc000; valaddr_reg:x3; val_offset:29115*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29115*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffe000; valaddr_reg:x3; val_offset:29118*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29118*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fff000; valaddr_reg:x3; val_offset:29121*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29121*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fff800; valaddr_reg:x3; val_offset:29124*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29124*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffc00; valaddr_reg:x3; val_offset:29127*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29127*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffe00; valaddr_reg:x3; val_offset:29130*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29130*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffff00; valaddr_reg:x3; val_offset:29133*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29133*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffff80; valaddr_reg:x3; val_offset:29136*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29136*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffffc0; valaddr_reg:x3; val_offset:29139*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29139*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffffe0; valaddr_reg:x3; val_offset:29142*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29142*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffff0; valaddr_reg:x3; val_offset:29145*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29145*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffff8; valaddr_reg:x3; val_offset:29148*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29148*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffffc; valaddr_reg:x3; val_offset:29151*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29151*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6fffffe; valaddr_reg:x3; val_offset:29154*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29154*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xed and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xf6ffffff; valaddr_reg:x3; val_offset:29157*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29157*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff000001; valaddr_reg:x3; val_offset:29160*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29160*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff000003; valaddr_reg:x3; val_offset:29163*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29163*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff000007; valaddr_reg:x3; val_offset:29166*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29166*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff199999; valaddr_reg:x3; val_offset:29169*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29169*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff249249; valaddr_reg:x3; val_offset:29172*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29172*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff333333; valaddr_reg:x3; val_offset:29175*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29175*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:29178*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29178*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4ea988 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x1e8ee7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4ea988; op2val:0xc09e8ee7;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:29181*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29181*0 + 3*75*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256533504,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256534528,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535040,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535296,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535424,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535488,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535520,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535536,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535544,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535548,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535550,32,FLEN)
NAN_BOXED(2119032701,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535551,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689920,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689921,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689923,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689927,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689935,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689951,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964689983,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964690047,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964690175,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964690431,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964690943,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964691967,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964694015,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964698111,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964706303,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964722687,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964755455,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964820991,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(964952063,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(965214207,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(965738495,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(966787071,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(968884223,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(968884224,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(970981376,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(972029952,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(972554240,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(972816384,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(972947456,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973012992,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973045760,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973062144,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973070336,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973074432,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973076480,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973077504,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078016,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078272,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078400,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078464,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078496,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078512,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078520,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078524,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078526,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(973078527,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2119061788,32,FLEN)
NAN_BOXED(10408668,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583744,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583745,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583747,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583751,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583759,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583775,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583807,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583871,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135583999,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135584255,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135584767,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135585791,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135587839,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135591935,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135600127,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135616511,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135649279,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135714815,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4135845887,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4136108031,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4136632319,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4137680895,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4139778047,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4139778048,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4141875200,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4142923776,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143448064,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143710208,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143841280,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143906816,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143939584,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143955968,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143964160,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143968256,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143970304,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143971328,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143971840,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972096,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972224,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972288,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972320,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972336,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972344,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972348,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972350,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4143972351,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2119084424,32,FLEN)
NAN_BOXED(3231616743,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
