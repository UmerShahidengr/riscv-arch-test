
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:30720*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30720*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:30723*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30723*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86000000; valaddr_reg:x3; val_offset:30726*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30726*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86000001; valaddr_reg:x3; val_offset:30729*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30729*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86000003; valaddr_reg:x3; val_offset:30732*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30732*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86000007; valaddr_reg:x3; val_offset:30735*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30735*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8600000f; valaddr_reg:x3; val_offset:30738*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30738*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8600001f; valaddr_reg:x3; val_offset:30741*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30741*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8600003f; valaddr_reg:x3; val_offset:30744*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30744*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8600007f; valaddr_reg:x3; val_offset:30747*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30747*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x860000ff; valaddr_reg:x3; val_offset:30750*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30750*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x860001ff; valaddr_reg:x3; val_offset:30753*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30753*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x860003ff; valaddr_reg:x3; val_offset:30756*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30756*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x860007ff; valaddr_reg:x3; val_offset:30759*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30759*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86000fff; valaddr_reg:x3; val_offset:30762*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30762*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86001fff; valaddr_reg:x3; val_offset:30765*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30765*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86003fff; valaddr_reg:x3; val_offset:30768*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30768*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86007fff; valaddr_reg:x3; val_offset:30771*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30771*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8600ffff; valaddr_reg:x3; val_offset:30774*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30774*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8601ffff; valaddr_reg:x3; val_offset:30777*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30777*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8603ffff; valaddr_reg:x3; val_offset:30780*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30780*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x8607ffff; valaddr_reg:x3; val_offset:30783*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30783*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x860fffff; valaddr_reg:x3; val_offset:30786*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30786*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x861fffff; valaddr_reg:x3; val_offset:30789*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30789*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x863fffff; valaddr_reg:x3; val_offset:30792*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30792*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86400000; valaddr_reg:x3; val_offset:30795*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30795*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86600000; valaddr_reg:x3; val_offset:30798*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30798*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86700000; valaddr_reg:x3; val_offset:30801*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30801*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x86780000; valaddr_reg:x3; val_offset:30804*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30804*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867c0000; valaddr_reg:x3; val_offset:30807*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30807*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867e0000; valaddr_reg:x3; val_offset:30810*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30810*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867f0000; valaddr_reg:x3; val_offset:30813*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30813*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867f8000; valaddr_reg:x3; val_offset:30816*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30816*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fc000; valaddr_reg:x3; val_offset:30819*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30819*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fe000; valaddr_reg:x3; val_offset:30822*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30822*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ff000; valaddr_reg:x3; val_offset:30825*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30825*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ff800; valaddr_reg:x3; val_offset:30828*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30828*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffc00; valaddr_reg:x3; val_offset:30831*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30831*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffe00; valaddr_reg:x3; val_offset:30834*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30834*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fff00; valaddr_reg:x3; val_offset:30837*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30837*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fff80; valaddr_reg:x3; val_offset:30840*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30840*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fffc0; valaddr_reg:x3; val_offset:30843*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30843*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fffe0; valaddr_reg:x3; val_offset:30846*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30846*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffff0; valaddr_reg:x3; val_offset:30849*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30849*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffff8; valaddr_reg:x3; val_offset:30852*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30852*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffffc; valaddr_reg:x3; val_offset:30855*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30855*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867ffffe; valaddr_reg:x3; val_offset:30858*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30858*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5a3c00 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5a3c00; op2val:0x80000000;
op3val:0x867fffff; valaddr_reg:x3; val_offset:30861*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30861*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b000000; valaddr_reg:x3; val_offset:30864*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30864*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b000001; valaddr_reg:x3; val_offset:30867*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30867*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b000003; valaddr_reg:x3; val_offset:30870*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30870*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b000007; valaddr_reg:x3; val_offset:30873*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30873*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b00000f; valaddr_reg:x3; val_offset:30876*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30876*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b00001f; valaddr_reg:x3; val_offset:30879*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30879*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b00003f; valaddr_reg:x3; val_offset:30882*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30882*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b00007f; valaddr_reg:x3; val_offset:30885*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30885*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b0000ff; valaddr_reg:x3; val_offset:30888*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30888*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b0001ff; valaddr_reg:x3; val_offset:30891*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30891*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b0003ff; valaddr_reg:x3; val_offset:30894*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30894*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b0007ff; valaddr_reg:x3; val_offset:30897*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30897*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b000fff; valaddr_reg:x3; val_offset:30900*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30900*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b001fff; valaddr_reg:x3; val_offset:30903*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30903*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b003fff; valaddr_reg:x3; val_offset:30906*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30906*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b007fff; valaddr_reg:x3; val_offset:30909*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30909*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b00ffff; valaddr_reg:x3; val_offset:30912*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30912*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b01ffff; valaddr_reg:x3; val_offset:30915*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30915*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b03ffff; valaddr_reg:x3; val_offset:30918*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30918*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b07ffff; valaddr_reg:x3; val_offset:30921*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30921*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b0fffff; valaddr_reg:x3; val_offset:30924*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30924*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b1fffff; valaddr_reg:x3; val_offset:30927*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30927*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b3fffff; valaddr_reg:x3; val_offset:30930*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30930*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b400000; valaddr_reg:x3; val_offset:30933*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30933*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b600000; valaddr_reg:x3; val_offset:30936*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30936*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b700000; valaddr_reg:x3; val_offset:30939*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30939*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b780000; valaddr_reg:x3; val_offset:30942*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30942*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7c0000; valaddr_reg:x3; val_offset:30945*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30945*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7e0000; valaddr_reg:x3; val_offset:30948*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30948*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7f0000; valaddr_reg:x3; val_offset:30951*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30951*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7f8000; valaddr_reg:x3; val_offset:30954*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30954*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fc000; valaddr_reg:x3; val_offset:30957*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30957*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fe000; valaddr_reg:x3; val_offset:30960*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30960*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ff000; valaddr_reg:x3; val_offset:30963*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30963*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ff800; valaddr_reg:x3; val_offset:30966*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30966*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffc00; valaddr_reg:x3; val_offset:30969*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30969*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffe00; valaddr_reg:x3; val_offset:30972*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30972*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fff00; valaddr_reg:x3; val_offset:30975*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30975*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fff80; valaddr_reg:x3; val_offset:30978*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30978*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fffc0; valaddr_reg:x3; val_offset:30981*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30981*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fffe0; valaddr_reg:x3; val_offset:30984*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30984*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffff0; valaddr_reg:x3; val_offset:30987*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30987*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffff8; valaddr_reg:x3; val_offset:30990*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30990*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffffc; valaddr_reg:x3; val_offset:30993*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30993*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7ffffe; valaddr_reg:x3; val_offset:30996*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30996*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3b7fffff; valaddr_reg:x3; val_offset:30999*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30999*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:31002*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31002*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:31005*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31005*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:31008*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31008*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:31011*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31011*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:31014*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31014*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:31017*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31017*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:31020*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31020*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:31023*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31023*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:31026*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31026*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:31029*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31029*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:31032*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31032*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:31035*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31035*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:31038*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31038*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:31041*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31041*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:31044*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31044*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef037 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x12fb7a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef037; op2val:0x92fb7a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:31047*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31047*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:31050*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31050*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:31053*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31053*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:31056*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31056*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:31059*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31059*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:31062*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31062*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:31065*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31065*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:31068*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31068*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:31071*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31071*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:31074*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31074*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:31077*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31077*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:31080*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31080*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:31083*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31083*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:31086*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31086*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:31089*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31089*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:31092*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31092*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:31095*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31095*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79000000; valaddr_reg:x3; val_offset:31098*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31098*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79000001; valaddr_reg:x3; val_offset:31101*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31101*0 + 3*80*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146944,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146945,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146947,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146951,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146959,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146975,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147007,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147071,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147199,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147455,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147967,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248148991,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248151039,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248155135,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248163327,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248179711,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248212479,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248278015,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248409087,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248671231,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2249195519,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2250244095,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2252341247,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2252341248,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2254438400,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2255486976,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256011264,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256273408,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256404480,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256470016,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256502784,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256519168,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256527360,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256531456,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256533504,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256534528,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535040,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535296,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535424,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535488,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535520,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535536,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535544,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535548,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535550,32,FLEN)
NAN_BOXED(2119842816,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535551,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855744,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855745,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855747,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855751,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855759,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855775,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855807,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855871,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989855999,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989856255,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989856767,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989857791,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989859839,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989863935,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989872127,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989888511,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989921279,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(989986815,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(990117887,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(990380031,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(990904319,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(991952895,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(994050047,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(994050048,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(996147200,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(997195776,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(997720064,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(997982208,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998113280,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998178816,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998211584,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998227968,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998236160,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998240256,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998242304,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998243328,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998243840,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244096,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244224,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244288,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244320,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244336,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244344,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244348,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244350,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(998244351,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2120151095,32,FLEN)
NAN_BOXED(9632634,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043136,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043137,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
