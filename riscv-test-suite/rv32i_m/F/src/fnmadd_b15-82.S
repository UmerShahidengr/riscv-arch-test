
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79000003; valaddr_reg:x3; val_offset:31104*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31104*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79000007; valaddr_reg:x3; val_offset:31107*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31107*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7900000f; valaddr_reg:x3; val_offset:31110*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31110*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7900001f; valaddr_reg:x3; val_offset:31113*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31113*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7900003f; valaddr_reg:x3; val_offset:31116*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31116*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7900007f; valaddr_reg:x3; val_offset:31119*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31119*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x790000ff; valaddr_reg:x3; val_offset:31122*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31122*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x790001ff; valaddr_reg:x3; val_offset:31125*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31125*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x790003ff; valaddr_reg:x3; val_offset:31128*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31128*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x790007ff; valaddr_reg:x3; val_offset:31131*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31131*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79000fff; valaddr_reg:x3; val_offset:31134*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31134*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79001fff; valaddr_reg:x3; val_offset:31137*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31137*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79003fff; valaddr_reg:x3; val_offset:31140*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31140*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79007fff; valaddr_reg:x3; val_offset:31143*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31143*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7900ffff; valaddr_reg:x3; val_offset:31146*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31146*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7901ffff; valaddr_reg:x3; val_offset:31149*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31149*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7903ffff; valaddr_reg:x3; val_offset:31152*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31152*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x7907ffff; valaddr_reg:x3; val_offset:31155*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31155*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x790fffff; valaddr_reg:x3; val_offset:31158*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31158*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x791fffff; valaddr_reg:x3; val_offset:31161*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31161*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x793fffff; valaddr_reg:x3; val_offset:31164*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31164*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79400000; valaddr_reg:x3; val_offset:31167*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31167*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79600000; valaddr_reg:x3; val_offset:31170*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31170*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79700000; valaddr_reg:x3; val_offset:31173*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31173*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x79780000; valaddr_reg:x3; val_offset:31176*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31176*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797c0000; valaddr_reg:x3; val_offset:31179*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31179*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797e0000; valaddr_reg:x3; val_offset:31182*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31182*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797f0000; valaddr_reg:x3; val_offset:31185*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31185*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797f8000; valaddr_reg:x3; val_offset:31188*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31188*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fc000; valaddr_reg:x3; val_offset:31191*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31191*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fe000; valaddr_reg:x3; val_offset:31194*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31194*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ff000; valaddr_reg:x3; val_offset:31197*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31197*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ff800; valaddr_reg:x3; val_offset:31200*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31200*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffc00; valaddr_reg:x3; val_offset:31203*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31203*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffe00; valaddr_reg:x3; val_offset:31206*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31206*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fff00; valaddr_reg:x3; val_offset:31209*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31209*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fff80; valaddr_reg:x3; val_offset:31212*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31212*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fffc0; valaddr_reg:x3; val_offset:31215*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31215*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fffe0; valaddr_reg:x3; val_offset:31218*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31218*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffff0; valaddr_reg:x3; val_offset:31221*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31221*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffff8; valaddr_reg:x3; val_offset:31224*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31224*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffffc; valaddr_reg:x3; val_offset:31227*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31227*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797ffffe; valaddr_reg:x3; val_offset:31230*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31230*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61cf62 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61cf62; op2val:0x0;
op3val:0x797fffff; valaddr_reg:x3; val_offset:31233*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31233*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e000000; valaddr_reg:x3; val_offset:31236*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31236*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e000001; valaddr_reg:x3; val_offset:31239*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31239*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e000003; valaddr_reg:x3; val_offset:31242*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31242*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e000007; valaddr_reg:x3; val_offset:31245*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31245*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e00000f; valaddr_reg:x3; val_offset:31248*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31248*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e00001f; valaddr_reg:x3; val_offset:31251*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31251*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e00003f; valaddr_reg:x3; val_offset:31254*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31254*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e00007f; valaddr_reg:x3; val_offset:31257*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31257*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e0000ff; valaddr_reg:x3; val_offset:31260*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31260*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e0001ff; valaddr_reg:x3; val_offset:31263*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31263*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e0003ff; valaddr_reg:x3; val_offset:31266*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31266*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e0007ff; valaddr_reg:x3; val_offset:31269*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31269*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e000fff; valaddr_reg:x3; val_offset:31272*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31272*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e001fff; valaddr_reg:x3; val_offset:31275*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31275*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e003fff; valaddr_reg:x3; val_offset:31278*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31278*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e007fff; valaddr_reg:x3; val_offset:31281*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31281*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e00ffff; valaddr_reg:x3; val_offset:31284*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31284*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e01ffff; valaddr_reg:x3; val_offset:31287*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31287*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e03ffff; valaddr_reg:x3; val_offset:31290*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31290*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e07ffff; valaddr_reg:x3; val_offset:31293*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31293*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e0fffff; valaddr_reg:x3; val_offset:31296*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31296*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e1fffff; valaddr_reg:x3; val_offset:31299*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31299*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e3fffff; valaddr_reg:x3; val_offset:31302*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31302*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e400000; valaddr_reg:x3; val_offset:31305*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31305*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e600000; valaddr_reg:x3; val_offset:31308*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31308*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e700000; valaddr_reg:x3; val_offset:31311*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31311*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e780000; valaddr_reg:x3; val_offset:31314*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31314*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7c0000; valaddr_reg:x3; val_offset:31317*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31317*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7e0000; valaddr_reg:x3; val_offset:31320*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31320*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7f0000; valaddr_reg:x3; val_offset:31323*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31323*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7f8000; valaddr_reg:x3; val_offset:31326*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31326*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fc000; valaddr_reg:x3; val_offset:31329*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31329*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fe000; valaddr_reg:x3; val_offset:31332*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31332*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ff000; valaddr_reg:x3; val_offset:31335*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31335*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ff800; valaddr_reg:x3; val_offset:31338*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31338*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffc00; valaddr_reg:x3; val_offset:31341*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31341*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffe00; valaddr_reg:x3; val_offset:31344*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31344*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fff00; valaddr_reg:x3; val_offset:31347*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31347*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fff80; valaddr_reg:x3; val_offset:31350*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31350*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fffc0; valaddr_reg:x3; val_offset:31353*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31353*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fffe0; valaddr_reg:x3; val_offset:31356*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31356*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffff0; valaddr_reg:x3; val_offset:31359*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31359*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffff8; valaddr_reg:x3; val_offset:31362*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31362*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffffc; valaddr_reg:x3; val_offset:31365*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31365*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7ffffe; valaddr_reg:x3; val_offset:31368*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31368*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3e7fffff; valaddr_reg:x3; val_offset:31371*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31371*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3f800001; valaddr_reg:x3; val_offset:31374*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31374*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3f800003; valaddr_reg:x3; val_offset:31377*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31377*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3f800007; valaddr_reg:x3; val_offset:31380*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31380*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3f999999; valaddr_reg:x3; val_offset:31383*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31383*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:31386*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31386*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:31389*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31389*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:31392*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31392*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:31395*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31395*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:31398*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31398*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:31401*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31401*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:31404*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31404*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:31407*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31407*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:31410*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31410*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:31413*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31413*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:31416*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31416*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x622ba2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x10e1c3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e622ba2; op2val:0x90e1c3;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:31419*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31419*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:31422*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31422*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:31425*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31425*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:31428*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31428*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:31431*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31431*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:31434*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31434*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:31437*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31437*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:31440*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31440*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:31443*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31443*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:31446*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31446*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:31449*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31449*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:31452*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31452*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:31455*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31455*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:31458*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31458*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:31461*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31461*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:31464*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31464*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:31467*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31467*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3800000; valaddr_reg:x3; val_offset:31470*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31470*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3800001; valaddr_reg:x3; val_offset:31473*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31473*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3800003; valaddr_reg:x3; val_offset:31476*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31476*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x3800007; valaddr_reg:x3; val_offset:31479*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31479*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x380000f; valaddr_reg:x3; val_offset:31482*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31482*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x62fb76 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e62fb76; op2val:0x0;
op3val:0x380001f; valaddr_reg:x3; val_offset:31485*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31485*0 + 3*81*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043139,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043143,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043151,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043167,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043199,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043263,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043391,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030043647,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030044159,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030045183,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030047231,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030051327,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030059519,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030075903,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030108671,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030174207,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030305279,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2030567423,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2031091711,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2032140287,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2034237439,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2034237440,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2036334592,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2037383168,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2037907456,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038169600,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038300672,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038366208,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038398976,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038415360,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038423552,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038427648,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038429696,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038430720,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431232,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431488,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431616,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431680,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431712,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431728,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431736,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431740,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431742,32,FLEN)
NAN_BOXED(2120339298,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2038431743,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187392,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187393,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187395,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187399,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187407,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187423,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187455,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187519,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187647,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040187903,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040188415,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040189439,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040191487,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040195583,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040203775,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040220159,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040252927,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040318463,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040449535,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1040711679,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1041235967,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1042284543,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1044381695,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1044381696,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1046478848,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1047527424,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048051712,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048313856,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048444928,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048510464,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048543232,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048559616,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048567808,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048571904,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048573952,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048574976,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575488,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575744,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575872,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575936,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575968,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575984,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575992,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575996,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575998,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1048575999,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2120362914,32,FLEN)
NAN_BOXED(9494979,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2120416118,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
