
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebff8000; valaddr_reg:x3; val_offset:32256*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32256*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffc000; valaddr_reg:x3; val_offset:32259*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32259*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffe000; valaddr_reg:x3; val_offset:32262*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32262*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfff000; valaddr_reg:x3; val_offset:32265*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32265*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfff800; valaddr_reg:x3; val_offset:32268*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32268*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffc00; valaddr_reg:x3; val_offset:32271*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32271*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffe00; valaddr_reg:x3; val_offset:32274*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32274*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffff00; valaddr_reg:x3; val_offset:32277*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32277*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffff80; valaddr_reg:x3; val_offset:32280*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32280*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffc0; valaddr_reg:x3; val_offset:32283*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32283*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffe0; valaddr_reg:x3; val_offset:32286*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32286*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffff0; valaddr_reg:x3; val_offset:32289*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32289*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffff8; valaddr_reg:x3; val_offset:32292*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32292*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffffc; valaddr_reg:x3; val_offset:32295*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32295*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffffe; valaddr_reg:x3; val_offset:32298*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32298*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffff; valaddr_reg:x3; val_offset:32301*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32301*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000001; valaddr_reg:x3; val_offset:32304*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32304*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000003; valaddr_reg:x3; val_offset:32307*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32307*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000007; valaddr_reg:x3; val_offset:32310*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32310*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff199999; valaddr_reg:x3; val_offset:32313*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32313*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff249249; valaddr_reg:x3; val_offset:32316*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32316*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff333333; valaddr_reg:x3; val_offset:32319*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32319*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:32322*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32322*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:32325*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32325*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff444444; valaddr_reg:x3; val_offset:32328*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32328*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:32331*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32331*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:32334*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32334*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff666666; valaddr_reg:x3; val_offset:32337*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32337*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:32340*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32340*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:32343*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32343*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:32346*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32346*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:32349*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32349*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000000; valaddr_reg:x3; val_offset:32352*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32352*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000001; valaddr_reg:x3; val_offset:32355*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32355*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000003; valaddr_reg:x3; val_offset:32358*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32358*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000007; valaddr_reg:x3; val_offset:32361*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32361*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00000f; valaddr_reg:x3; val_offset:32364*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32364*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00001f; valaddr_reg:x3; val_offset:32367*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32367*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00003f; valaddr_reg:x3; val_offset:32370*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32370*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00007f; valaddr_reg:x3; val_offset:32373*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32373*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0000ff; valaddr_reg:x3; val_offset:32376*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32376*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0001ff; valaddr_reg:x3; val_offset:32379*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32379*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0003ff; valaddr_reg:x3; val_offset:32382*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32382*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0007ff; valaddr_reg:x3; val_offset:32385*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32385*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000fff; valaddr_reg:x3; val_offset:32388*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32388*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f001fff; valaddr_reg:x3; val_offset:32391*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32391*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f003fff; valaddr_reg:x3; val_offset:32394*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32394*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f007fff; valaddr_reg:x3; val_offset:32397*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32397*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00ffff; valaddr_reg:x3; val_offset:32400*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32400*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f01ffff; valaddr_reg:x3; val_offset:32403*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32403*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f03ffff; valaddr_reg:x3; val_offset:32406*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32406*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f07ffff; valaddr_reg:x3; val_offset:32409*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32409*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0fffff; valaddr_reg:x3; val_offset:32412*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32412*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f1fffff; valaddr_reg:x3; val_offset:32415*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32415*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f3fffff; valaddr_reg:x3; val_offset:32418*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32418*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f400000; valaddr_reg:x3; val_offset:32421*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32421*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f600000; valaddr_reg:x3; val_offset:32424*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32424*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f700000; valaddr_reg:x3; val_offset:32427*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32427*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f780000; valaddr_reg:x3; val_offset:32430*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32430*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7c0000; valaddr_reg:x3; val_offset:32433*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32433*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7e0000; valaddr_reg:x3; val_offset:32436*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32436*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7f0000; valaddr_reg:x3; val_offset:32439*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32439*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7f8000; valaddr_reg:x3; val_offset:32442*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32442*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fc000; valaddr_reg:x3; val_offset:32445*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32445*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fe000; valaddr_reg:x3; val_offset:32448*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32448*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ff000; valaddr_reg:x3; val_offset:32451*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32451*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ff800; valaddr_reg:x3; val_offset:32454*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32454*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffc00; valaddr_reg:x3; val_offset:32457*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32457*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffe00; valaddr_reg:x3; val_offset:32460*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32460*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fff00; valaddr_reg:x3; val_offset:32463*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32463*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fff80; valaddr_reg:x3; val_offset:32466*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32466*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffc0; valaddr_reg:x3; val_offset:32469*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32469*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffe0; valaddr_reg:x3; val_offset:32472*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32472*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffff0; valaddr_reg:x3; val_offset:32475*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32475*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffff8; valaddr_reg:x3; val_offset:32478*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32478*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffffc; valaddr_reg:x3; val_offset:32481*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32481*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffffe; valaddr_reg:x3; val_offset:32484*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32484*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffff; valaddr_reg:x3; val_offset:32487*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32487*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800001; valaddr_reg:x3; val_offset:32490*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32490*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800003; valaddr_reg:x3; val_offset:32493*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32493*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800007; valaddr_reg:x3; val_offset:32496*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32496*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf999999; valaddr_reg:x3; val_offset:32499*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32499*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:32502*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32502*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:32505*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32505*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:32508*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32508*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:32511*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32511*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:32514*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32514*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:32517*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32517*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:32520*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32520*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:32523*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32523*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:32526*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32526*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:32529*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32529*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:32532*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32532*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:32535*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32535*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:32538*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32538*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:32541*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32541*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:32544*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32544*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:32547*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32547*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:32550*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32550*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:32553*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32553*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:32556*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32556*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:32559*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32559*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:32562*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32562*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:32565*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32565*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:32568*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32568*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:32571*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32571*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:32574*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32574*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:32577*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32577*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:32580*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32580*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:32583*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32583*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x3; val_offset:32586*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32586*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x3; val_offset:32589*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32589*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x3; val_offset:32592*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32592*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x3; val_offset:32595*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32595*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x3; val_offset:32598*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32598*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x3; val_offset:32601*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32601*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x3; val_offset:32604*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32604*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x3; val_offset:32607*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32607*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8000ff; valaddr_reg:x3; val_offset:32610*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32610*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8001ff; valaddr_reg:x3; val_offset:32613*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32613*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8003ff; valaddr_reg:x3; val_offset:32616*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32616*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8007ff; valaddr_reg:x3; val_offset:32619*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32619*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800fff; valaddr_reg:x3; val_offset:32622*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32622*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e801fff; valaddr_reg:x3; val_offset:32625*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32625*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e803fff; valaddr_reg:x3; val_offset:32628*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32628*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e807fff; valaddr_reg:x3; val_offset:32631*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32631*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80ffff; valaddr_reg:x3; val_offset:32634*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32634*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e81ffff; valaddr_reg:x3; val_offset:32637*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32637*0 + 3*84*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959390208,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959406592,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959414784,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959418880,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959420928,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959421952,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422464,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422720,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422848,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422912,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422944,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422960,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422968,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422972,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422974,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(3959422975,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120482878,32,FLEN)
NAN_BOXED(3230644219,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577344,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577345,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577347,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577351,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577359,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577375,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577407,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577471,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577599,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667577855,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667578367,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667579391,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667581439,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667585535,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667593727,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667610111,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667642879,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667708415,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2667839487,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2668101631,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2668625919,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2669674495,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2671771647,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2671771648,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2673868800,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2674917376,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675441664,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675703808,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675834880,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675900416,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675933184,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675949568,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675957760,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675961856,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675963904,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675964928,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965440,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965696,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965824,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965888,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965920,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965936,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965944,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965948,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965950,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(2675965951,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2120533388,32,FLEN)
NAN_BOXED(2156870664,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753280,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753281,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753283,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753287,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753295,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753311,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753343,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753407,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753535,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753791,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390754303,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390755327,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390757375,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390761471,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390769663,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390786047,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390818815,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390884351,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
