
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e83ffff; valaddr_reg:x3; val_offset:32640*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32640*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e87ffff; valaddr_reg:x3; val_offset:32643*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32643*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8fffff; valaddr_reg:x3; val_offset:32646*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32646*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e9fffff; valaddr_reg:x3; val_offset:32649*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32649*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ebfffff; valaddr_reg:x3; val_offset:32652*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32652*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ec00000; valaddr_reg:x3; val_offset:32655*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32655*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ee00000; valaddr_reg:x3; val_offset:32658*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32658*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ef00000; valaddr_reg:x3; val_offset:32661*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32661*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ef80000; valaddr_reg:x3; val_offset:32664*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32664*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efc0000; valaddr_reg:x3; val_offset:32667*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32667*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efe0000; valaddr_reg:x3; val_offset:32670*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32670*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8eff0000; valaddr_reg:x3; val_offset:32673*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32673*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8eff8000; valaddr_reg:x3; val_offset:32676*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32676*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effc000; valaddr_reg:x3; val_offset:32679*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32679*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effe000; valaddr_reg:x3; val_offset:32682*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32682*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efff000; valaddr_reg:x3; val_offset:32685*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32685*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efff800; valaddr_reg:x3; val_offset:32688*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32688*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffc00; valaddr_reg:x3; val_offset:32691*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32691*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffe00; valaddr_reg:x3; val_offset:32694*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32694*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effff00; valaddr_reg:x3; val_offset:32697*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32697*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x3; val_offset:32700*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32700*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x3; val_offset:32703*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32703*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x3; val_offset:32706*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32706*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x3; val_offset:32709*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32709*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x3; val_offset:32712*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32712*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x3; val_offset:32715*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32715*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x3; val_offset:32718*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32718*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x3; val_offset:32721*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32721*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:32724*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32724*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:32727*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32727*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:32730*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32730*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:32733*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32733*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:32736*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32736*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:32739*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32739*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:32742*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32742*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:32745*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32745*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:32748*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32748*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:32751*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32751*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:32754*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32754*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:32757*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32757*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:32760*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32760*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:32763*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32763*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:32766*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32766*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:32769*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32769*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:32772*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32772*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:32775*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32775*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:32778*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32778*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:32781*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32781*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:32784*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32784*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:32787*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32787*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:32790*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32790*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:32793*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32793*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:32796*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32796*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:32799*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32799*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:32802*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32802*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:32805*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32805*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:32808*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32808*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:32811*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32811*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:32814*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32814*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:32817*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32817*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:32820*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32820*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:32823*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32823*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:32826*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32826*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:32829*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32829*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:32832*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32832*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:32835*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32835*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:32838*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32838*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:32841*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32841*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:32844*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32844*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:32847*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32847*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:32850*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32850*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:32853*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32853*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:32856*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32856*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:32859*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32859*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:32862*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32862*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:32865*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32865*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:32868*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32868*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:32871*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32871*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:32874*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32874*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:32877*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32877*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:32880*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32880*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:32883*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32883*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:32886*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32886*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:32889*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32889*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:32892*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32892*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:32895*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32895*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:32898*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32898*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:32901*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32901*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:32904*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32904*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:32907*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32907*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800000; valaddr_reg:x3; val_offset:32910*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32910*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800001; valaddr_reg:x3; val_offset:32913*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32913*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800003; valaddr_reg:x3; val_offset:32916*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32916*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800007; valaddr_reg:x3; val_offset:32919*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32919*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580000f; valaddr_reg:x3; val_offset:32922*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32922*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580001f; valaddr_reg:x3; val_offset:32925*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32925*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580003f; valaddr_reg:x3; val_offset:32928*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32928*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580007f; valaddr_reg:x3; val_offset:32931*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32931*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58000ff; valaddr_reg:x3; val_offset:32934*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32934*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58001ff; valaddr_reg:x3; val_offset:32937*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32937*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58003ff; valaddr_reg:x3; val_offset:32940*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32940*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58007ff; valaddr_reg:x3; val_offset:32943*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32943*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800fff; valaddr_reg:x3; val_offset:32946*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32946*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5801fff; valaddr_reg:x3; val_offset:32949*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32949*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5803fff; valaddr_reg:x3; val_offset:32952*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32952*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5807fff; valaddr_reg:x3; val_offset:32955*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32955*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580ffff; valaddr_reg:x3; val_offset:32958*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32958*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc581ffff; valaddr_reg:x3; val_offset:32961*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32961*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc583ffff; valaddr_reg:x3; val_offset:32964*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32964*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc587ffff; valaddr_reg:x3; val_offset:32967*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32967*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58fffff; valaddr_reg:x3; val_offset:32970*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32970*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc59fffff; valaddr_reg:x3; val_offset:32973*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32973*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5bfffff; valaddr_reg:x3; val_offset:32976*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32976*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5c00000; valaddr_reg:x3; val_offset:32979*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32979*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5e00000; valaddr_reg:x3; val_offset:32982*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32982*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f00000; valaddr_reg:x3; val_offset:32985*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32985*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f80000; valaddr_reg:x3; val_offset:32988*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32988*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fc0000; valaddr_reg:x3; val_offset:32991*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32991*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fe0000; valaddr_reg:x3; val_offset:32994*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32994*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff0000; valaddr_reg:x3; val_offset:32997*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32997*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff8000; valaddr_reg:x3; val_offset:33000*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33000*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffc000; valaddr_reg:x3; val_offset:33003*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33003*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffe000; valaddr_reg:x3; val_offset:33006*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33006*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff000; valaddr_reg:x3; val_offset:33009*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33009*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff800; valaddr_reg:x3; val_offset:33012*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33012*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffc00; valaddr_reg:x3; val_offset:33015*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33015*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffe00; valaddr_reg:x3; val_offset:33018*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33018*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff00; valaddr_reg:x3; val_offset:33021*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33021*0 + 3*85*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391015423,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391277567,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2391801855,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2392850431,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947583,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2394947584,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2397044736,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398093312,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398617600,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2398879744,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399010816,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399076352,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399109120,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399125504,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399133696,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399137792,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399139840,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399140864,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141376,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141632,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141760,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141824,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141856,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141872,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141880,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141884,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141886,32,FLEN)
NAN_BOXED(2120575574,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141887,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2120618267,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500160,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500161,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500163,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500167,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500175,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500191,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500223,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500287,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500415,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313500671,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313501183,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313502207,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313504255,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313508351,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313516543,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313532927,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313565695,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313631231,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3313762303,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3314024447,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3314548735,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3315597311,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3317694463,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3317694464,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3319791616,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3320840192,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321364480,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321626624,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321757696,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321823232,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321856000,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321872384,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321880576,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321884672,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321886720,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321887744,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888256,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888512,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
