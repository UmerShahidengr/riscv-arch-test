
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff80; valaddr_reg:x3; val_offset:33024*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33024*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffc0; valaddr_reg:x3; val_offset:33027*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33027*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffe0; valaddr_reg:x3; val_offset:33030*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33030*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff0; valaddr_reg:x3; val_offset:33033*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33033*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff8; valaddr_reg:x3; val_offset:33036*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33036*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffc; valaddr_reg:x3; val_offset:33039*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33039*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffe; valaddr_reg:x3; val_offset:33042*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33042*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffff; valaddr_reg:x3; val_offset:33045*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33045*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000001; valaddr_reg:x3; val_offset:33048*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33048*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000003; valaddr_reg:x3; val_offset:33051*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33051*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000007; valaddr_reg:x3; val_offset:33054*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33054*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff199999; valaddr_reg:x3; val_offset:33057*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33057*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff249249; valaddr_reg:x3; val_offset:33060*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33060*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff333333; valaddr_reg:x3; val_offset:33063*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33063*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:33066*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33066*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:33069*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33069*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff444444; valaddr_reg:x3; val_offset:33072*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33072*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:33075*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33075*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:33078*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33078*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff666666; valaddr_reg:x3; val_offset:33081*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33081*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:33084*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33084*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:33087*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33087*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:33090*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33090*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:33093*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33093*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000000; valaddr_reg:x3; val_offset:33096*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33096*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000001; valaddr_reg:x3; val_offset:33099*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33099*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000003; valaddr_reg:x3; val_offset:33102*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33102*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000007; valaddr_reg:x3; val_offset:33105*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33105*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600000f; valaddr_reg:x3; val_offset:33108*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33108*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600001f; valaddr_reg:x3; val_offset:33111*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33111*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600003f; valaddr_reg:x3; val_offset:33114*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33114*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600007f; valaddr_reg:x3; val_offset:33117*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33117*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60000ff; valaddr_reg:x3; val_offset:33120*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33120*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60001ff; valaddr_reg:x3; val_offset:33123*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33123*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60003ff; valaddr_reg:x3; val_offset:33126*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33126*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60007ff; valaddr_reg:x3; val_offset:33129*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33129*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000fff; valaddr_reg:x3; val_offset:33132*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33132*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6001fff; valaddr_reg:x3; val_offset:33135*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33135*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6003fff; valaddr_reg:x3; val_offset:33138*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33138*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6007fff; valaddr_reg:x3; val_offset:33141*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33141*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600ffff; valaddr_reg:x3; val_offset:33144*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33144*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe601ffff; valaddr_reg:x3; val_offset:33147*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33147*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe603ffff; valaddr_reg:x3; val_offset:33150*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33150*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe607ffff; valaddr_reg:x3; val_offset:33153*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33153*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60fffff; valaddr_reg:x3; val_offset:33156*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33156*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe61fffff; valaddr_reg:x3; val_offset:33159*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33159*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe63fffff; valaddr_reg:x3; val_offset:33162*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33162*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6400000; valaddr_reg:x3; val_offset:33165*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33165*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6600000; valaddr_reg:x3; val_offset:33168*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33168*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6700000; valaddr_reg:x3; val_offset:33171*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33171*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6780000; valaddr_reg:x3; val_offset:33174*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33174*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67c0000; valaddr_reg:x3; val_offset:33177*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33177*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67e0000; valaddr_reg:x3; val_offset:33180*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33180*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67f0000; valaddr_reg:x3; val_offset:33183*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33183*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67f8000; valaddr_reg:x3; val_offset:33186*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33186*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fc000; valaddr_reg:x3; val_offset:33189*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33189*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fe000; valaddr_reg:x3; val_offset:33192*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33192*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ff000; valaddr_reg:x3; val_offset:33195*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33195*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ff800; valaddr_reg:x3; val_offset:33198*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33198*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffc00; valaddr_reg:x3; val_offset:33201*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33201*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffe00; valaddr_reg:x3; val_offset:33204*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33204*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fff00; valaddr_reg:x3; val_offset:33207*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33207*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fff80; valaddr_reg:x3; val_offset:33210*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33210*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffc0; valaddr_reg:x3; val_offset:33213*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33213*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffe0; valaddr_reg:x3; val_offset:33216*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33216*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffff0; valaddr_reg:x3; val_offset:33219*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33219*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffff8; valaddr_reg:x3; val_offset:33222*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33222*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffffc; valaddr_reg:x3; val_offset:33225*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33225*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffffe; valaddr_reg:x3; val_offset:33228*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33228*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffff; valaddr_reg:x3; val_offset:33231*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33231*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000001; valaddr_reg:x3; val_offset:33234*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33234*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000003; valaddr_reg:x3; val_offset:33237*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33237*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000007; valaddr_reg:x3; val_offset:33240*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33240*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff199999; valaddr_reg:x3; val_offset:33243*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33243*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff249249; valaddr_reg:x3; val_offset:33246*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33246*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff333333; valaddr_reg:x3; val_offset:33249*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33249*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:33252*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33252*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:33255*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33255*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff444444; valaddr_reg:x3; val_offset:33258*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33258*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:33261*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33261*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:33264*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33264*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff666666; valaddr_reg:x3; val_offset:33267*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33267*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:33270*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33270*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:33273*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33273*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:33276*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33276*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:33279*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33279*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800000; valaddr_reg:x3; val_offset:33282*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33282*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800001; valaddr_reg:x3; val_offset:33285*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33285*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800003; valaddr_reg:x3; val_offset:33288*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33288*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800007; valaddr_reg:x3; val_offset:33291*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33291*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580000f; valaddr_reg:x3; val_offset:33294*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33294*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580001f; valaddr_reg:x3; val_offset:33297*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33297*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580003f; valaddr_reg:x3; val_offset:33300*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33300*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580007f; valaddr_reg:x3; val_offset:33303*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33303*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658000ff; valaddr_reg:x3; val_offset:33306*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33306*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658001ff; valaddr_reg:x3; val_offset:33309*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33309*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658003ff; valaddr_reg:x3; val_offset:33312*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33312*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658007ff; valaddr_reg:x3; val_offset:33315*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33315*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800fff; valaddr_reg:x3; val_offset:33318*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33318*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65801fff; valaddr_reg:x3; val_offset:33321*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33321*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65803fff; valaddr_reg:x3; val_offset:33324*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33324*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65807fff; valaddr_reg:x3; val_offset:33327*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33327*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580ffff; valaddr_reg:x3; val_offset:33330*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33330*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6581ffff; valaddr_reg:x3; val_offset:33333*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33333*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6583ffff; valaddr_reg:x3; val_offset:33336*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33336*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6587ffff; valaddr_reg:x3; val_offset:33339*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33339*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658fffff; valaddr_reg:x3; val_offset:33342*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33342*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x659fffff; valaddr_reg:x3; val_offset:33345*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33345*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65bfffff; valaddr_reg:x3; val_offset:33348*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33348*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65c00000; valaddr_reg:x3; val_offset:33351*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33351*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65e00000; valaddr_reg:x3; val_offset:33354*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33354*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65f00000; valaddr_reg:x3; val_offset:33357*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33357*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65f80000; valaddr_reg:x3; val_offset:33360*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33360*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fc0000; valaddr_reg:x3; val_offset:33363*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33363*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fe0000; valaddr_reg:x3; val_offset:33366*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33366*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ff0000; valaddr_reg:x3; val_offset:33369*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33369*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ff8000; valaddr_reg:x3; val_offset:33372*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33372*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffc000; valaddr_reg:x3; val_offset:33375*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33375*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffe000; valaddr_reg:x3; val_offset:33378*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33378*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fff000; valaddr_reg:x3; val_offset:33381*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33381*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fff800; valaddr_reg:x3; val_offset:33384*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33384*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffc00; valaddr_reg:x3; val_offset:33387*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33387*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffe00; valaddr_reg:x3; val_offset:33390*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33390*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffff00; valaddr_reg:x3; val_offset:33393*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33393*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffff80; valaddr_reg:x3; val_offset:33396*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33396*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffc0; valaddr_reg:x3; val_offset:33399*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33399*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffe0; valaddr_reg:x3; val_offset:33402*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33402*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffff0; valaddr_reg:x3; val_offset:33405*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33405*0 + 3*86*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888640,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888704,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888736,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888752,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888760,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888764,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888766,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(3321888767,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120824760,32,FLEN)
NAN_BOXED(3230433537,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759680,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759681,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759683,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759687,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759695,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759711,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759743,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759807,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858759935,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858760191,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858760703,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858761727,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858763775,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858767871,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858776063,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858792447,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858825215,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3858890751,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3859021823,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3859283967,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3859808255,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3860856831,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3862953983,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3862953984,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3865051136,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3866099712,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3866624000,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3866886144,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867017216,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867082752,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867115520,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867131904,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867140096,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867144192,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867146240,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867147264,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867147776,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148032,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148160,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148224,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148256,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148272,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148280,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148284,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148286,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(3867148287,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2120861726,32,FLEN)
NAN_BOXED(3230411321,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887424,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887425,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887427,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887431,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887439,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887455,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887487,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887551,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887679,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702887935,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702888447,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702889471,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702891519,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702895615,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702903807,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702920191,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1702952959,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1703018495,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1703149567,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1703411711,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1703935999,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1704984575,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1707081727,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1707081728,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1709178880,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1710227456,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1710751744,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711013888,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711144960,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711210496,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711243264,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711259648,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711267840,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711271936,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711273984,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711275008,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711275520,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711275776,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711275904,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711275968,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276000,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276016,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
