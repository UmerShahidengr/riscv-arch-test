
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffff8; valaddr_reg:x3; val_offset:33408*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33408*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffffc; valaddr_reg:x3; val_offset:33411*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33411*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffffe; valaddr_reg:x3; val_offset:33414*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33414*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffff; valaddr_reg:x3; val_offset:33417*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33417*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000001; valaddr_reg:x3; val_offset:33420*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33420*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000003; valaddr_reg:x3; val_offset:33423*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33423*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000007; valaddr_reg:x3; val_offset:33426*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33426*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f199999; valaddr_reg:x3; val_offset:33429*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33429*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f249249; valaddr_reg:x3; val_offset:33432*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33432*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f333333; valaddr_reg:x3; val_offset:33435*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33435*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:33438*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33438*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:33441*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33441*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f444444; valaddr_reg:x3; val_offset:33444*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33444*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:33447*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33447*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:33450*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33450*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f666666; valaddr_reg:x3; val_offset:33453*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33453*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:33456*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33456*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:33459*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33459*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:33462*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33462*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:33465*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33465*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800000; valaddr_reg:x3; val_offset:33468*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33468*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800001; valaddr_reg:x3; val_offset:33471*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33471*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800003; valaddr_reg:x3; val_offset:33474*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33474*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800007; valaddr_reg:x3; val_offset:33477*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33477*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80000f; valaddr_reg:x3; val_offset:33480*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33480*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80001f; valaddr_reg:x3; val_offset:33483*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33483*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80003f; valaddr_reg:x3; val_offset:33486*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33486*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80007f; valaddr_reg:x3; val_offset:33489*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33489*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8000ff; valaddr_reg:x3; val_offset:33492*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33492*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8001ff; valaddr_reg:x3; val_offset:33495*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33495*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8003ff; valaddr_reg:x3; val_offset:33498*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33498*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8007ff; valaddr_reg:x3; val_offset:33501*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33501*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800fff; valaddr_reg:x3; val_offset:33504*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33504*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f801fff; valaddr_reg:x3; val_offset:33507*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33507*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f803fff; valaddr_reg:x3; val_offset:33510*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33510*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f807fff; valaddr_reg:x3; val_offset:33513*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33513*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80ffff; valaddr_reg:x3; val_offset:33516*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33516*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f81ffff; valaddr_reg:x3; val_offset:33519*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33519*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f83ffff; valaddr_reg:x3; val_offset:33522*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33522*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f87ffff; valaddr_reg:x3; val_offset:33525*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33525*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8fffff; valaddr_reg:x3; val_offset:33528*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33528*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f9fffff; valaddr_reg:x3; val_offset:33531*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33531*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fbfffff; valaddr_reg:x3; val_offset:33534*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33534*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fc00000; valaddr_reg:x3; val_offset:33537*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33537*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fe00000; valaddr_reg:x3; val_offset:33540*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33540*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ff00000; valaddr_reg:x3; val_offset:33543*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33543*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ff80000; valaddr_reg:x3; val_offset:33546*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33546*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffc0000; valaddr_reg:x3; val_offset:33549*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33549*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffe0000; valaddr_reg:x3; val_offset:33552*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33552*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fff0000; valaddr_reg:x3; val_offset:33555*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33555*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fff8000; valaddr_reg:x3; val_offset:33558*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33558*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffc000; valaddr_reg:x3; val_offset:33561*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33561*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffe000; valaddr_reg:x3; val_offset:33564*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33564*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffff000; valaddr_reg:x3; val_offset:33567*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33567*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffff800; valaddr_reg:x3; val_offset:33570*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33570*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffc00; valaddr_reg:x3; val_offset:33573*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33573*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffe00; valaddr_reg:x3; val_offset:33576*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33576*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffff00; valaddr_reg:x3; val_offset:33579*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33579*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffff80; valaddr_reg:x3; val_offset:33582*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33582*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffc0; valaddr_reg:x3; val_offset:33585*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33585*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffe0; valaddr_reg:x3; val_offset:33588*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33588*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffff0; valaddr_reg:x3; val_offset:33591*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33591*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffff8; valaddr_reg:x3; val_offset:33594*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33594*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffffc; valaddr_reg:x3; val_offset:33597*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33597*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffffe; valaddr_reg:x3; val_offset:33600*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33600*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffff; valaddr_reg:x3; val_offset:33603*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33603*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:33606*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33606*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:33609*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33609*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:33612*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33612*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:33615*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33615*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:33618*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33618*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:33621*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33621*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:33624*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33624*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:33627*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33627*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:33630*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33630*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:33633*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33633*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:33636*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33636*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:33639*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33639*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:33642*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33642*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:33645*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33645*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:33648*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33648*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:33651*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33651*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:33654*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33654*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:33657*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33657*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:33660*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33660*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:33663*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33663*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:33666*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33666*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:33669*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33669*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:33672*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33672*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:33675*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33675*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:33678*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33678*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:33681*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33681*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:33684*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33684*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:33687*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33687*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:33690*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33690*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:33693*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33693*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:33696*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33696*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:33699*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33699*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:33702*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33702*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:33705*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33705*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:33708*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33708*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:33711*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33711*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:33714*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33714*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:33717*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33717*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:33720*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33720*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:33723*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33723*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:33726*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33726*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:33729*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33729*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:33732*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33732*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:33735*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33735*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:33738*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33738*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:33741*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33741*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:33744*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33744*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:33747*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33747*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:33750*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33750*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:33753*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33753*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:33756*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33756*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:33759*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33759*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:33762*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33762*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:33765*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33765*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:33768*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33768*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:33771*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33771*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:33774*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33774*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:33777*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33777*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:33780*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33780*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:33783*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33783*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:33786*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33786*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:33789*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33789*0 + 3*87*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276024,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276028,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276030,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(1711276031,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2120881652,32,FLEN)
NAN_BOXED(1082915741,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659584,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659585,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659587,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659591,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659599,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659615,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659647,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659711,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870659839,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870660095,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870660607,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870661631,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870663679,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870667775,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870675967,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870692351,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870725119,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870790655,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1870921727,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1871183871,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1871708159,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1872756735,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1874853887,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1874853888,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1876951040,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1877999616,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1878523904,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1878786048,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1878917120,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1878982656,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879015424,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879031808,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879040000,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879044096,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879046144,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879047168,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879047680,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879047936,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048064,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048128,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048160,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048176,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048184,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048188,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048190,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(1879048191,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2120908701,32,FLEN)
NAN_BOXED(1082899595,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2120923110,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
