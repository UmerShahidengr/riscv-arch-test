
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff249249; valaddr_reg:x3; val_offset:34176*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34176*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff333333; valaddr_reg:x3; val_offset:34179*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34179*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:34182*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34182*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:34185*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34185*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff444444; valaddr_reg:x3; val_offset:34188*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34188*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:34191*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34191*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:34194*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34194*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff666666; valaddr_reg:x3; val_offset:34197*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34197*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:34200*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34200*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:34203*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34203*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:34206*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34206*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:34209*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34209*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:34212*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34212*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:34215*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34215*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:34218*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34218*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:34221*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34221*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:34224*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34224*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:34227*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34227*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:34230*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34230*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:34233*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34233*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:34236*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34236*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:34239*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34239*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:34242*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34242*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:34245*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34245*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:34248*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34248*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:34251*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34251*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:34254*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34254*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:34257*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34257*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:34260*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34260*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:34263*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34263*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:34266*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34266*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:34269*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34269*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:34272*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34272*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:34275*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34275*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:34278*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34278*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:34281*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34281*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:34284*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34284*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:34287*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34287*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:34290*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34290*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:34293*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34293*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:34296*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34296*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:34299*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34299*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:34302*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34302*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:34305*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34305*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:34308*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34308*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:34311*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34311*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:34314*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34314*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:34317*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34317*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:34320*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34320*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:34323*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34323*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:34326*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34326*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:34329*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34329*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:34332*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34332*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:34335*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34335*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:34338*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34338*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:34341*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34341*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:34344*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34344*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:34347*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34347*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:34350*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34350*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:34353*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34353*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:34356*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34356*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:34359*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34359*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:34362*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34362*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:34365*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34365*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:34368*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34368*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:34371*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34371*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:34374*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34374*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:34377*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34377*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:34380*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34380*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:34383*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34383*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:34386*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34386*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:34389*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34389*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:34392*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34392*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:34395*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34395*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000000; valaddr_reg:x3; val_offset:34398*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34398*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000001; valaddr_reg:x3; val_offset:34401*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34401*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000003; valaddr_reg:x3; val_offset:34404*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34404*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000007; valaddr_reg:x3; val_offset:34407*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34407*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200000f; valaddr_reg:x3; val_offset:34410*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34410*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200001f; valaddr_reg:x3; val_offset:34413*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34413*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200003f; valaddr_reg:x3; val_offset:34416*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34416*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200007f; valaddr_reg:x3; val_offset:34419*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34419*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620000ff; valaddr_reg:x3; val_offset:34422*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34422*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620001ff; valaddr_reg:x3; val_offset:34425*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34425*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620003ff; valaddr_reg:x3; val_offset:34428*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34428*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620007ff; valaddr_reg:x3; val_offset:34431*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34431*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000fff; valaddr_reg:x3; val_offset:34434*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34434*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62001fff; valaddr_reg:x3; val_offset:34437*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34437*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62003fff; valaddr_reg:x3; val_offset:34440*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34440*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62007fff; valaddr_reg:x3; val_offset:34443*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34443*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200ffff; valaddr_reg:x3; val_offset:34446*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34446*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6201ffff; valaddr_reg:x3; val_offset:34449*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34449*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6203ffff; valaddr_reg:x3; val_offset:34452*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34452*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6207ffff; valaddr_reg:x3; val_offset:34455*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34455*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620fffff; valaddr_reg:x3; val_offset:34458*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34458*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x621fffff; valaddr_reg:x3; val_offset:34461*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34461*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x623fffff; valaddr_reg:x3; val_offset:34464*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34464*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62400000; valaddr_reg:x3; val_offset:34467*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34467*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62600000; valaddr_reg:x3; val_offset:34470*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34470*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62700000; valaddr_reg:x3; val_offset:34473*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34473*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62780000; valaddr_reg:x3; val_offset:34476*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34476*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627c0000; valaddr_reg:x3; val_offset:34479*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34479*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627e0000; valaddr_reg:x3; val_offset:34482*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34482*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627f0000; valaddr_reg:x3; val_offset:34485*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34485*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627f8000; valaddr_reg:x3; val_offset:34488*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34488*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fc000; valaddr_reg:x3; val_offset:34491*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34491*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fe000; valaddr_reg:x3; val_offset:34494*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34494*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ff000; valaddr_reg:x3; val_offset:34497*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34497*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ff800; valaddr_reg:x3; val_offset:34500*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34500*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffc00; valaddr_reg:x3; val_offset:34503*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34503*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffe00; valaddr_reg:x3; val_offset:34506*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34506*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fff00; valaddr_reg:x3; val_offset:34509*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34509*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fff80; valaddr_reg:x3; val_offset:34512*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34512*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffc0; valaddr_reg:x3; val_offset:34515*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34515*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffe0; valaddr_reg:x3; val_offset:34518*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34518*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffff0; valaddr_reg:x3; val_offset:34521*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34521*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffff8; valaddr_reg:x3; val_offset:34524*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34524*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffffc; valaddr_reg:x3; val_offset:34527*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34527*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffffe; valaddr_reg:x3; val_offset:34530*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34530*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffff; valaddr_reg:x3; val_offset:34533*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34533*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000001; valaddr_reg:x3; val_offset:34536*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34536*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000003; valaddr_reg:x3; val_offset:34539*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34539*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000007; valaddr_reg:x3; val_offset:34542*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34542*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f199999; valaddr_reg:x3; val_offset:34545*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34545*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f249249; valaddr_reg:x3; val_offset:34548*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34548*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f333333; valaddr_reg:x3; val_offset:34551*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34551*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:34554*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34554*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:34557*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34557*0 + 3*89*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2121131432,32,FLEN)
NAN_BOXED(3230252414,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2121200577,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167168,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167169,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167171,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167175,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167183,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167199,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167231,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167295,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167423,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644167679,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644168191,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644169215,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644171263,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644175359,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644183551,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644199935,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644232703,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644298239,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644429311,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1644691455,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1645215743,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1646264319,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1648361471,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1648361472,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1650458624,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1651507200,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652031488,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652293632,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652424704,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652490240,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652523008,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652539392,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652547584,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652551680,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652553728,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652554752,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555264,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555520,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555648,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555712,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555744,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555760,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555768,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555772,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555774,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(1652555775,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2121206406,32,FLEN)
NAN_BOXED(1082725565,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
