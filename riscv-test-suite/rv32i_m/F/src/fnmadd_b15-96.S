
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800fff; valaddr_reg:x3; val_offset:36480*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36480*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7801fff; valaddr_reg:x3; val_offset:36483*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36483*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7803fff; valaddr_reg:x3; val_offset:36486*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36486*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7807fff; valaddr_reg:x3; val_offset:36489*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36489*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780ffff; valaddr_reg:x3; val_offset:36492*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36492*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe781ffff; valaddr_reg:x3; val_offset:36495*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36495*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe783ffff; valaddr_reg:x3; val_offset:36498*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36498*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe787ffff; valaddr_reg:x3; val_offset:36501*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36501*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78fffff; valaddr_reg:x3; val_offset:36504*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36504*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe79fffff; valaddr_reg:x3; val_offset:36507*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36507*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7bfffff; valaddr_reg:x3; val_offset:36510*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36510*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7c00000; valaddr_reg:x3; val_offset:36513*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36513*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7e00000; valaddr_reg:x3; val_offset:36516*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36516*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7f00000; valaddr_reg:x3; val_offset:36519*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36519*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7f80000; valaddr_reg:x3; val_offset:36522*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36522*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fc0000; valaddr_reg:x3; val_offset:36525*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36525*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fe0000; valaddr_reg:x3; val_offset:36528*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36528*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ff0000; valaddr_reg:x3; val_offset:36531*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36531*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ff8000; valaddr_reg:x3; val_offset:36534*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36534*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffc000; valaddr_reg:x3; val_offset:36537*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36537*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffe000; valaddr_reg:x3; val_offset:36540*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36540*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fff000; valaddr_reg:x3; val_offset:36543*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36543*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fff800; valaddr_reg:x3; val_offset:36546*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36546*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffc00; valaddr_reg:x3; val_offset:36549*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36549*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffe00; valaddr_reg:x3; val_offset:36552*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36552*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffff00; valaddr_reg:x3; val_offset:36555*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36555*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffff80; valaddr_reg:x3; val_offset:36558*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36558*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffc0; valaddr_reg:x3; val_offset:36561*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36561*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffe0; valaddr_reg:x3; val_offset:36564*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36564*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffff0; valaddr_reg:x3; val_offset:36567*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36567*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffff8; valaddr_reg:x3; val_offset:36570*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36570*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffffc; valaddr_reg:x3; val_offset:36573*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36573*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffffe; valaddr_reg:x3; val_offset:36576*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36576*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffff; valaddr_reg:x3; val_offset:36579*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36579*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000001; valaddr_reg:x3; val_offset:36582*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36582*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000003; valaddr_reg:x3; val_offset:36585*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36585*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000007; valaddr_reg:x3; val_offset:36588*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36588*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff199999; valaddr_reg:x3; val_offset:36591*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36591*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff249249; valaddr_reg:x3; val_offset:36594*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36594*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff333333; valaddr_reg:x3; val_offset:36597*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36597*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:36600*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36600*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:36603*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36603*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff444444; valaddr_reg:x3; val_offset:36606*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36606*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:36609*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36609*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:36612*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36612*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff666666; valaddr_reg:x3; val_offset:36615*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36615*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:36618*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36618*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:36621*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36621*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:36624*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36624*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:36627*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36627*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:36630*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36630*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:36633*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36633*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:36636*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36636*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:36639*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36639*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:36642*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36642*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:36645*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36645*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:36648*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36648*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:36651*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36651*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:36654*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36654*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:36657*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36657*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:36660*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36660*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:36663*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36663*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:36666*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36666*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:36669*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36669*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:36672*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36672*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:36675*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36675*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:36678*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36678*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:36681*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36681*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:36684*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36684*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:36687*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36687*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:36690*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36690*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:36693*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36693*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:36696*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36696*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:36699*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36699*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:36702*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36702*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:36705*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36705*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:36708*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36708*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:36711*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36711*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:36714*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36714*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:36717*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36717*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:36720*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36720*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:36723*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36723*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:36726*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36726*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:36729*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36729*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:36732*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36732*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:36735*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36735*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:36738*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36738*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:36741*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36741*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:36744*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36744*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:36747*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36747*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:36750*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36750*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:36753*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36753*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:36756*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36756*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:36759*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36759*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:36762*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36762*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:36765*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36765*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:36768*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36768*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:36771*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36771*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:36774*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36774*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:36777*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36777*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:36780*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36780*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:36783*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36783*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:36786*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36786*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:36789*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36789*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:36792*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36792*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:36795*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36795*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:36798*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36798*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:36801*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36801*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:36804*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36804*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:36807*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36807*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:36810*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36810*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:36813*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36813*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:36816*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36816*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:36819*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36819*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:36822*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36822*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:36825*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36825*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:36828*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36828*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:36831*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36831*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:36834*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36834*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:36837*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36837*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:36840*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36840*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:36843*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36843*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:36846*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36846*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:36849*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36849*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:36852*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36852*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:36855*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36855*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:36858*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36858*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:36861*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36861*0 + 3*95*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3883929599,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3883933695,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3883941887,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3883958271,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3883991039,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3884056575,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3884187647,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3884449791,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3884974079,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3886022655,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3888119807,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3888119808,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3890216960,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3891265536,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3891789824,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892051968,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892183040,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892248576,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892281344,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892297728,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892305920,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892310016,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892312064,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892313088,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892313600,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892313856,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892313984,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314048,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314080,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314096,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314104,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314108,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314110,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(3892314111,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2122333227,32,FLEN)
NAN_BOXED(3229583328,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2122408877,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2122452103,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
