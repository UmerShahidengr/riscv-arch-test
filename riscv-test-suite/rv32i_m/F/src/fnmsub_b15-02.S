
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_128:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa380000f; valaddr_reg:x3; val_offset:384*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 384*0 + 3*1*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa380001f; valaddr_reg:x3; val_offset:387*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 387*0 + 3*1*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa380003f; valaddr_reg:x3; val_offset:390*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*0 + 3*1*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa380007f; valaddr_reg:x3; val_offset:393*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 393*0 + 3*1*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa38000ff; valaddr_reg:x3; val_offset:396*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 396*0 + 3*1*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa38001ff; valaddr_reg:x3; val_offset:399*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 399*0 + 3*1*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa38003ff; valaddr_reg:x3; val_offset:402*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 402*0 + 3*1*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa38007ff; valaddr_reg:x3; val_offset:405*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*0 + 3*1*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3800fff; valaddr_reg:x3; val_offset:408*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 408*0 + 3*1*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3801fff; valaddr_reg:x3; val_offset:411*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 411*0 + 3*1*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3803fff; valaddr_reg:x3; val_offset:414*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 414*0 + 3*1*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3807fff; valaddr_reg:x3; val_offset:417*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 417*0 + 3*1*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa380ffff; valaddr_reg:x3; val_offset:420*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*0 + 3*1*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa381ffff; valaddr_reg:x3; val_offset:423*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 423*0 + 3*1*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa383ffff; valaddr_reg:x3; val_offset:426*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 426*0 + 3*1*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa387ffff; valaddr_reg:x3; val_offset:429*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 429*0 + 3*1*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa38fffff; valaddr_reg:x3; val_offset:432*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*0 + 3*1*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa39fffff; valaddr_reg:x3; val_offset:435*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 435*0 + 3*1*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3bfffff; valaddr_reg:x3; val_offset:438*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 438*0 + 3*1*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3c00000; valaddr_reg:x3; val_offset:441*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 441*0 + 3*1*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3e00000; valaddr_reg:x3; val_offset:444*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 444*0 + 3*1*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3f00000; valaddr_reg:x3; val_offset:447*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*0 + 3*1*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3f80000; valaddr_reg:x3; val_offset:450*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 450*0 + 3*1*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fc0000; valaddr_reg:x3; val_offset:453*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 453*0 + 3*1*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fe0000; valaddr_reg:x3; val_offset:456*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 456*0 + 3*1*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ff0000; valaddr_reg:x3; val_offset:459*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 459*0 + 3*1*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ff8000; valaddr_reg:x3; val_offset:462*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 462*0 + 3*1*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffc000; valaddr_reg:x3; val_offset:465*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 465*0 + 3*1*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffe000; valaddr_reg:x3; val_offset:468*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 468*0 + 3*1*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fff000; valaddr_reg:x3; val_offset:471*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 471*0 + 3*1*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fff800; valaddr_reg:x3; val_offset:474*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 474*0 + 3*1*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffc00; valaddr_reg:x3; val_offset:477*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 477*0 + 3*1*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffe00; valaddr_reg:x3; val_offset:480*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 480*0 + 3*1*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffff00; valaddr_reg:x3; val_offset:483*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 483*0 + 3*1*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffff80; valaddr_reg:x3; val_offset:486*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 486*0 + 3*1*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffffc0; valaddr_reg:x3; val_offset:489*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 489*0 + 3*1*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffffe0; valaddr_reg:x3; val_offset:492*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 492*0 + 3*1*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffff0; valaddr_reg:x3; val_offset:495*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 495*0 + 3*1*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffff8; valaddr_reg:x3; val_offset:498*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 498*0 + 3*1*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffffc; valaddr_reg:x3; val_offset:501*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 501*0 + 3*1*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3fffffe; valaddr_reg:x3; val_offset:504*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 504*0 + 3*1*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x47 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xa3ffffff; valaddr_reg:x3; val_offset:507*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 507*0 + 3*1*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:510*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 510*0 + 3*1*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:513*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 513*0 + 3*1*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:516*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 516*0 + 3*1*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:519*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 519*0 + 3*1*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:522*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 522*0 + 3*1*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:525*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 525*0 + 3*1*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:528*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 528*0 + 3*1*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:531*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 531*0 + 3*1*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:534*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 534*0 + 3*1*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:537*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 537*0 + 3*1*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:540*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 540*0 + 3*1*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:543*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 543*0 + 3*1*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:546*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 546*0 + 3*1*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:549*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 549*0 + 3*1*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:552*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 552*0 + 3*1*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xf6 and fm1 == 0x6522f2 and fs2 == 1 and fe2 == 0x07 and fm2 == 0x0f01a6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7b6522f2; op2val:0x838f01a6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:555*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 555*0 + 3*1*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc000000; valaddr_reg:x3; val_offset:558*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 558*0 + 3*1*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc000001; valaddr_reg:x3; val_offset:561*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 561*0 + 3*1*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc000003; valaddr_reg:x3; val_offset:564*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 564*0 + 3*1*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc000007; valaddr_reg:x3; val_offset:567*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 567*0 + 3*1*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc00000f; valaddr_reg:x3; val_offset:570*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 570*0 + 3*1*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc00001f; valaddr_reg:x3; val_offset:573*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 573*0 + 3*1*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc00003f; valaddr_reg:x3; val_offset:576*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 576*0 + 3*1*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc00007f; valaddr_reg:x3; val_offset:579*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 579*0 + 3*1*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc0000ff; valaddr_reg:x3; val_offset:582*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 582*0 + 3*1*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc0001ff; valaddr_reg:x3; val_offset:585*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 585*0 + 3*1*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc0003ff; valaddr_reg:x3; val_offset:588*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 588*0 + 3*1*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc0007ff; valaddr_reg:x3; val_offset:591*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 591*0 + 3*1*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc000fff; valaddr_reg:x3; val_offset:594*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 594*0 + 3*1*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc001fff; valaddr_reg:x3; val_offset:597*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 597*0 + 3*1*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc003fff; valaddr_reg:x3; val_offset:600*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 600*0 + 3*1*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc007fff; valaddr_reg:x3; val_offset:603*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 603*0 + 3*1*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc00ffff; valaddr_reg:x3; val_offset:606*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 606*0 + 3*1*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc01ffff; valaddr_reg:x3; val_offset:609*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 609*0 + 3*1*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc03ffff; valaddr_reg:x3; val_offset:612*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 612*0 + 3*1*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc07ffff; valaddr_reg:x3; val_offset:615*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 615*0 + 3*1*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc0fffff; valaddr_reg:x3; val_offset:618*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 618*0 + 3*1*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc1fffff; valaddr_reg:x3; val_offset:621*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 621*0 + 3*1*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc3fffff; valaddr_reg:x3; val_offset:624*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 624*0 + 3*1*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc400000; valaddr_reg:x3; val_offset:627*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 627*0 + 3*1*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc600000; valaddr_reg:x3; val_offset:630*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 630*0 + 3*1*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc700000; valaddr_reg:x3; val_offset:633*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 633*0 + 3*1*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc780000; valaddr_reg:x3; val_offset:636*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 636*0 + 3*1*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7c0000; valaddr_reg:x3; val_offset:639*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 639*0 + 3*1*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7e0000; valaddr_reg:x3; val_offset:642*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 642*0 + 3*1*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7f0000; valaddr_reg:x3; val_offset:645*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 645*0 + 3*1*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7f8000; valaddr_reg:x3; val_offset:648*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 648*0 + 3*1*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fc000; valaddr_reg:x3; val_offset:651*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 651*0 + 3*1*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fe000; valaddr_reg:x3; val_offset:654*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 654*0 + 3*1*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ff000; valaddr_reg:x3; val_offset:657*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 657*0 + 3*1*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ff800; valaddr_reg:x3; val_offset:660*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 660*0 + 3*1*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffc00; valaddr_reg:x3; val_offset:663*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 663*0 + 3*1*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffe00; valaddr_reg:x3; val_offset:666*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 666*0 + 3*1*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fff00; valaddr_reg:x3; val_offset:669*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 669*0 + 3*1*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fff80; valaddr_reg:x3; val_offset:672*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 672*0 + 3*1*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fffc0; valaddr_reg:x3; val_offset:675*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 675*0 + 3*1*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fffe0; valaddr_reg:x3; val_offset:678*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 678*0 + 3*1*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffff0; valaddr_reg:x3; val_offset:681*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 681*0 + 3*1*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffff8; valaddr_reg:x3; val_offset:684*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 684*0 + 3*1*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffffc; valaddr_reg:x3; val_offset:687*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 687*0 + 3*1*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7ffffe; valaddr_reg:x3; val_offset:690*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 690*0 + 3*1*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x78 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbc7fffff; valaddr_reg:x3; val_offset:693*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 693*0 + 3*1*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbf800001; valaddr_reg:x3; val_offset:696*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 696*0 + 3*1*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbf800003; valaddr_reg:x3; val_offset:699*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 699*0 + 3*1*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbf800007; valaddr_reg:x3; val_offset:702*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 702*0 + 3*1*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbf999999; valaddr_reg:x3; val_offset:705*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 705*0 + 3*1*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:708*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 708*0 + 3*1*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:711*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 711*0 + 3*1*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:714*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 714*0 + 3*1*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:717*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 717*0 + 3*1*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:720*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 720*0 + 3*1*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:723*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 723*0 + 3*1*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:726*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 726*0 + 3*1*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:729*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 729*0 + 3*1*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:732*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 732*0 + 3*1*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:735*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 735*0 + 3*1*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:738*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 738*0 + 3*1*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0xf7 and fm1 == 0x386f9d and fs2 == 1 and fe2 == 0x06 and fm2 == 0x31aa7d and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7bb86f9d; op2val:0x8331aa7d;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:741*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 741*0 + 3*1*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x32800000; valaddr_reg:x3; val_offset:744*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 744*0 + 3*1*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x32800001; valaddr_reg:x3; val_offset:747*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 747*0 + 3*1*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x32800003; valaddr_reg:x3; val_offset:750*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 750*0 + 3*1*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x32800007; valaddr_reg:x3; val_offset:753*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 753*0 + 3*1*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x3280000f; valaddr_reg:x3; val_offset:756*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 756*0 + 3*1*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x3280001f; valaddr_reg:x3; val_offset:759*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 759*0 + 3*1*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x3280003f; valaddr_reg:x3; val_offset:762*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 762*0 + 3*1*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x0cca22 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x68be96 and fs3 == 0 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c0cca22; op2val:0x2e8be96;
op3val:0x3280007f; valaddr_reg:x3; val_offset:765*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 765*0 + 3*1*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743074831,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743074847,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743074879,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743074943,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743075071,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743075327,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743075839,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743076863,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743078911,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743083007,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743091199,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743107583,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743140351,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743205887,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743336959,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2743599103,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2744123391,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2745171967,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2747269119,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2747269120,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2749366272,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2750414848,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2750939136,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751201280,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751332352,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751397888,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751430656,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751447040,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751455232,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751459328,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751461376,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751462400,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751462912,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463168,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463296,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463360,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463392,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463408,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463416,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463420,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463422,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(2751463423,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2070225650,32,FLEN)
NAN_BOXED(2207187366,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116608,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116609,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116611,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116615,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116623,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116639,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116671,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116735,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154116863,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154117119,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154117631,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154118655,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154120703,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154124799,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154132991,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154149375,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154182143,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154247679,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154378751,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3154640895,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3155165183,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3156213759,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3158310911,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3158310912,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3160408064,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3161456640,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3161980928,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162243072,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162374144,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162439680,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162472448,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162488832,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162497024,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162501120,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162503168,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162504192,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162504704,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162504960,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505088,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505152,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505184,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505200,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505208,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505212,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505214,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3162505215,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2075684765,32,FLEN)
NAN_BOXED(2201070205,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249408,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249409,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249411,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249415,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249423,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249439,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249471,32,FLEN)
NAN_BOXED(2081212962,32,FLEN)
NAN_BOXED(48807574,32,FLEN)
NAN_BOXED(847249535,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
