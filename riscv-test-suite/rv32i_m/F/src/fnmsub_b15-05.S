
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_512:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d80ffff; valaddr_reg:x3; val_offset:1536*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1536*0 + 3*4*FLEN/8, x4, x1, x2)

inst_513:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d81ffff; valaddr_reg:x3; val_offset:1539*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1539*0 + 3*4*FLEN/8, x4, x1, x2)

inst_514:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d83ffff; valaddr_reg:x3; val_offset:1542*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1542*0 + 3*4*FLEN/8, x4, x1, x2)

inst_515:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d87ffff; valaddr_reg:x3; val_offset:1545*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1545*0 + 3*4*FLEN/8, x4, x1, x2)

inst_516:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d8fffff; valaddr_reg:x3; val_offset:1548*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1548*0 + 3*4*FLEN/8, x4, x1, x2)

inst_517:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7d9fffff; valaddr_reg:x3; val_offset:1551*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1551*0 + 3*4*FLEN/8, x4, x1, x2)

inst_518:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dbfffff; valaddr_reg:x3; val_offset:1554*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1554*0 + 3*4*FLEN/8, x4, x1, x2)

inst_519:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dc00000; valaddr_reg:x3; val_offset:1557*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1557*0 + 3*4*FLEN/8, x4, x1, x2)

inst_520:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7de00000; valaddr_reg:x3; val_offset:1560*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1560*0 + 3*4*FLEN/8, x4, x1, x2)

inst_521:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7df00000; valaddr_reg:x3; val_offset:1563*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1563*0 + 3*4*FLEN/8, x4, x1, x2)

inst_522:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7df80000; valaddr_reg:x3; val_offset:1566*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1566*0 + 3*4*FLEN/8, x4, x1, x2)

inst_523:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfc0000; valaddr_reg:x3; val_offset:1569*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1569*0 + 3*4*FLEN/8, x4, x1, x2)

inst_524:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfe0000; valaddr_reg:x3; val_offset:1572*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1572*0 + 3*4*FLEN/8, x4, x1, x2)

inst_525:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dff0000; valaddr_reg:x3; val_offset:1575*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1575*0 + 3*4*FLEN/8, x4, x1, x2)

inst_526:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dff8000; valaddr_reg:x3; val_offset:1578*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1578*0 + 3*4*FLEN/8, x4, x1, x2)

inst_527:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffc000; valaddr_reg:x3; val_offset:1581*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1581*0 + 3*4*FLEN/8, x4, x1, x2)

inst_528:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffe000; valaddr_reg:x3; val_offset:1584*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1584*0 + 3*4*FLEN/8, x4, x1, x2)

inst_529:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfff000; valaddr_reg:x3; val_offset:1587*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1587*0 + 3*4*FLEN/8, x4, x1, x2)

inst_530:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfff800; valaddr_reg:x3; val_offset:1590*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1590*0 + 3*4*FLEN/8, x4, x1, x2)

inst_531:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffc00; valaddr_reg:x3; val_offset:1593*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1593*0 + 3*4*FLEN/8, x4, x1, x2)

inst_532:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffe00; valaddr_reg:x3; val_offset:1596*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1596*0 + 3*4*FLEN/8, x4, x1, x2)

inst_533:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffff00; valaddr_reg:x3; val_offset:1599*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1599*0 + 3*4*FLEN/8, x4, x1, x2)

inst_534:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffff80; valaddr_reg:x3; val_offset:1602*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1602*0 + 3*4*FLEN/8, x4, x1, x2)

inst_535:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffffc0; valaddr_reg:x3; val_offset:1605*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1605*0 + 3*4*FLEN/8, x4, x1, x2)

inst_536:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffffe0; valaddr_reg:x3; val_offset:1608*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1608*0 + 3*4*FLEN/8, x4, x1, x2)

inst_537:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffff0; valaddr_reg:x3; val_offset:1611*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1611*0 + 3*4*FLEN/8, x4, x1, x2)

inst_538:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffff8; valaddr_reg:x3; val_offset:1614*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1614*0 + 3*4*FLEN/8, x4, x1, x2)

inst_539:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffffc; valaddr_reg:x3; val_offset:1617*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1617*0 + 3*4*FLEN/8, x4, x1, x2)

inst_540:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dfffffe; valaddr_reg:x3; val_offset:1620*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1620*0 + 3*4*FLEN/8, x4, x1, x2)

inst_541:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7dffffff; valaddr_reg:x3; val_offset:1623*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1623*0 + 3*4*FLEN/8, x4, x1, x2)

inst_542:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f000001; valaddr_reg:x3; val_offset:1626*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1626*0 + 3*4*FLEN/8, x4, x1, x2)

inst_543:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f000003; valaddr_reg:x3; val_offset:1629*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1629*0 + 3*4*FLEN/8, x4, x1, x2)

inst_544:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f000007; valaddr_reg:x3; val_offset:1632*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1632*0 + 3*4*FLEN/8, x4, x1, x2)

inst_545:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f199999; valaddr_reg:x3; val_offset:1635*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1635*0 + 3*4*FLEN/8, x4, x1, x2)

inst_546:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f249249; valaddr_reg:x3; val_offset:1638*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1638*0 + 3*4*FLEN/8, x4, x1, x2)

inst_547:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f333333; valaddr_reg:x3; val_offset:1641*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1641*0 + 3*4*FLEN/8, x4, x1, x2)

inst_548:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:1644*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1644*0 + 3*4*FLEN/8, x4, x1, x2)

inst_549:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:1647*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1647*0 + 3*4*FLEN/8, x4, x1, x2)

inst_550:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f444444; valaddr_reg:x3; val_offset:1650*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1650*0 + 3*4*FLEN/8, x4, x1, x2)

inst_551:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:1653*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1653*0 + 3*4*FLEN/8, x4, x1, x2)

inst_552:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:1656*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1656*0 + 3*4*FLEN/8, x4, x1, x2)

inst_553:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f666666; valaddr_reg:x3; val_offset:1659*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1659*0 + 3*4*FLEN/8, x4, x1, x2)

inst_554:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:1662*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1662*0 + 3*4*FLEN/8, x4, x1, x2)

inst_555:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:1665*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1665*0 + 3*4*FLEN/8, x4, x1, x2)

inst_556:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:1668*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1668*0 + 3*4*FLEN/8, x4, x1, x2)

inst_557:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x683eac and fs2 == 0 and fe2 == 0x85 and fm2 == 0x0d17ac and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c683eac; op2val:0x428d17ac;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:1671*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1671*0 + 3*4*FLEN/8, x4, x1, x2)

inst_558:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34000000; valaddr_reg:x3; val_offset:1674*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1674*0 + 3*4*FLEN/8, x4, x1, x2)

inst_559:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34000001; valaddr_reg:x3; val_offset:1677*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1677*0 + 3*4*FLEN/8, x4, x1, x2)

inst_560:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34000003; valaddr_reg:x3; val_offset:1680*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1680*0 + 3*4*FLEN/8, x4, x1, x2)

inst_561:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34000007; valaddr_reg:x3; val_offset:1683*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1683*0 + 3*4*FLEN/8, x4, x1, x2)

inst_562:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3400000f; valaddr_reg:x3; val_offset:1686*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1686*0 + 3*4*FLEN/8, x4, x1, x2)

inst_563:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3400001f; valaddr_reg:x3; val_offset:1689*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1689*0 + 3*4*FLEN/8, x4, x1, x2)

inst_564:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3400003f; valaddr_reg:x3; val_offset:1692*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1692*0 + 3*4*FLEN/8, x4, x1, x2)

inst_565:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3400007f; valaddr_reg:x3; val_offset:1695*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1695*0 + 3*4*FLEN/8, x4, x1, x2)

inst_566:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x340000ff; valaddr_reg:x3; val_offset:1698*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1698*0 + 3*4*FLEN/8, x4, x1, x2)

inst_567:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x340001ff; valaddr_reg:x3; val_offset:1701*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1701*0 + 3*4*FLEN/8, x4, x1, x2)

inst_568:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x340003ff; valaddr_reg:x3; val_offset:1704*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1704*0 + 3*4*FLEN/8, x4, x1, x2)

inst_569:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x340007ff; valaddr_reg:x3; val_offset:1707*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1707*0 + 3*4*FLEN/8, x4, x1, x2)

inst_570:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34000fff; valaddr_reg:x3; val_offset:1710*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1710*0 + 3*4*FLEN/8, x4, x1, x2)

inst_571:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34001fff; valaddr_reg:x3; val_offset:1713*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1713*0 + 3*4*FLEN/8, x4, x1, x2)

inst_572:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34003fff; valaddr_reg:x3; val_offset:1716*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1716*0 + 3*4*FLEN/8, x4, x1, x2)

inst_573:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34007fff; valaddr_reg:x3; val_offset:1719*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1719*0 + 3*4*FLEN/8, x4, x1, x2)

inst_574:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3400ffff; valaddr_reg:x3; val_offset:1722*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1722*0 + 3*4*FLEN/8, x4, x1, x2)

inst_575:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3401ffff; valaddr_reg:x3; val_offset:1725*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1725*0 + 3*4*FLEN/8, x4, x1, x2)

inst_576:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3403ffff; valaddr_reg:x3; val_offset:1728*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1728*0 + 3*4*FLEN/8, x4, x1, x2)

inst_577:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3407ffff; valaddr_reg:x3; val_offset:1731*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1731*0 + 3*4*FLEN/8, x4, x1, x2)

inst_578:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x340fffff; valaddr_reg:x3; val_offset:1734*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1734*0 + 3*4*FLEN/8, x4, x1, x2)

inst_579:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x341fffff; valaddr_reg:x3; val_offset:1737*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1737*0 + 3*4*FLEN/8, x4, x1, x2)

inst_580:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x343fffff; valaddr_reg:x3; val_offset:1740*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1740*0 + 3*4*FLEN/8, x4, x1, x2)

inst_581:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34400000; valaddr_reg:x3; val_offset:1743*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1743*0 + 3*4*FLEN/8, x4, x1, x2)

inst_582:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34600000; valaddr_reg:x3; val_offset:1746*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1746*0 + 3*4*FLEN/8, x4, x1, x2)

inst_583:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34700000; valaddr_reg:x3; val_offset:1749*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1749*0 + 3*4*FLEN/8, x4, x1, x2)

inst_584:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x34780000; valaddr_reg:x3; val_offset:1752*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1752*0 + 3*4*FLEN/8, x4, x1, x2)

inst_585:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347c0000; valaddr_reg:x3; val_offset:1755*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1755*0 + 3*4*FLEN/8, x4, x1, x2)

inst_586:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347e0000; valaddr_reg:x3; val_offset:1758*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1758*0 + 3*4*FLEN/8, x4, x1, x2)

inst_587:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347f0000; valaddr_reg:x3; val_offset:1761*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1761*0 + 3*4*FLEN/8, x4, x1, x2)

inst_588:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347f8000; valaddr_reg:x3; val_offset:1764*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1764*0 + 3*4*FLEN/8, x4, x1, x2)

inst_589:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fc000; valaddr_reg:x3; val_offset:1767*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1767*0 + 3*4*FLEN/8, x4, x1, x2)

inst_590:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fe000; valaddr_reg:x3; val_offset:1770*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1770*0 + 3*4*FLEN/8, x4, x1, x2)

inst_591:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ff000; valaddr_reg:x3; val_offset:1773*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1773*0 + 3*4*FLEN/8, x4, x1, x2)

inst_592:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ff800; valaddr_reg:x3; val_offset:1776*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1776*0 + 3*4*FLEN/8, x4, x1, x2)

inst_593:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffc00; valaddr_reg:x3; val_offset:1779*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1779*0 + 3*4*FLEN/8, x4, x1, x2)

inst_594:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffe00; valaddr_reg:x3; val_offset:1782*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1782*0 + 3*4*FLEN/8, x4, x1, x2)

inst_595:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fff00; valaddr_reg:x3; val_offset:1785*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1785*0 + 3*4*FLEN/8, x4, x1, x2)

inst_596:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fff80; valaddr_reg:x3; val_offset:1788*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1788*0 + 3*4*FLEN/8, x4, x1, x2)

inst_597:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fffc0; valaddr_reg:x3; val_offset:1791*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1791*0 + 3*4*FLEN/8, x4, x1, x2)

inst_598:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fffe0; valaddr_reg:x3; val_offset:1794*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1794*0 + 3*4*FLEN/8, x4, x1, x2)

inst_599:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffff0; valaddr_reg:x3; val_offset:1797*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1797*0 + 3*4*FLEN/8, x4, x1, x2)

inst_600:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffff8; valaddr_reg:x3; val_offset:1800*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1800*0 + 3*4*FLEN/8, x4, x1, x2)

inst_601:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffffc; valaddr_reg:x3; val_offset:1803*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1803*0 + 3*4*FLEN/8, x4, x1, x2)

inst_602:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347ffffe; valaddr_reg:x3; val_offset:1806*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1806*0 + 3*4*FLEN/8, x4, x1, x2)

inst_603:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x68 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x347fffff; valaddr_reg:x3; val_offset:1809*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1809*0 + 3*4*FLEN/8, x4, x1, x2)

inst_604:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:1812*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1812*0 + 3*4*FLEN/8, x4, x1, x2)

inst_605:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:1815*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1815*0 + 3*4*FLEN/8, x4, x1, x2)

inst_606:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:1818*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1818*0 + 3*4*FLEN/8, x4, x1, x2)

inst_607:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:1821*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1821*0 + 3*4*FLEN/8, x4, x1, x2)

inst_608:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:1824*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1824*0 + 3*4*FLEN/8, x4, x1, x2)

inst_609:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:1827*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1827*0 + 3*4*FLEN/8, x4, x1, x2)

inst_610:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:1830*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1830*0 + 3*4*FLEN/8, x4, x1, x2)

inst_611:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:1833*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1833*0 + 3*4*FLEN/8, x4, x1, x2)

inst_612:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:1836*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1836*0 + 3*4*FLEN/8, x4, x1, x2)

inst_613:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:1839*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1839*0 + 3*4*FLEN/8, x4, x1, x2)

inst_614:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:1842*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1842*0 + 3*4*FLEN/8, x4, x1, x2)

inst_615:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:1845*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1845*0 + 3*4*FLEN/8, x4, x1, x2)

inst_616:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:1848*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1848*0 + 3*4*FLEN/8, x4, x1, x2)

inst_617:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:1851*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1851*0 + 3*4*FLEN/8, x4, x1, x2)

inst_618:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:1854*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1854*0 + 3*4*FLEN/8, x4, x1, x2)

inst_619:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x7668ef and fs2 == 0 and fe2 == 0x05 and fm2 == 0x04fb4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c7668ef; op2val:0x284fb4e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:1857*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1857*0 + 3*4*FLEN/8, x4, x1, x2)

inst_620:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4800000; valaddr_reg:x3; val_offset:1860*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1860*0 + 3*4*FLEN/8, x4, x1, x2)

inst_621:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4800001; valaddr_reg:x3; val_offset:1863*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1863*0 + 3*4*FLEN/8, x4, x1, x2)

inst_622:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4800003; valaddr_reg:x3; val_offset:1866*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1866*0 + 3*4*FLEN/8, x4, x1, x2)

inst_623:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4800007; valaddr_reg:x3; val_offset:1869*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1869*0 + 3*4*FLEN/8, x4, x1, x2)

inst_624:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x480000f; valaddr_reg:x3; val_offset:1872*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1872*0 + 3*4*FLEN/8, x4, x1, x2)

inst_625:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x480001f; valaddr_reg:x3; val_offset:1875*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1875*0 + 3*4*FLEN/8, x4, x1, x2)

inst_626:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x480003f; valaddr_reg:x3; val_offset:1878*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1878*0 + 3*4*FLEN/8, x4, x1, x2)

inst_627:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x480007f; valaddr_reg:x3; val_offset:1881*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1881*0 + 3*4*FLEN/8, x4, x1, x2)

inst_628:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x48000ff; valaddr_reg:x3; val_offset:1884*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1884*0 + 3*4*FLEN/8, x4, x1, x2)

inst_629:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x48001ff; valaddr_reg:x3; val_offset:1887*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1887*0 + 3*4*FLEN/8, x4, x1, x2)

inst_630:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x48003ff; valaddr_reg:x3; val_offset:1890*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1890*0 + 3*4*FLEN/8, x4, x1, x2)

inst_631:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x48007ff; valaddr_reg:x3; val_offset:1893*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1893*0 + 3*4*FLEN/8, x4, x1, x2)

inst_632:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4800fff; valaddr_reg:x3; val_offset:1896*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1896*0 + 3*4*FLEN/8, x4, x1, x2)

inst_633:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4801fff; valaddr_reg:x3; val_offset:1899*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1899*0 + 3*4*FLEN/8, x4, x1, x2)

inst_634:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4803fff; valaddr_reg:x3; val_offset:1902*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1902*0 + 3*4*FLEN/8, x4, x1, x2)

inst_635:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4807fff; valaddr_reg:x3; val_offset:1905*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1905*0 + 3*4*FLEN/8, x4, x1, x2)

inst_636:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x480ffff; valaddr_reg:x3; val_offset:1908*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1908*0 + 3*4*FLEN/8, x4, x1, x2)

inst_637:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x481ffff; valaddr_reg:x3; val_offset:1911*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1911*0 + 3*4*FLEN/8, x4, x1, x2)

inst_638:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x483ffff; valaddr_reg:x3; val_offset:1914*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1914*0 + 3*4*FLEN/8, x4, x1, x2)

inst_639:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x487ffff; valaddr_reg:x3; val_offset:1917*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1917*0 + 3*4*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2105606143,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2105671679,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2105802751,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2106064895,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2106589183,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2107637759,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2109734911,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2109734912,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2111832064,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2112880640,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113404928,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113667072,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113798144,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113863680,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113896448,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113912832,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113921024,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113925120,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113927168,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113928192,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113928704,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113928960,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929088,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929152,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929184,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929200,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929208,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929212,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929214,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2113929215,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2087206572,32,FLEN)
NAN_BOXED(1116542892,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415232,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415233,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415235,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415239,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415247,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415263,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415295,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415359,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415487,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872415743,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872416255,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872417279,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872419327,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872423423,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872431615,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872447999,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872480767,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872546303,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872677375,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(872939519,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(873463807,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(874512383,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(876609535,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(876609536,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(878706688,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(879755264,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880279552,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880541696,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880672768,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880738304,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880771072,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880787456,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880795648,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880799744,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880801792,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880802816,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803328,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803584,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803712,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803776,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803808,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803824,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803832,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803836,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803838,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(880803839,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2088134895,32,FLEN)
NAN_BOXED(42269518,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
