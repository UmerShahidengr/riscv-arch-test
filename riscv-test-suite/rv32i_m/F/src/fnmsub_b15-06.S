
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_640:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x48fffff; valaddr_reg:x3; val_offset:1920*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1920*0 + 3*5*FLEN/8, x4, x1, x2)

inst_641:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x49fffff; valaddr_reg:x3; val_offset:1923*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1923*0 + 3*5*FLEN/8, x4, x1, x2)

inst_642:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:1926*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1926*0 + 3*5*FLEN/8, x4, x1, x2)

inst_643:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4c00000; valaddr_reg:x3; val_offset:1929*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1929*0 + 3*5*FLEN/8, x4, x1, x2)

inst_644:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4e00000; valaddr_reg:x3; val_offset:1932*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1932*0 + 3*5*FLEN/8, x4, x1, x2)

inst_645:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4f00000; valaddr_reg:x3; val_offset:1935*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1935*0 + 3*5*FLEN/8, x4, x1, x2)

inst_646:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4f80000; valaddr_reg:x3; val_offset:1938*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1938*0 + 3*5*FLEN/8, x4, x1, x2)

inst_647:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:1941*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1941*0 + 3*5*FLEN/8, x4, x1, x2)

inst_648:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:1944*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1944*0 + 3*5*FLEN/8, x4, x1, x2)

inst_649:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:1947*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1947*0 + 3*5*FLEN/8, x4, x1, x2)

inst_650:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:1950*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1950*0 + 3*5*FLEN/8, x4, x1, x2)

inst_651:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:1953*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1953*0 + 3*5*FLEN/8, x4, x1, x2)

inst_652:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:1956*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1956*0 + 3*5*FLEN/8, x4, x1, x2)

inst_653:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fff000; valaddr_reg:x3; val_offset:1959*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1959*0 + 3*5*FLEN/8, x4, x1, x2)

inst_654:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fff800; valaddr_reg:x3; val_offset:1962*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1962*0 + 3*5*FLEN/8, x4, x1, x2)

inst_655:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:1965*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1965*0 + 3*5*FLEN/8, x4, x1, x2)

inst_656:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:1968*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1968*0 + 3*5*FLEN/8, x4, x1, x2)

inst_657:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:1971*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1971*0 + 3*5*FLEN/8, x4, x1, x2)

inst_658:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:1974*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1974*0 + 3*5*FLEN/8, x4, x1, x2)

inst_659:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:1977*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1977*0 + 3*5*FLEN/8, x4, x1, x2)

inst_660:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:1980*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1980*0 + 3*5*FLEN/8, x4, x1, x2)

inst_661:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:1983*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1983*0 + 3*5*FLEN/8, x4, x1, x2)

inst_662:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:1986*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1986*0 + 3*5*FLEN/8, x4, x1, x2)

inst_663:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:1989*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1989*0 + 3*5*FLEN/8, x4, x1, x2)

inst_664:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:1992*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1992*0 + 3*5*FLEN/8, x4, x1, x2)

inst_665:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:1995*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1995*0 + 3*5*FLEN/8, x4, x1, x2)

inst_666:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3f800001; valaddr_reg:x3; val_offset:1998*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 1998*0 + 3*5*FLEN/8, x4, x1, x2)

inst_667:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3f800003; valaddr_reg:x3; val_offset:2001*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2001*0 + 3*5*FLEN/8, x4, x1, x2)

inst_668:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3f800007; valaddr_reg:x3; val_offset:2004*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2004*0 + 3*5*FLEN/8, x4, x1, x2)

inst_669:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3f999999; valaddr_reg:x3; val_offset:2007*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2007*0 + 3*5*FLEN/8, x4, x1, x2)

inst_670:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:2010*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2010*0 + 3*5*FLEN/8, x4, x1, x2)

inst_671:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:2013*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2013*0 + 3*5*FLEN/8, x4, x1, x2)

inst_672:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:2016*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2016*0 + 3*5*FLEN/8, x4, x1, x2)

inst_673:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:2019*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2019*0 + 3*5*FLEN/8, x4, x1, x2)

inst_674:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:2022*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2022*0 + 3*5*FLEN/8, x4, x1, x2)

inst_675:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:2025*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2025*0 + 3*5*FLEN/8, x4, x1, x2)

inst_676:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:2028*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2028*0 + 3*5*FLEN/8, x4, x1, x2)

inst_677:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:2031*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2031*0 + 3*5*FLEN/8, x4, x1, x2)

inst_678:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:2034*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2034*0 + 3*5*FLEN/8, x4, x1, x2)

inst_679:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:2037*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2037*0 + 3*5*FLEN/8, x4, x1, x2)

inst_680:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:2040*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2040*0 + 3*5*FLEN/8, x4, x1, x2)

inst_681:
// fs1 == 0 and fe1 == 0xf8 and fm1 == 0x774ce3 and fs2 == 0 and fe2 == 0x05 and fm2 == 0x0480ba and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c774ce3; op2val:0x28480ba;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:2043*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2043*0 + 3*5*FLEN/8, x4, x1, x2)

inst_682:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39000000; valaddr_reg:x3; val_offset:2046*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2046*0 + 3*5*FLEN/8, x4, x1, x2)

inst_683:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39000001; valaddr_reg:x3; val_offset:2049*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2049*0 + 3*5*FLEN/8, x4, x1, x2)

inst_684:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39000003; valaddr_reg:x3; val_offset:2052*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2052*0 + 3*5*FLEN/8, x4, x1, x2)

inst_685:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39000007; valaddr_reg:x3; val_offset:2055*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2055*0 + 3*5*FLEN/8, x4, x1, x2)

inst_686:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3900000f; valaddr_reg:x3; val_offset:2058*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2058*0 + 3*5*FLEN/8, x4, x1, x2)

inst_687:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3900001f; valaddr_reg:x3; val_offset:2061*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2061*0 + 3*5*FLEN/8, x4, x1, x2)

inst_688:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3900003f; valaddr_reg:x3; val_offset:2064*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2064*0 + 3*5*FLEN/8, x4, x1, x2)

inst_689:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3900007f; valaddr_reg:x3; val_offset:2067*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2067*0 + 3*5*FLEN/8, x4, x1, x2)

inst_690:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x390000ff; valaddr_reg:x3; val_offset:2070*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2070*0 + 3*5*FLEN/8, x4, x1, x2)

inst_691:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x390001ff; valaddr_reg:x3; val_offset:2073*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2073*0 + 3*5*FLEN/8, x4, x1, x2)

inst_692:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x390003ff; valaddr_reg:x3; val_offset:2076*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2076*0 + 3*5*FLEN/8, x4, x1, x2)

inst_693:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x390007ff; valaddr_reg:x3; val_offset:2079*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2079*0 + 3*5*FLEN/8, x4, x1, x2)

inst_694:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39000fff; valaddr_reg:x3; val_offset:2082*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2082*0 + 3*5*FLEN/8, x4, x1, x2)

inst_695:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39001fff; valaddr_reg:x3; val_offset:2085*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2085*0 + 3*5*FLEN/8, x4, x1, x2)

inst_696:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39003fff; valaddr_reg:x3; val_offset:2088*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2088*0 + 3*5*FLEN/8, x4, x1, x2)

inst_697:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39007fff; valaddr_reg:x3; val_offset:2091*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2091*0 + 3*5*FLEN/8, x4, x1, x2)

inst_698:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3900ffff; valaddr_reg:x3; val_offset:2094*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2094*0 + 3*5*FLEN/8, x4, x1, x2)

inst_699:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3901ffff; valaddr_reg:x3; val_offset:2097*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2097*0 + 3*5*FLEN/8, x4, x1, x2)

inst_700:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3903ffff; valaddr_reg:x3; val_offset:2100*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2100*0 + 3*5*FLEN/8, x4, x1, x2)

inst_701:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3907ffff; valaddr_reg:x3; val_offset:2103*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2103*0 + 3*5*FLEN/8, x4, x1, x2)

inst_702:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x390fffff; valaddr_reg:x3; val_offset:2106*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2106*0 + 3*5*FLEN/8, x4, x1, x2)

inst_703:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x391fffff; valaddr_reg:x3; val_offset:2109*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2109*0 + 3*5*FLEN/8, x4, x1, x2)

inst_704:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x393fffff; valaddr_reg:x3; val_offset:2112*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2112*0 + 3*5*FLEN/8, x4, x1, x2)

inst_705:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39400000; valaddr_reg:x3; val_offset:2115*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2115*0 + 3*5*FLEN/8, x4, x1, x2)

inst_706:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39600000; valaddr_reg:x3; val_offset:2118*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2118*0 + 3*5*FLEN/8, x4, x1, x2)

inst_707:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39700000; valaddr_reg:x3; val_offset:2121*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2121*0 + 3*5*FLEN/8, x4, x1, x2)

inst_708:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x39780000; valaddr_reg:x3; val_offset:2124*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2124*0 + 3*5*FLEN/8, x4, x1, x2)

inst_709:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397c0000; valaddr_reg:x3; val_offset:2127*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2127*0 + 3*5*FLEN/8, x4, x1, x2)

inst_710:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397e0000; valaddr_reg:x3; val_offset:2130*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2130*0 + 3*5*FLEN/8, x4, x1, x2)

inst_711:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397f0000; valaddr_reg:x3; val_offset:2133*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2133*0 + 3*5*FLEN/8, x4, x1, x2)

inst_712:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397f8000; valaddr_reg:x3; val_offset:2136*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2136*0 + 3*5*FLEN/8, x4, x1, x2)

inst_713:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fc000; valaddr_reg:x3; val_offset:2139*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2139*0 + 3*5*FLEN/8, x4, x1, x2)

inst_714:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fe000; valaddr_reg:x3; val_offset:2142*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2142*0 + 3*5*FLEN/8, x4, x1, x2)

inst_715:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ff000; valaddr_reg:x3; val_offset:2145*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2145*0 + 3*5*FLEN/8, x4, x1, x2)

inst_716:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ff800; valaddr_reg:x3; val_offset:2148*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2148*0 + 3*5*FLEN/8, x4, x1, x2)

inst_717:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffc00; valaddr_reg:x3; val_offset:2151*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2151*0 + 3*5*FLEN/8, x4, x1, x2)

inst_718:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffe00; valaddr_reg:x3; val_offset:2154*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2154*0 + 3*5*FLEN/8, x4, x1, x2)

inst_719:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fff00; valaddr_reg:x3; val_offset:2157*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2157*0 + 3*5*FLEN/8, x4, x1, x2)

inst_720:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fff80; valaddr_reg:x3; val_offset:2160*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2160*0 + 3*5*FLEN/8, x4, x1, x2)

inst_721:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fffc0; valaddr_reg:x3; val_offset:2163*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2163*0 + 3*5*FLEN/8, x4, x1, x2)

inst_722:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fffe0; valaddr_reg:x3; val_offset:2166*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2166*0 + 3*5*FLEN/8, x4, x1, x2)

inst_723:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffff0; valaddr_reg:x3; val_offset:2169*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2169*0 + 3*5*FLEN/8, x4, x1, x2)

inst_724:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffff8; valaddr_reg:x3; val_offset:2172*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2172*0 + 3*5*FLEN/8, x4, x1, x2)

inst_725:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffffc; valaddr_reg:x3; val_offset:2175*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2175*0 + 3*5*FLEN/8, x4, x1, x2)

inst_726:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397ffffe; valaddr_reg:x3; val_offset:2178*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2178*0 + 3*5*FLEN/8, x4, x1, x2)

inst_727:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x72 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x397fffff; valaddr_reg:x3; val_offset:2181*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2181*0 + 3*5*FLEN/8, x4, x1, x2)

inst_728:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:2184*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2184*0 + 3*5*FLEN/8, x4, x1, x2)

inst_729:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:2187*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2187*0 + 3*5*FLEN/8, x4, x1, x2)

inst_730:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:2190*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2190*0 + 3*5*FLEN/8, x4, x1, x2)

inst_731:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:2193*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2193*0 + 3*5*FLEN/8, x4, x1, x2)

inst_732:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:2196*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2196*0 + 3*5*FLEN/8, x4, x1, x2)

inst_733:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:2199*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2199*0 + 3*5*FLEN/8, x4, x1, x2)

inst_734:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:2202*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2202*0 + 3*5*FLEN/8, x4, x1, x2)

inst_735:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:2205*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2205*0 + 3*5*FLEN/8, x4, x1, x2)

inst_736:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:2208*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2208*0 + 3*5*FLEN/8, x4, x1, x2)

inst_737:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:2211*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2211*0 + 3*5*FLEN/8, x4, x1, x2)

inst_738:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:2214*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2214*0 + 3*5*FLEN/8, x4, x1, x2)

inst_739:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:2217*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2217*0 + 3*5*FLEN/8, x4, x1, x2)

inst_740:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:2220*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2220*0 + 3*5*FLEN/8, x4, x1, x2)

inst_741:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:2223*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2223*0 + 3*5*FLEN/8, x4, x1, x2)

inst_742:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:2226*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2226*0 + 3*5*FLEN/8, x4, x1, x2)

inst_743:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x084a01 and fs2 == 0 and fe2 == 0x04 and fm2 == 0x706e1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c884a01; op2val:0x2706e1b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:2229*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2229*0 + 3*5*FLEN/8, x4, x1, x2)

inst_744:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6800000; valaddr_reg:x3; val_offset:2232*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2232*0 + 3*5*FLEN/8, x4, x1, x2)

inst_745:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6800001; valaddr_reg:x3; val_offset:2235*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2235*0 + 3*5*FLEN/8, x4, x1, x2)

inst_746:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6800003; valaddr_reg:x3; val_offset:2238*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2238*0 + 3*5*FLEN/8, x4, x1, x2)

inst_747:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6800007; valaddr_reg:x3; val_offset:2241*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2241*0 + 3*5*FLEN/8, x4, x1, x2)

inst_748:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf680000f; valaddr_reg:x3; val_offset:2244*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2244*0 + 3*5*FLEN/8, x4, x1, x2)

inst_749:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf680001f; valaddr_reg:x3; val_offset:2247*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2247*0 + 3*5*FLEN/8, x4, x1, x2)

inst_750:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf680003f; valaddr_reg:x3; val_offset:2250*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2250*0 + 3*5*FLEN/8, x4, x1, x2)

inst_751:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf680007f; valaddr_reg:x3; val_offset:2253*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2253*0 + 3*5*FLEN/8, x4, x1, x2)

inst_752:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf68000ff; valaddr_reg:x3; val_offset:2256*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2256*0 + 3*5*FLEN/8, x4, x1, x2)

inst_753:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf68001ff; valaddr_reg:x3; val_offset:2259*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2259*0 + 3*5*FLEN/8, x4, x1, x2)

inst_754:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf68003ff; valaddr_reg:x3; val_offset:2262*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2262*0 + 3*5*FLEN/8, x4, x1, x2)

inst_755:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf68007ff; valaddr_reg:x3; val_offset:2265*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2265*0 + 3*5*FLEN/8, x4, x1, x2)

inst_756:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6800fff; valaddr_reg:x3; val_offset:2268*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2268*0 + 3*5*FLEN/8, x4, x1, x2)

inst_757:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6801fff; valaddr_reg:x3; val_offset:2271*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2271*0 + 3*5*FLEN/8, x4, x1, x2)

inst_758:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6803fff; valaddr_reg:x3; val_offset:2274*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2274*0 + 3*5*FLEN/8, x4, x1, x2)

inst_759:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6807fff; valaddr_reg:x3; val_offset:2277*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2277*0 + 3*5*FLEN/8, x4, x1, x2)

inst_760:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf680ffff; valaddr_reg:x3; val_offset:2280*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2280*0 + 3*5*FLEN/8, x4, x1, x2)

inst_761:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf681ffff; valaddr_reg:x3; val_offset:2283*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2283*0 + 3*5*FLEN/8, x4, x1, x2)

inst_762:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf683ffff; valaddr_reg:x3; val_offset:2286*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2286*0 + 3*5*FLEN/8, x4, x1, x2)

inst_763:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf687ffff; valaddr_reg:x3; val_offset:2289*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2289*0 + 3*5*FLEN/8, x4, x1, x2)

inst_764:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf68fffff; valaddr_reg:x3; val_offset:2292*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2292*0 + 3*5*FLEN/8, x4, x1, x2)

inst_765:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf69fffff; valaddr_reg:x3; val_offset:2295*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2295*0 + 3*5*FLEN/8, x4, x1, x2)

inst_766:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6bfffff; valaddr_reg:x3; val_offset:2298*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2298*0 + 3*5*FLEN/8, x4, x1, x2)

inst_767:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x09cd3c and fs2 == 1 and fe2 == 0x84 and fm2 == 0x6dca7b and fs3 == 1 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7c89cd3c; op2val:0xc26dca7b;
op3val:0xf6c00000; valaddr_reg:x3; val_offset:2301*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 2301*0 + 3*5*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2088193251,32,FLEN)
NAN_BOXED(42238138,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301312,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301313,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301315,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301319,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301327,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301343,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301375,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301439,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301567,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956301823,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956302335,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956303359,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956305407,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956309503,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956317695,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956334079,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956366847,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956432383,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956563455,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(956825599,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(957349887,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(958398463,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(960495615,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(960495616,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(962592768,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(963641344,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964165632,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964427776,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964558848,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964624384,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964657152,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964673536,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964681728,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964685824,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964687872,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964688896,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689408,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689664,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689792,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689856,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689888,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689904,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689912,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689916,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689918,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(964689919,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2089306625,32,FLEN)
NAN_BOXED(40922651,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583744,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583745,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583747,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583751,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583759,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583775,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583807,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583871,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135583999,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135584255,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135584767,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135585791,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135587839,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135591935,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135600127,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135616511,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135649279,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135714815,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4135845887,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4136108031,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4136632319,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4137680895,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4139778047,32,FLEN)
NAN_BOXED(2089405756,32,FLEN)
NAN_BOXED(3261975163,32,FLEN)
NAN_BOXED(4139778048,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
