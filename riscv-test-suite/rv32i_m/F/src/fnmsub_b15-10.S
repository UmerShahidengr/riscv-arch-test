
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1152:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:3456*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3456*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1153:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:3459*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3459*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1154:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:3462*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3462*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1155:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:3465*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3465*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1156:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:3468*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3468*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1157:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:3471*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3471*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1158:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:3474*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3474*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1159:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:3477*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3477*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1160:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:3480*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3480*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1161:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:3483*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3483*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1162:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:3486*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3486*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1163:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:3489*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3489*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1164:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:3492*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3492*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1165:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:3495*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3495*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1166:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:3498*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3498*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1167:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:3501*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3501*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1168:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:3504*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3504*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1169:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:3507*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3507*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1170:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:3510*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3510*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1171:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:3513*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3513*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1172:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:3516*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3516*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1173:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:3519*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3519*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1174:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:3522*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3522*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1175:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:3525*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3525*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1176:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:3528*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3528*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1177:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x2c9cb5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cac9cb5; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:3531*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3531*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1178:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:3534*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3534*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1179:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:3537*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3537*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1180:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:3540*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3540*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1181:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:3543*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3543*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1182:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:3546*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3546*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1183:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:3549*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3549*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1184:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:3552*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3552*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1185:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:3555*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3555*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1186:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:3558*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3558*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1187:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:3561*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3561*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1188:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:3564*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3564*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1189:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:3567*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3567*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1190:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:3570*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3570*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1191:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:3573*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3573*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1192:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:3576*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3576*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1193:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:3579*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3579*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1194:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:3582*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3582*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1195:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:3585*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3585*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1196:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:3588*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3588*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1197:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:3591*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3591*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1198:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:3594*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3594*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1199:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:3597*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3597*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1200:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:3600*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3600*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1201:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:3603*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3603*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1202:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:3606*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3606*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1203:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:3609*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3609*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1204:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:3612*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3612*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1205:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:3615*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3615*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1206:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:3618*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3618*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1207:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:3621*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3621*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1208:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:3624*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3624*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1209:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:3627*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3627*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1210:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:3630*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3630*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1211:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:3633*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3633*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1212:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:3636*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3636*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1213:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:3639*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3639*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1214:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:3642*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3642*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1215:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:3645*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3645*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1216:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:3648*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3648*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1217:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:3651*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3651*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1218:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:3654*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3654*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1219:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:3657*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3657*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1220:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:3660*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3660*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1221:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:3663*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3663*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1222:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:3666*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3666*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1223:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:3669*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3669*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1224:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:3672*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3672*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1225:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:3675*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3675*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1226:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:3678*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3678*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1227:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:3681*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3681*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1228:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:3684*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3684*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1229:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:3687*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3687*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1230:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:3690*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3690*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1231:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:3693*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3693*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1232:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:3696*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3696*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1233:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:3699*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3699*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1234:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:3702*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3702*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1235:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:3705*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3705*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1236:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:3708*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3708*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1237:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:3711*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3711*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1238:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:3714*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3714*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1239:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x34894c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb4894c; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:3717*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3717*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1240:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71000000; valaddr_reg:x3; val_offset:3720*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3720*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1241:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71000001; valaddr_reg:x3; val_offset:3723*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3723*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1242:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71000003; valaddr_reg:x3; val_offset:3726*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3726*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1243:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71000007; valaddr_reg:x3; val_offset:3729*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3729*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1244:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7100000f; valaddr_reg:x3; val_offset:3732*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3732*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1245:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7100001f; valaddr_reg:x3; val_offset:3735*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3735*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1246:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7100003f; valaddr_reg:x3; val_offset:3738*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3738*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1247:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7100007f; valaddr_reg:x3; val_offset:3741*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3741*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1248:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x710000ff; valaddr_reg:x3; val_offset:3744*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3744*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1249:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x710001ff; valaddr_reg:x3; val_offset:3747*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3747*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1250:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x710003ff; valaddr_reg:x3; val_offset:3750*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3750*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1251:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x710007ff; valaddr_reg:x3; val_offset:3753*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3753*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1252:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71000fff; valaddr_reg:x3; val_offset:3756*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3756*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1253:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71001fff; valaddr_reg:x3; val_offset:3759*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3759*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1254:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71003fff; valaddr_reg:x3; val_offset:3762*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3762*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1255:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71007fff; valaddr_reg:x3; val_offset:3765*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3765*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1256:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7100ffff; valaddr_reg:x3; val_offset:3768*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3768*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1257:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7101ffff; valaddr_reg:x3; val_offset:3771*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3771*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1258:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7103ffff; valaddr_reg:x3; val_offset:3774*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3774*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1259:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x7107ffff; valaddr_reg:x3; val_offset:3777*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3777*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1260:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x710fffff; valaddr_reg:x3; val_offset:3780*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3780*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1261:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x711fffff; valaddr_reg:x3; val_offset:3783*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3783*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1262:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x713fffff; valaddr_reg:x3; val_offset:3786*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3786*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1263:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71400000; valaddr_reg:x3; val_offset:3789*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3789*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1264:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71600000; valaddr_reg:x3; val_offset:3792*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3792*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1265:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71700000; valaddr_reg:x3; val_offset:3795*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3795*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1266:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x71780000; valaddr_reg:x3; val_offset:3798*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3798*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1267:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717c0000; valaddr_reg:x3; val_offset:3801*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3801*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1268:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717e0000; valaddr_reg:x3; val_offset:3804*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3804*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1269:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717f0000; valaddr_reg:x3; val_offset:3807*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3807*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1270:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717f8000; valaddr_reg:x3; val_offset:3810*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3810*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1271:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717fc000; valaddr_reg:x3; val_offset:3813*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3813*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1272:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717fe000; valaddr_reg:x3; val_offset:3816*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3816*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1273:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717ff000; valaddr_reg:x3; val_offset:3819*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3819*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1274:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717ff800; valaddr_reg:x3; val_offset:3822*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3822*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1275:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717ffc00; valaddr_reg:x3; val_offset:3825*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3825*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1276:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717ffe00; valaddr_reg:x3; val_offset:3828*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3828*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1277:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717fff00; valaddr_reg:x3; val_offset:3831*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3831*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1278:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717fff80; valaddr_reg:x3; val_offset:3834*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3834*0 + 3*9*FLEN/8, x4, x1, x2)

inst_1279:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x396362 and fs2 == 0 and fe2 == 0x84 and fm2 == 0x30c0de and fs3 == 0 and fe3 == 0xe2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cb96362; op2val:0x4230c0de;
op3val:0x717fffc0; valaddr_reg:x3; val_offset:3837*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 3837*0 + 3*9*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2091687093,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2092206412,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825408,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825409,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825411,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825415,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825423,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825439,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825471,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825535,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825663,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895825919,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895826431,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895827455,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895829503,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895833599,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895841791,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895858175,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895890943,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1895956479,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1896087551,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1896349695,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1896873983,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1897922559,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1900019711,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1900019712,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1902116864,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1903165440,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1903689728,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1903951872,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904082944,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904148480,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904181248,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904197632,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904205824,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904209920,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904211968,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904212992,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904213504,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904213760,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904213888,32,FLEN)
NAN_BOXED(2092524386,32,FLEN)
NAN_BOXED(1110491358,32,FLEN)
NAN_BOXED(1904213952,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
