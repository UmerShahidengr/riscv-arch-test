
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa00000f; valaddr_reg:x3; val_offset:38016*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38016*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa00001f; valaddr_reg:x3; val_offset:38019*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38019*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa00003f; valaddr_reg:x3; val_offset:38022*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38022*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa00007f; valaddr_reg:x3; val_offset:38025*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38025*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa0000ff; valaddr_reg:x3; val_offset:38028*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38028*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa0001ff; valaddr_reg:x3; val_offset:38031*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38031*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa0003ff; valaddr_reg:x3; val_offset:38034*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38034*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa0007ff; valaddr_reg:x3; val_offset:38037*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38037*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa000fff; valaddr_reg:x3; val_offset:38040*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38040*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa001fff; valaddr_reg:x3; val_offset:38043*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38043*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa003fff; valaddr_reg:x3; val_offset:38046*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38046*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa007fff; valaddr_reg:x3; val_offset:38049*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38049*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa00ffff; valaddr_reg:x3; val_offset:38052*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38052*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa01ffff; valaddr_reg:x3; val_offset:38055*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38055*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa03ffff; valaddr_reg:x3; val_offset:38058*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38058*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa07ffff; valaddr_reg:x3; val_offset:38061*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38061*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa0fffff; valaddr_reg:x3; val_offset:38064*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38064*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa1fffff; valaddr_reg:x3; val_offset:38067*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38067*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa3fffff; valaddr_reg:x3; val_offset:38070*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38070*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa400000; valaddr_reg:x3; val_offset:38073*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38073*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa600000; valaddr_reg:x3; val_offset:38076*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38076*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa700000; valaddr_reg:x3; val_offset:38079*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38079*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa780000; valaddr_reg:x3; val_offset:38082*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38082*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7c0000; valaddr_reg:x3; val_offset:38085*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38085*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7e0000; valaddr_reg:x3; val_offset:38088*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38088*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7f0000; valaddr_reg:x3; val_offset:38091*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38091*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7f8000; valaddr_reg:x3; val_offset:38094*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38094*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fc000; valaddr_reg:x3; val_offset:38097*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38097*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fe000; valaddr_reg:x3; val_offset:38100*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38100*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ff000; valaddr_reg:x3; val_offset:38103*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38103*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ff800; valaddr_reg:x3; val_offset:38106*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38106*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffc00; valaddr_reg:x3; val_offset:38109*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38109*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffe00; valaddr_reg:x3; val_offset:38112*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38112*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fff00; valaddr_reg:x3; val_offset:38115*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38115*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fff80; valaddr_reg:x3; val_offset:38118*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38118*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fffc0; valaddr_reg:x3; val_offset:38121*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38121*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fffe0; valaddr_reg:x3; val_offset:38124*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38124*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffff0; valaddr_reg:x3; val_offset:38127*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38127*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffff8; valaddr_reg:x3; val_offset:38130*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38130*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffffc; valaddr_reg:x3; val_offset:38133*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38133*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7ffffe; valaddr_reg:x3; val_offset:38136*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38136*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x54 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xaa7fffff; valaddr_reg:x3; val_offset:38139*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38139*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbf800001; valaddr_reg:x3; val_offset:38142*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38142*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbf800003; valaddr_reg:x3; val_offset:38145*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38145*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbf800007; valaddr_reg:x3; val_offset:38148*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38148*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbf999999; valaddr_reg:x3; val_offset:38151*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38151*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:38154*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38154*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:38157*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38157*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:38160*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38160*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:38163*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38163*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:38166*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38166*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:38169*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38169*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:38172*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38172*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:38175*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38175*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:38178*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38178*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:38181*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38181*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:38184*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38184*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x02f86a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7d18d4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e82f86a; op2val:0x807d18d4;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:38187*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38187*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5000000; valaddr_reg:x3; val_offset:38190*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38190*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5000001; valaddr_reg:x3; val_offset:38193*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38193*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5000003; valaddr_reg:x3; val_offset:38196*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38196*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5000007; valaddr_reg:x3; val_offset:38199*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38199*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb500000f; valaddr_reg:x3; val_offset:38202*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38202*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb500001f; valaddr_reg:x3; val_offset:38205*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38205*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb500003f; valaddr_reg:x3; val_offset:38208*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38208*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb500007f; valaddr_reg:x3; val_offset:38211*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38211*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb50000ff; valaddr_reg:x3; val_offset:38214*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38214*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb50001ff; valaddr_reg:x3; val_offset:38217*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38217*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb50003ff; valaddr_reg:x3; val_offset:38220*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38220*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb50007ff; valaddr_reg:x3; val_offset:38223*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38223*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5000fff; valaddr_reg:x3; val_offset:38226*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38226*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5001fff; valaddr_reg:x3; val_offset:38229*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38229*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5003fff; valaddr_reg:x3; val_offset:38232*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38232*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5007fff; valaddr_reg:x3; val_offset:38235*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38235*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb500ffff; valaddr_reg:x3; val_offset:38238*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38238*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb501ffff; valaddr_reg:x3; val_offset:38241*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38241*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb503ffff; valaddr_reg:x3; val_offset:38244*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38244*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb507ffff; valaddr_reg:x3; val_offset:38247*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38247*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb50fffff; valaddr_reg:x3; val_offset:38250*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38250*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb51fffff; valaddr_reg:x3; val_offset:38253*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38253*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb53fffff; valaddr_reg:x3; val_offset:38256*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38256*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5400000; valaddr_reg:x3; val_offset:38259*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38259*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5600000; valaddr_reg:x3; val_offset:38262*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38262*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5700000; valaddr_reg:x3; val_offset:38265*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38265*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb5780000; valaddr_reg:x3; val_offset:38268*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38268*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57c0000; valaddr_reg:x3; val_offset:38271*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38271*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57e0000; valaddr_reg:x3; val_offset:38274*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38274*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57f0000; valaddr_reg:x3; val_offset:38277*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38277*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57f8000; valaddr_reg:x3; val_offset:38280*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38280*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fc000; valaddr_reg:x3; val_offset:38283*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38283*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fe000; valaddr_reg:x3; val_offset:38286*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38286*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ff000; valaddr_reg:x3; val_offset:38289*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38289*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ff800; valaddr_reg:x3; val_offset:38292*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38292*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffc00; valaddr_reg:x3; val_offset:38295*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38295*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffe00; valaddr_reg:x3; val_offset:38298*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38298*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fff00; valaddr_reg:x3; val_offset:38301*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38301*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fff80; valaddr_reg:x3; val_offset:38304*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38304*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fffc0; valaddr_reg:x3; val_offset:38307*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38307*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fffe0; valaddr_reg:x3; val_offset:38310*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38310*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffff0; valaddr_reg:x3; val_offset:38313*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38313*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffff8; valaddr_reg:x3; val_offset:38316*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38316*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffffc; valaddr_reg:x3; val_offset:38319*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38319*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57ffffe; valaddr_reg:x3; val_offset:38322*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38322*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x6a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xb57fffff; valaddr_reg:x3; val_offset:38325*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38325*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbf800001; valaddr_reg:x3; val_offset:38328*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38328*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbf800003; valaddr_reg:x3; val_offset:38331*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38331*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbf800007; valaddr_reg:x3; val_offset:38334*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38334*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbf999999; valaddr_reg:x3; val_offset:38337*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38337*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:38340*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38340*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:38343*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38343*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:38346*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38346*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:38349*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38349*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:38352*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38352*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:38355*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38355*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:38358*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38358*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:38361*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38361*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:38364*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38364*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:38367*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38367*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:38370*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38370*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x031454 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7cfe30 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e831454; op2val:0x807cfe30;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:38373*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38373*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0800000; valaddr_reg:x3; val_offset:38376*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38376*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0800001; valaddr_reg:x3; val_offset:38379*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38379*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0800003; valaddr_reg:x3; val_offset:38382*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38382*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0800007; valaddr_reg:x3; val_offset:38385*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38385*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe080000f; valaddr_reg:x3; val_offset:38388*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38388*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe080001f; valaddr_reg:x3; val_offset:38391*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38391*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe080003f; valaddr_reg:x3; val_offset:38394*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38394*0 + 3*99*FLEN/8, x4, x1, x2)

inst_12799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe080007f; valaddr_reg:x3; val_offset:38397*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38397*0 + 3*99*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852126735,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852126751,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852126783,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852126847,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852126975,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852127231,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852127743,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852128767,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852130815,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852134911,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852143103,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852159487,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852192255,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852257791,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852388863,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2852651007,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2853175295,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2854223871,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2856321023,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2856321024,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2858418176,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2859466752,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2859991040,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860253184,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860384256,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860449792,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860482560,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860498944,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860507136,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860511232,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860513280,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860514304,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860514816,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515072,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515200,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515264,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515296,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515312,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515320,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515324,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515326,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(2860515327,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2122512490,32,FLEN)
NAN_BOXED(2155682004,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676096,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676097,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676099,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676103,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676111,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676127,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676159,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676223,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676351,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036676607,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036677119,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036678143,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036680191,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036684287,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036692479,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036708863,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036741631,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036807167,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3036938239,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3037200383,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3037724671,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3038773247,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3040870399,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3040870400,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3042967552,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3044016128,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3044540416,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3044802560,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3044933632,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3044999168,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045031936,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045048320,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045056512,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045060608,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045062656,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045063680,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064192,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064448,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064576,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064640,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064672,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064688,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064696,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064700,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064702,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3045064703,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2122519636,32,FLEN)
NAN_BOXED(2155675184,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766484992,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766484993,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766484995,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766484999,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485007,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485023,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485055,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485119,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
