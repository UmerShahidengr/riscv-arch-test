
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe08000ff; valaddr_reg:x3; val_offset:38400*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38400*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe08001ff; valaddr_reg:x3; val_offset:38403*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38403*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe08003ff; valaddr_reg:x3; val_offset:38406*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38406*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe08007ff; valaddr_reg:x3; val_offset:38409*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38409*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0800fff; valaddr_reg:x3; val_offset:38412*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38412*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0801fff; valaddr_reg:x3; val_offset:38415*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38415*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0803fff; valaddr_reg:x3; val_offset:38418*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38418*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0807fff; valaddr_reg:x3; val_offset:38421*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38421*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe080ffff; valaddr_reg:x3; val_offset:38424*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38424*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe081ffff; valaddr_reg:x3; val_offset:38427*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38427*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe083ffff; valaddr_reg:x3; val_offset:38430*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38430*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe087ffff; valaddr_reg:x3; val_offset:38433*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38433*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe08fffff; valaddr_reg:x3; val_offset:38436*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38436*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe09fffff; valaddr_reg:x3; val_offset:38439*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38439*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0bfffff; valaddr_reg:x3; val_offset:38442*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38442*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0c00000; valaddr_reg:x3; val_offset:38445*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38445*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0e00000; valaddr_reg:x3; val_offset:38448*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38448*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0f00000; valaddr_reg:x3; val_offset:38451*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38451*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0f80000; valaddr_reg:x3; val_offset:38454*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38454*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fc0000; valaddr_reg:x3; val_offset:38457*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38457*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fe0000; valaddr_reg:x3; val_offset:38460*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38460*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ff0000; valaddr_reg:x3; val_offset:38463*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38463*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ff8000; valaddr_reg:x3; val_offset:38466*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38466*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffc000; valaddr_reg:x3; val_offset:38469*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38469*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffe000; valaddr_reg:x3; val_offset:38472*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38472*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fff000; valaddr_reg:x3; val_offset:38475*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38475*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fff800; valaddr_reg:x3; val_offset:38478*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38478*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffc00; valaddr_reg:x3; val_offset:38481*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38481*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffe00; valaddr_reg:x3; val_offset:38484*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38484*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffff00; valaddr_reg:x3; val_offset:38487*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38487*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffff80; valaddr_reg:x3; val_offset:38490*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38490*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffffc0; valaddr_reg:x3; val_offset:38493*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38493*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffffe0; valaddr_reg:x3; val_offset:38496*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38496*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffff0; valaddr_reg:x3; val_offset:38499*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38499*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffff8; valaddr_reg:x3; val_offset:38502*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38502*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffffc; valaddr_reg:x3; val_offset:38505*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38505*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0fffffe; valaddr_reg:x3; val_offset:38508*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38508*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xe0ffffff; valaddr_reg:x3; val_offset:38511*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38511*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff000001; valaddr_reg:x3; val_offset:38514*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38514*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff000003; valaddr_reg:x3; val_offset:38517*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38517*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff000007; valaddr_reg:x3; val_offset:38520*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38520*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff199999; valaddr_reg:x3; val_offset:38523*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38523*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff249249; valaddr_reg:x3; val_offset:38526*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38526*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff333333; valaddr_reg:x3; val_offset:38529*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38529*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:38532*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38532*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:38535*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38535*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff444444; valaddr_reg:x3; val_offset:38538*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38538*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:38541*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38541*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:38544*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38544*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff666666; valaddr_reg:x3; val_offset:38547*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38547*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:38550*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38550*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:38553*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38553*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:38556*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38556*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f08d and fs2 == 1 and fe2 == 0x80 and fm2 == 0x785b1f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f08d; op2val:0xc0785b1f;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:38559*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38559*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f000000; valaddr_reg:x3; val_offset:38562*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38562*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f000001; valaddr_reg:x3; val_offset:38565*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38565*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f000003; valaddr_reg:x3; val_offset:38568*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38568*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f000007; valaddr_reg:x3; val_offset:38571*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38571*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f00000f; valaddr_reg:x3; val_offset:38574*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38574*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f00001f; valaddr_reg:x3; val_offset:38577*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38577*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f00003f; valaddr_reg:x3; val_offset:38580*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38580*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f00007f; valaddr_reg:x3; val_offset:38583*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38583*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f0000ff; valaddr_reg:x3; val_offset:38586*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38586*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f0001ff; valaddr_reg:x3; val_offset:38589*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38589*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f0003ff; valaddr_reg:x3; val_offset:38592*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38592*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f0007ff; valaddr_reg:x3; val_offset:38595*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38595*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f000fff; valaddr_reg:x3; val_offset:38598*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38598*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f001fff; valaddr_reg:x3; val_offset:38601*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38601*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f003fff; valaddr_reg:x3; val_offset:38604*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38604*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f007fff; valaddr_reg:x3; val_offset:38607*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38607*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f00ffff; valaddr_reg:x3; val_offset:38610*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38610*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f01ffff; valaddr_reg:x3; val_offset:38613*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38613*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f03ffff; valaddr_reg:x3; val_offset:38616*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38616*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f07ffff; valaddr_reg:x3; val_offset:38619*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38619*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f0fffff; valaddr_reg:x3; val_offset:38622*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38622*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f199999; valaddr_reg:x3; val_offset:38625*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38625*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f1fffff; valaddr_reg:x3; val_offset:38628*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38628*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f249249; valaddr_reg:x3; val_offset:38631*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38631*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f333333; valaddr_reg:x3; val_offset:38634*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38634*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:38637*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38637*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:38640*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38640*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f3fffff; valaddr_reg:x3; val_offset:38643*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38643*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f400000; valaddr_reg:x3; val_offset:38646*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38646*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f444444; valaddr_reg:x3; val_offset:38649*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38649*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:38652*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38652*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:38655*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38655*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f600000; valaddr_reg:x3; val_offset:38658*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38658*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f666666; valaddr_reg:x3; val_offset:38661*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38661*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:38664*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38664*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f700000; valaddr_reg:x3; val_offset:38667*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38667*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f780000; valaddr_reg:x3; val_offset:38670*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38670*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7c0000; valaddr_reg:x3; val_offset:38673*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38673*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7e0000; valaddr_reg:x3; val_offset:38676*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38676*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7f0000; valaddr_reg:x3; val_offset:38679*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38679*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7f8000; valaddr_reg:x3; val_offset:38682*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38682*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fc000; valaddr_reg:x3; val_offset:38685*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38685*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fe000; valaddr_reg:x3; val_offset:38688*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38688*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ff000; valaddr_reg:x3; val_offset:38691*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38691*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ff800; valaddr_reg:x3; val_offset:38694*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38694*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffc00; valaddr_reg:x3; val_offset:38697*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38697*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffe00; valaddr_reg:x3; val_offset:38700*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38700*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fff00; valaddr_reg:x3; val_offset:38703*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38703*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fff80; valaddr_reg:x3; val_offset:38706*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38706*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fffc0; valaddr_reg:x3; val_offset:38709*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38709*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fffe0; valaddr_reg:x3; val_offset:38712*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38712*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffff0; valaddr_reg:x3; val_offset:38715*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38715*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:38718*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38718*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:38721*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38721*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:38724*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38724*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x04053e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x783431 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e84053e; op2val:0x40783431;
op3val:0x7f7fffff; valaddr_reg:x3; val_offset:38727*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38727*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0800000; valaddr_reg:x3; val_offset:38730*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38730*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0800001; valaddr_reg:x3; val_offset:38733*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38733*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0800003; valaddr_reg:x3; val_offset:38736*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38736*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0800007; valaddr_reg:x3; val_offset:38739*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38739*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa080000f; valaddr_reg:x3; val_offset:38742*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38742*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa080001f; valaddr_reg:x3; val_offset:38745*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38745*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa080003f; valaddr_reg:x3; val_offset:38748*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38748*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa080007f; valaddr_reg:x3; val_offset:38751*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38751*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa08000ff; valaddr_reg:x3; val_offset:38754*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38754*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa08001ff; valaddr_reg:x3; val_offset:38757*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38757*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa08003ff; valaddr_reg:x3; val_offset:38760*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38760*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa08007ff; valaddr_reg:x3; val_offset:38763*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38763*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0800fff; valaddr_reg:x3; val_offset:38766*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38766*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0801fff; valaddr_reg:x3; val_offset:38769*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38769*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0803fff; valaddr_reg:x3; val_offset:38772*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38772*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa0807fff; valaddr_reg:x3; val_offset:38775*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38775*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa080ffff; valaddr_reg:x3; val_offset:38778*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38778*0 + 3*100*FLEN/8, x4, x1, x2)

inst_12927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x050002 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7b301c and fs3 == 1 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e850002; op2val:0x807b301c;
op3val:0xa081ffff; valaddr_reg:x3; val_offset:38781*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 38781*0 + 3*100*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485247,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766485503,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766486015,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766487039,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766489087,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766493183,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766501375,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766517759,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766550527,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766616063,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3766747135,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3767009279,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3767533567,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3768582143,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3770679295,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3770679296,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3772776448,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3773825024,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774349312,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774611456,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774742528,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774808064,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774840832,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774857216,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774865408,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774869504,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774871552,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774872576,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873088,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873344,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873472,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873536,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873568,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873584,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873592,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873596,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873598,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(3774873599,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2122576013,32,FLEN)
NAN_BOXED(3229113119,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706432,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706447,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706463,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706495,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706559,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706687,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130706943,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130707455,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130708479,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130710527,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130714623,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130722815,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130739199,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130771967,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130837503,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2130968575,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2131230719,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2131755007,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2132803583,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2134900735,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2134900736,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2136997888,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2138046464,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2138570752,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2138832896,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2138963968,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139029504,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139062272,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139078656,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139086848,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139090944,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139092992,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139094016,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139094528,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139094784,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139094912,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139094976,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095008,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095024,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2122581310,32,FLEN)
NAN_BOXED(1081619505,32,FLEN)
NAN_BOXED(2139095039,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743168,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743169,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743171,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743175,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743183,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743199,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743231,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743295,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743423,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692743679,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692744191,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692745215,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692747263,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692751359,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692759551,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692775935,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692808703,32,FLEN)
NAN_BOXED(2122645506,32,FLEN)
NAN_BOXED(2155556892,32,FLEN)
NAN_BOXED(2692874239,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
