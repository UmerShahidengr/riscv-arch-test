
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:39168*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39168*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:39171*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39171*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:39174*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39174*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:39177*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39177*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:39180*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39180*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:39183*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39183*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:39186*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39186*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:39189*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39189*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:39192*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39192*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:39195*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39195*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:39198*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39198*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:39201*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39201*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:39204*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39204*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:39207*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39207*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:39210*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39210*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:39213*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39213*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:39216*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39216*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:39219*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39219*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:39222*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39222*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:39225*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39225*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:39228*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39228*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:39231*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39231*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:39234*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39234*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:39237*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39237*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:39240*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39240*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:39243*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39243*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:39246*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39246*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:39249*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39249*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:39252*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39252*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:39255*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39255*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:39258*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39258*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:39261*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39261*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:39264*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39264*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:39267*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39267*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:39270*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39270*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:39273*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39273*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:39276*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39276*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:39279*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39279*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:39282*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39282*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06825d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86825d; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:39285*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39285*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:39288*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39288*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:39291*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39291*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:39294*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39294*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:39297*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39297*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:39300*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39300*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:39303*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39303*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:39306*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39306*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:39309*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39309*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:39312*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39312*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:39315*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39315*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:39318*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39318*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:39321*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39321*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:39324*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39324*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:39327*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39327*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:39330*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39330*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:39333*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39333*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84000000; valaddr_reg:x3; val_offset:39336*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39336*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84000001; valaddr_reg:x3; val_offset:39339*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39339*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84000003; valaddr_reg:x3; val_offset:39342*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39342*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84000007; valaddr_reg:x3; val_offset:39345*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39345*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8400000f; valaddr_reg:x3; val_offset:39348*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39348*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8400001f; valaddr_reg:x3; val_offset:39351*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39351*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8400003f; valaddr_reg:x3; val_offset:39354*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39354*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8400007f; valaddr_reg:x3; val_offset:39357*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39357*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x840000ff; valaddr_reg:x3; val_offset:39360*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39360*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x840001ff; valaddr_reg:x3; val_offset:39363*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39363*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x840003ff; valaddr_reg:x3; val_offset:39366*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39366*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x840007ff; valaddr_reg:x3; val_offset:39369*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39369*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84000fff; valaddr_reg:x3; val_offset:39372*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39372*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84001fff; valaddr_reg:x3; val_offset:39375*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39375*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84003fff; valaddr_reg:x3; val_offset:39378*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39378*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84007fff; valaddr_reg:x3; val_offset:39381*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39381*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8400ffff; valaddr_reg:x3; val_offset:39384*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39384*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8401ffff; valaddr_reg:x3; val_offset:39387*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39387*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8403ffff; valaddr_reg:x3; val_offset:39390*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39390*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x8407ffff; valaddr_reg:x3; val_offset:39393*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39393*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x840fffff; valaddr_reg:x3; val_offset:39396*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39396*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x841fffff; valaddr_reg:x3; val_offset:39399*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39399*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:39402*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39402*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:39405*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39405*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:39408*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39408*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:39411*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39411*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:39414*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39414*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:39417*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39417*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:39420*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39420*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:39423*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39423*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:39426*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39426*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:39429*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39429*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:39432*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39432*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:39435*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39435*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:39438*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39438*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:39441*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39441*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:39444*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39444*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:39447*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39447*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:39450*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39450*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:39453*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39453*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:39456*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39456*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:39459*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39459*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:39462*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39462*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:39465*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39465*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:39468*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39468*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06bfe7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86bfe7; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:39471*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39471*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbf800001; valaddr_reg:x3; val_offset:39474*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39474*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbf800003; valaddr_reg:x3; val_offset:39477*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39477*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbf800007; valaddr_reg:x3; val_offset:39480*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39480*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbf999999; valaddr_reg:x3; val_offset:39483*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39483*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:39486*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39486*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:39489*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39489*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:39492*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39492*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:39495*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39495*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:39498*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39498*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:39501*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39501*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:39504*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39504*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:39507*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39507*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:39510*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39510*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:39513*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39513*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:39516*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39516*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:39519*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39519*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc6800000; valaddr_reg:x3; val_offset:39522*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39522*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc6800001; valaddr_reg:x3; val_offset:39525*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39525*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc6800003; valaddr_reg:x3; val_offset:39528*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39528*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc6800007; valaddr_reg:x3; val_offset:39531*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39531*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc680000f; valaddr_reg:x3; val_offset:39534*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39534*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc680001f; valaddr_reg:x3; val_offset:39537*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39537*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc680003f; valaddr_reg:x3; val_offset:39540*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39540*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc680007f; valaddr_reg:x3; val_offset:39543*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39543*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc68000ff; valaddr_reg:x3; val_offset:39546*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39546*0 + 3*102*FLEN/8, x4, x1, x2)

inst_13183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06e52a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x79750f and fs3 == 1 and fe3 == 0x8d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86e52a; op2val:0x8079750f;
op3val:0xc68001ff; valaddr_reg:x3; val_offset:39549*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39549*0 + 3*102*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2122744413,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592512,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592513,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592515,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592519,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592527,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592543,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592575,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592639,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592767,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593023,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593535,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214594559,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214596607,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214600703,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214608895,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214625279,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214658047,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214723583,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214854655,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215116799,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215641087,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2216689663,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786815,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786816,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2220883968,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2221932544,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222456832,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222718976,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222850048,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222915584,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222948352,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222964736,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222972928,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222977024,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222979072,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980096,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980608,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980864,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980992,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981056,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2122760167,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277376,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277377,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277379,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277383,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277391,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277407,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277439,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277503,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277631,32,FLEN)
NAN_BOXED(2122769706,32,FLEN)
NAN_BOXED(2155443471,32,FLEN)
NAN_BOXED(3330277887,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
