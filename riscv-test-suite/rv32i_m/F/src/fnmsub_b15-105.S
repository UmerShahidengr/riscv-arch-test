
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2003fff; valaddr_reg:x3; val_offset:39936*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39936*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2007fff; valaddr_reg:x3; val_offset:39939*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39939*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd200ffff; valaddr_reg:x3; val_offset:39942*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39942*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd201ffff; valaddr_reg:x3; val_offset:39945*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39945*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd203ffff; valaddr_reg:x3; val_offset:39948*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39948*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd207ffff; valaddr_reg:x3; val_offset:39951*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39951*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd20fffff; valaddr_reg:x3; val_offset:39954*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39954*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd21fffff; valaddr_reg:x3; val_offset:39957*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39957*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd23fffff; valaddr_reg:x3; val_offset:39960*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39960*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2400000; valaddr_reg:x3; val_offset:39963*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39963*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2600000; valaddr_reg:x3; val_offset:39966*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39966*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2700000; valaddr_reg:x3; val_offset:39969*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39969*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd2780000; valaddr_reg:x3; val_offset:39972*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39972*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27c0000; valaddr_reg:x3; val_offset:39975*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39975*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27e0000; valaddr_reg:x3; val_offset:39978*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39978*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27f0000; valaddr_reg:x3; val_offset:39981*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39981*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27f8000; valaddr_reg:x3; val_offset:39984*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39984*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fc000; valaddr_reg:x3; val_offset:39987*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39987*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fe000; valaddr_reg:x3; val_offset:39990*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39990*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ff000; valaddr_reg:x3; val_offset:39993*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39993*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ff800; valaddr_reg:x3; val_offset:39996*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39996*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffc00; valaddr_reg:x3; val_offset:39999*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 39999*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffe00; valaddr_reg:x3; val_offset:40002*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40002*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fff00; valaddr_reg:x3; val_offset:40005*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40005*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fff80; valaddr_reg:x3; val_offset:40008*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40008*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fffc0; valaddr_reg:x3; val_offset:40011*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40011*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fffe0; valaddr_reg:x3; val_offset:40014*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40014*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffff0; valaddr_reg:x3; val_offset:40017*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40017*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffff8; valaddr_reg:x3; val_offset:40020*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40020*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffffc; valaddr_reg:x3; val_offset:40023*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40023*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27ffffe; valaddr_reg:x3; val_offset:40026*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40026*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x073a84 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xa4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e873a84; op2val:0x80000000;
op3val:0xd27fffff; valaddr_reg:x3; val_offset:40029*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40029*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37800000; valaddr_reg:x3; val_offset:40032*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40032*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37800001; valaddr_reg:x3; val_offset:40035*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40035*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37800003; valaddr_reg:x3; val_offset:40038*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40038*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37800007; valaddr_reg:x3; val_offset:40041*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40041*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3780000f; valaddr_reg:x3; val_offset:40044*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40044*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3780001f; valaddr_reg:x3; val_offset:40047*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40047*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3780003f; valaddr_reg:x3; val_offset:40050*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40050*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3780007f; valaddr_reg:x3; val_offset:40053*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40053*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x378000ff; valaddr_reg:x3; val_offset:40056*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40056*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x378001ff; valaddr_reg:x3; val_offset:40059*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40059*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x378003ff; valaddr_reg:x3; val_offset:40062*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40062*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x378007ff; valaddr_reg:x3; val_offset:40065*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40065*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37800fff; valaddr_reg:x3; val_offset:40068*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40068*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37801fff; valaddr_reg:x3; val_offset:40071*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40071*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37803fff; valaddr_reg:x3; val_offset:40074*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40074*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37807fff; valaddr_reg:x3; val_offset:40077*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40077*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3780ffff; valaddr_reg:x3; val_offset:40080*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40080*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3781ffff; valaddr_reg:x3; val_offset:40083*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40083*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3783ffff; valaddr_reg:x3; val_offset:40086*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40086*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3787ffff; valaddr_reg:x3; val_offset:40089*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40089*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x378fffff; valaddr_reg:x3; val_offset:40092*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40092*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x379fffff; valaddr_reg:x3; val_offset:40095*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40095*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37bfffff; valaddr_reg:x3; val_offset:40098*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40098*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37c00000; valaddr_reg:x3; val_offset:40101*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40101*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37e00000; valaddr_reg:x3; val_offset:40104*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40104*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37f00000; valaddr_reg:x3; val_offset:40107*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40107*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37f80000; valaddr_reg:x3; val_offset:40110*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40110*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fc0000; valaddr_reg:x3; val_offset:40113*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40113*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fe0000; valaddr_reg:x3; val_offset:40116*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40116*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ff0000; valaddr_reg:x3; val_offset:40119*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40119*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ff8000; valaddr_reg:x3; val_offset:40122*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40122*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffc000; valaddr_reg:x3; val_offset:40125*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40125*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffe000; valaddr_reg:x3; val_offset:40128*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40128*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fff000; valaddr_reg:x3; val_offset:40131*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40131*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fff800; valaddr_reg:x3; val_offset:40134*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40134*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffc00; valaddr_reg:x3; val_offset:40137*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40137*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffe00; valaddr_reg:x3; val_offset:40140*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40140*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffff00; valaddr_reg:x3; val_offset:40143*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40143*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffff80; valaddr_reg:x3; val_offset:40146*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40146*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffffc0; valaddr_reg:x3; val_offset:40149*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40149*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffffe0; valaddr_reg:x3; val_offset:40152*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40152*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffff0; valaddr_reg:x3; val_offset:40155*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40155*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffff8; valaddr_reg:x3; val_offset:40158*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40158*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffffc; valaddr_reg:x3; val_offset:40161*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40161*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37fffffe; valaddr_reg:x3; val_offset:40164*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40164*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x6f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x37ffffff; valaddr_reg:x3; val_offset:40167*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40167*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3f800001; valaddr_reg:x3; val_offset:40170*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40170*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3f800003; valaddr_reg:x3; val_offset:40173*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40173*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3f800007; valaddr_reg:x3; val_offset:40176*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40176*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3f999999; valaddr_reg:x3; val_offset:40179*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40179*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:40182*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40182*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:40185*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40185*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:40188*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40188*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:40191*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40191*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:40194*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40194*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:40197*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40197*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:40200*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40200*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:40203*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40203*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:40206*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40206*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:40209*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40209*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:40212*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40212*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0763b9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x790386 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8763b9; op2val:0x790386;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:40215*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40215*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:40218*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40218*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:40221*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40221*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:40224*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40224*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:40227*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40227*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:40230*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40230*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:40233*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40233*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:40236*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40236*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:40239*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40239*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:40242*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40242*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:40245*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40245*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:40248*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40248*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:40251*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40251*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:40254*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40254*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:40257*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40257*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:40260*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40260*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:40263*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40263*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90800000; valaddr_reg:x3; val_offset:40266*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40266*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90800001; valaddr_reg:x3; val_offset:40269*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40269*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90800003; valaddr_reg:x3; val_offset:40272*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40272*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90800007; valaddr_reg:x3; val_offset:40275*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40275*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9080000f; valaddr_reg:x3; val_offset:40278*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40278*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9080001f; valaddr_reg:x3; val_offset:40281*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40281*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9080003f; valaddr_reg:x3; val_offset:40284*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40284*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9080007f; valaddr_reg:x3; val_offset:40287*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40287*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x908000ff; valaddr_reg:x3; val_offset:40290*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40290*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x908001ff; valaddr_reg:x3; val_offset:40293*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40293*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x908003ff; valaddr_reg:x3; val_offset:40296*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40296*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x908007ff; valaddr_reg:x3; val_offset:40299*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40299*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90800fff; valaddr_reg:x3; val_offset:40302*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40302*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90801fff; valaddr_reg:x3; val_offset:40305*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40305*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90803fff; valaddr_reg:x3; val_offset:40308*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40308*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x90807fff; valaddr_reg:x3; val_offset:40311*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40311*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9080ffff; valaddr_reg:x3; val_offset:40314*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40314*0 + 3*104*FLEN/8, x4, x1, x2)

inst_13439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x07fa5d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x21 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e87fa5d; op2val:0x80000000;
op3val:0x9081ffff; valaddr_reg:x3; val_offset:40317*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 40317*0 + 3*104*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523231743,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523248127,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523280895,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523346431,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523477503,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3523739647,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3524263935,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3525312511,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3527409663,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3527409664,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3529506816,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3530555392,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531079680,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531341824,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531472896,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531538432,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531571200,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531587584,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531595776,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531599872,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531601920,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531602944,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603456,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603712,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603840,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603904,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603936,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603952,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603960,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603964,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603966,32,FLEN)
NAN_BOXED(2122791556,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3531603967,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135488,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135489,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135491,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135495,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135503,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135519,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135551,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135615,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135743,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931135999,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931136511,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931137535,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931139583,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931143679,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931151871,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931168255,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931201023,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931266559,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931397631,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(931659775,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(932184063,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(933232639,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(935329791,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(935329792,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(937426944,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(938475520,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(938999808,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939261952,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939393024,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939458560,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939491328,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939507712,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939515904,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939520000,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939522048,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939523072,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939523584,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939523840,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939523968,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524032,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524064,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524080,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524088,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524092,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524094,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(939524095,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2122802105,32,FLEN)
NAN_BOXED(7930758,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307712,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307713,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307715,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307719,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307727,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307743,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307775,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307839,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424307967,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424308223,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424308735,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424309759,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424311807,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424315903,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424324095,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424340479,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424373247,32,FLEN)
NAN_BOXED(2122840669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2424438783,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
