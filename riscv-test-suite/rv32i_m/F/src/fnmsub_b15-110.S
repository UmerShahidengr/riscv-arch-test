
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_13952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f249249; valaddr_reg:x3; val_offset:41856*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41856*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f333333; valaddr_reg:x3; val_offset:41859*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41859*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:41862*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41862*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:41865*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41865*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f444444; valaddr_reg:x3; val_offset:41868*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41868*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:41871*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41871*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:41874*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41874*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f666666; valaddr_reg:x3; val_offset:41877*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41877*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:41880*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41880*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:41883*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41883*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:41886*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41886*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0ded23 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x66e15d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8ded23; op2val:0x4066e15d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:41889*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41889*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed000000; valaddr_reg:x3; val_offset:41892*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41892*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed000001; valaddr_reg:x3; val_offset:41895*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41895*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed000003; valaddr_reg:x3; val_offset:41898*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41898*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed000007; valaddr_reg:x3; val_offset:41901*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41901*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed00000f; valaddr_reg:x3; val_offset:41904*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41904*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed00001f; valaddr_reg:x3; val_offset:41907*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41907*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed00003f; valaddr_reg:x3; val_offset:41910*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41910*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed00007f; valaddr_reg:x3; val_offset:41913*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41913*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed0000ff; valaddr_reg:x3; val_offset:41916*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41916*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed0001ff; valaddr_reg:x3; val_offset:41919*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41919*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed0003ff; valaddr_reg:x3; val_offset:41922*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41922*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed0007ff; valaddr_reg:x3; val_offset:41925*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41925*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed000fff; valaddr_reg:x3; val_offset:41928*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41928*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed001fff; valaddr_reg:x3; val_offset:41931*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41931*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed003fff; valaddr_reg:x3; val_offset:41934*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41934*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed007fff; valaddr_reg:x3; val_offset:41937*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41937*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed00ffff; valaddr_reg:x3; val_offset:41940*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41940*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed01ffff; valaddr_reg:x3; val_offset:41943*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41943*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed03ffff; valaddr_reg:x3; val_offset:41946*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41946*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed07ffff; valaddr_reg:x3; val_offset:41949*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41949*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed0fffff; valaddr_reg:x3; val_offset:41952*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41952*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed1fffff; valaddr_reg:x3; val_offset:41955*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41955*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed3fffff; valaddr_reg:x3; val_offset:41958*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41958*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed400000; valaddr_reg:x3; val_offset:41961*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41961*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed600000; valaddr_reg:x3; val_offset:41964*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41964*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed700000; valaddr_reg:x3; val_offset:41967*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41967*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed780000; valaddr_reg:x3; val_offset:41970*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41970*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7c0000; valaddr_reg:x3; val_offset:41973*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41973*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7e0000; valaddr_reg:x3; val_offset:41976*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41976*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7f0000; valaddr_reg:x3; val_offset:41979*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41979*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7f8000; valaddr_reg:x3; val_offset:41982*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41982*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fc000; valaddr_reg:x3; val_offset:41985*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41985*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fe000; valaddr_reg:x3; val_offset:41988*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41988*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ff000; valaddr_reg:x3; val_offset:41991*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41991*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ff800; valaddr_reg:x3; val_offset:41994*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41994*0 + 3*109*FLEN/8, x4, x1, x2)

inst_13999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffc00; valaddr_reg:x3; val_offset:41997*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 41997*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffe00; valaddr_reg:x3; val_offset:42000*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42000*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fff00; valaddr_reg:x3; val_offset:42003*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42003*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fff80; valaddr_reg:x3; val_offset:42006*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42006*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fffc0; valaddr_reg:x3; val_offset:42009*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42009*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fffe0; valaddr_reg:x3; val_offset:42012*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42012*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffff0; valaddr_reg:x3; val_offset:42015*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42015*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffff8; valaddr_reg:x3; val_offset:42018*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42018*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffffc; valaddr_reg:x3; val_offset:42021*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42021*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7ffffe; valaddr_reg:x3; val_offset:42024*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42024*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xda and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xed7fffff; valaddr_reg:x3; val_offset:42027*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42027*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff000001; valaddr_reg:x3; val_offset:42030*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42030*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff000003; valaddr_reg:x3; val_offset:42033*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42033*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff000007; valaddr_reg:x3; val_offset:42036*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42036*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff199999; valaddr_reg:x3; val_offset:42039*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42039*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff249249; valaddr_reg:x3; val_offset:42042*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42042*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff333333; valaddr_reg:x3; val_offset:42045*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42045*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:42048*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42048*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:42051*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42051*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff444444; valaddr_reg:x3; val_offset:42054*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42054*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:42057*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42057*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:42060*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42060*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff666666; valaddr_reg:x3; val_offset:42063*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42063*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:42066*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42066*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:42069*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42069*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:42072*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42072*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0e7425 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x66068d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8e7425; op2val:0xc066068d;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:42075*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42075*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:42078*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42078*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:42081*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42081*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:42084*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42084*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:42087*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42087*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:42090*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42090*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:42093*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42093*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:42096*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42096*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:42099*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42099*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:42102*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42102*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:42105*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42105*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:42108*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42108*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:42111*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42111*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:42114*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42114*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:42117*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42117*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:42120*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42120*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:42123*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42123*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:42126*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42126*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:42129*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42129*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:42132*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42132*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:42135*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42135*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:42138*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42138*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:42141*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42141*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:42144*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42144*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:42147*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42147*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:42150*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42150*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:42153*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42153*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:42156*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42156*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:42159*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42159*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:42162*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42162*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:42165*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42165*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:42168*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42168*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:42171*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42171*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:42174*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42174*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:42177*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42177*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:42180*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42180*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:42183*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42183*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:42186*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42186*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:42189*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42189*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:42192*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42192*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:42195*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42195*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:42198*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42198*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:42201*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42201*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:42204*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42204*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:42207*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42207*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:42210*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42210*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:42213*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42213*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:42216*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42216*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:42219*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42219*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:42222*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42222*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:42225*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42225*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:42228*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42228*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:42231*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42231*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:42234*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42234*0 + 3*109*FLEN/8, x4, x1, x2)

inst_14079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0f0263 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8f0263; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:42237*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 42237*0 + 3*109*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2123230499,32,FLEN)
NAN_BOXED(1080484189,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200192,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200193,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200195,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200199,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200207,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200223,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200255,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200319,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200447,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976200703,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976201215,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976202239,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976204287,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976208383,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976216575,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976232959,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976265727,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976331263,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976462335,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3976724479,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3977248767,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3978297343,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3980394495,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3980394496,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3982491648,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3983540224,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984064512,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984326656,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984457728,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984523264,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984556032,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984572416,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984580608,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984584704,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984586752,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984587776,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588288,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588544,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588672,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588736,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588768,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588784,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588792,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588796,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588798,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(3984588799,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2123265061,32,FLEN)
NAN_BOXED(3227911821,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2123301475,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
