
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2a83ffff; valaddr_reg:x3; val_offset:43008*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43008*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2a87ffff; valaddr_reg:x3; val_offset:43011*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43011*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2a8fffff; valaddr_reg:x3; val_offset:43014*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43014*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2a9fffff; valaddr_reg:x3; val_offset:43017*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43017*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2abfffff; valaddr_reg:x3; val_offset:43020*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43020*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2ac00000; valaddr_reg:x3; val_offset:43023*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43023*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2ae00000; valaddr_reg:x3; val_offset:43026*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43026*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2af00000; valaddr_reg:x3; val_offset:43029*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43029*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2af80000; valaddr_reg:x3; val_offset:43032*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43032*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afc0000; valaddr_reg:x3; val_offset:43035*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43035*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afe0000; valaddr_reg:x3; val_offset:43038*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43038*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2aff0000; valaddr_reg:x3; val_offset:43041*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43041*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2aff8000; valaddr_reg:x3; val_offset:43044*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43044*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affc000; valaddr_reg:x3; val_offset:43047*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43047*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affe000; valaddr_reg:x3; val_offset:43050*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43050*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afff000; valaddr_reg:x3; val_offset:43053*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43053*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afff800; valaddr_reg:x3; val_offset:43056*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43056*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffc00; valaddr_reg:x3; val_offset:43059*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43059*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffe00; valaddr_reg:x3; val_offset:43062*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43062*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affff00; valaddr_reg:x3; val_offset:43065*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43065*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affff80; valaddr_reg:x3; val_offset:43068*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43068*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affffc0; valaddr_reg:x3; val_offset:43071*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43071*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affffe0; valaddr_reg:x3; val_offset:43074*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43074*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffff0; valaddr_reg:x3; val_offset:43077*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43077*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffff8; valaddr_reg:x3; val_offset:43080*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43080*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffffc; valaddr_reg:x3; val_offset:43083*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43083*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2afffffe; valaddr_reg:x3; val_offset:43086*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43086*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x55 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x2affffff; valaddr_reg:x3; val_offset:43089*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43089*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3f800001; valaddr_reg:x3; val_offset:43092*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43092*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3f800003; valaddr_reg:x3; val_offset:43095*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43095*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3f800007; valaddr_reg:x3; val_offset:43098*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43098*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3f999999; valaddr_reg:x3; val_offset:43101*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43101*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:43104*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43104*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:43107*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43107*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:43110*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43110*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:43113*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43113*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:43116*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43116*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:43119*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43119*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:43122*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43122*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:43125*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43125*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:43128*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43128*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:43131*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43131*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:43134*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43134*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x111231 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x70f010 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e911231; op2val:0x70f010;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:43137*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43137*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:43140*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43140*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:43143*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43143*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:43146*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43146*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:43149*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43149*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:43152*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43152*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:43155*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43155*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:43158*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43158*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:43161*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43161*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:43164*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43164*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:43167*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43167*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:43170*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43170*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:43173*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43173*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:43176*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43176*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:43179*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43179*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:43182*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43182*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:43185*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43185*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3800000; valaddr_reg:x3; val_offset:43188*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43188*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3800001; valaddr_reg:x3; val_offset:43191*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43191*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3800003; valaddr_reg:x3; val_offset:43194*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43194*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3800007; valaddr_reg:x3; val_offset:43197*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43197*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x380000f; valaddr_reg:x3; val_offset:43200*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43200*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x380001f; valaddr_reg:x3; val_offset:43203*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43203*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x380003f; valaddr_reg:x3; val_offset:43206*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43206*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x380007f; valaddr_reg:x3; val_offset:43209*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43209*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x38000ff; valaddr_reg:x3; val_offset:43212*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43212*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x38001ff; valaddr_reg:x3; val_offset:43215*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43215*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x38003ff; valaddr_reg:x3; val_offset:43218*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43218*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x38007ff; valaddr_reg:x3; val_offset:43221*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43221*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3800fff; valaddr_reg:x3; val_offset:43224*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43224*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3801fff; valaddr_reg:x3; val_offset:43227*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43227*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3803fff; valaddr_reg:x3; val_offset:43230*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43230*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3807fff; valaddr_reg:x3; val_offset:43233*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43233*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x380ffff; valaddr_reg:x3; val_offset:43236*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43236*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x381ffff; valaddr_reg:x3; val_offset:43239*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43239*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x383ffff; valaddr_reg:x3; val_offset:43242*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43242*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x387ffff; valaddr_reg:x3; val_offset:43245*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43245*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x38fffff; valaddr_reg:x3; val_offset:43248*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43248*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x39fffff; valaddr_reg:x3; val_offset:43251*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43251*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3bfffff; valaddr_reg:x3; val_offset:43254*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43254*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3c00000; valaddr_reg:x3; val_offset:43257*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43257*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3e00000; valaddr_reg:x3; val_offset:43260*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43260*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3f00000; valaddr_reg:x3; val_offset:43263*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43263*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3f80000; valaddr_reg:x3; val_offset:43266*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43266*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fc0000; valaddr_reg:x3; val_offset:43269*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43269*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fe0000; valaddr_reg:x3; val_offset:43272*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43272*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ff0000; valaddr_reg:x3; val_offset:43275*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43275*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ff8000; valaddr_reg:x3; val_offset:43278*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43278*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:43281*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43281*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:43284*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43284*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:43287*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43287*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:43290*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43290*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:43293*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43293*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:43296*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43296*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:43299*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43299*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:43302*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43302*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:43305*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43305*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:43308*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43308*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:43311*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43311*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:43314*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43314*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:43317*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43317*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:43320*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43320*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x11cba2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e91cba2; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:43323*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43323*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbf800001; valaddr_reg:x3; val_offset:43326*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43326*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbf800003; valaddr_reg:x3; val_offset:43329*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43329*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbf800007; valaddr_reg:x3; val_offset:43332*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43332*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbf999999; valaddr_reg:x3; val_offset:43335*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43335*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:43338*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43338*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:43341*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43341*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:43344*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43344*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:43347*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43347*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:43350*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43350*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:43353*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43353*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:43356*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43356*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:43359*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43359*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:43362*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43362*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:43365*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43365*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:43368*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43368*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:43371*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43371*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb000000; valaddr_reg:x3; val_offset:43374*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43374*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb000001; valaddr_reg:x3; val_offset:43377*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43377*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb000003; valaddr_reg:x3; val_offset:43380*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43380*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb000007; valaddr_reg:x3; val_offset:43383*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43383*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb00000f; valaddr_reg:x3; val_offset:43386*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43386*0 + 3*112*FLEN/8, x4, x1, x2)

inst_14463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb00001f; valaddr_reg:x3; val_offset:43389*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43389*0 + 3*112*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(713293823,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(713555967,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(714080255,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(715128831,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(717225983,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(717225984,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(719323136,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(720371712,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(720896000,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721158144,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721289216,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721354752,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721387520,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721403904,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721412096,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721416192,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721418240,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721419264,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721419776,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420032,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420160,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420224,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420256,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420272,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420280,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420284,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420286,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(721420287,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2123436593,32,FLEN)
NAN_BOXED(7401488,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720319,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720383,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720511,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720767,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58721279,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58722303,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58724351,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58728447,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58736639,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58753023,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58785791,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58851327,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58982399,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59244543,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59768831,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60817407,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914559,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914560,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65011712,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66060288,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66584576,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66846720,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66977792,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67043328,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67076096,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2123484066,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774848,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774849,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774851,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774855,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774863,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774879,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
