
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_14464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb00003f; valaddr_reg:x3; val_offset:43392*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43392*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb00007f; valaddr_reg:x3; val_offset:43395*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43395*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb0000ff; valaddr_reg:x3; val_offset:43398*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43398*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb0001ff; valaddr_reg:x3; val_offset:43401*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43401*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb0003ff; valaddr_reg:x3; val_offset:43404*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43404*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb0007ff; valaddr_reg:x3; val_offset:43407*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43407*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb000fff; valaddr_reg:x3; val_offset:43410*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43410*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb001fff; valaddr_reg:x3; val_offset:43413*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43413*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb003fff; valaddr_reg:x3; val_offset:43416*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43416*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb007fff; valaddr_reg:x3; val_offset:43419*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43419*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb00ffff; valaddr_reg:x3; val_offset:43422*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43422*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb01ffff; valaddr_reg:x3; val_offset:43425*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43425*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb03ffff; valaddr_reg:x3; val_offset:43428*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43428*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb07ffff; valaddr_reg:x3; val_offset:43431*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43431*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb0fffff; valaddr_reg:x3; val_offset:43434*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43434*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb1fffff; valaddr_reg:x3; val_offset:43437*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43437*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb3fffff; valaddr_reg:x3; val_offset:43440*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43440*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb400000; valaddr_reg:x3; val_offset:43443*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43443*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb600000; valaddr_reg:x3; val_offset:43446*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43446*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb700000; valaddr_reg:x3; val_offset:43449*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43449*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb780000; valaddr_reg:x3; val_offset:43452*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43452*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7c0000; valaddr_reg:x3; val_offset:43455*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43455*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7e0000; valaddr_reg:x3; val_offset:43458*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43458*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7f0000; valaddr_reg:x3; val_offset:43461*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43461*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7f8000; valaddr_reg:x3; val_offset:43464*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43464*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fc000; valaddr_reg:x3; val_offset:43467*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43467*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fe000; valaddr_reg:x3; val_offset:43470*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43470*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ff000; valaddr_reg:x3; val_offset:43473*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43473*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ff800; valaddr_reg:x3; val_offset:43476*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43476*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffc00; valaddr_reg:x3; val_offset:43479*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43479*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffe00; valaddr_reg:x3; val_offset:43482*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43482*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fff00; valaddr_reg:x3; val_offset:43485*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43485*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fff80; valaddr_reg:x3; val_offset:43488*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43488*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fffc0; valaddr_reg:x3; val_offset:43491*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43491*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fffe0; valaddr_reg:x3; val_offset:43494*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43494*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffff0; valaddr_reg:x3; val_offset:43497*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43497*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffff8; valaddr_reg:x3; val_offset:43500*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43500*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffffc; valaddr_reg:x3; val_offset:43503*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43503*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7ffffe; valaddr_reg:x3; val_offset:43506*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43506*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1202eb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7035dd and fs3 == 1 and fe3 == 0x96 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9202eb; op2val:0x807035dd;
op3val:0xcb7fffff; valaddr_reg:x3; val_offset:43509*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43509*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbf800001; valaddr_reg:x3; val_offset:43512*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43512*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbf800003; valaddr_reg:x3; val_offset:43515*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43515*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbf800007; valaddr_reg:x3; val_offset:43518*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43518*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbf999999; valaddr_reg:x3; val_offset:43521*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43521*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:43524*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43524*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:43527*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43527*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:43530*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43530*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:43533*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43533*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:43536*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43536*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:43539*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43539*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:43542*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43542*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:43545*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43545*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:43548*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43548*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:43551*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43551*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:43554*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43554*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:43557*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43557*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce000000; valaddr_reg:x3; val_offset:43560*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43560*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce000001; valaddr_reg:x3; val_offset:43563*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43563*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce000003; valaddr_reg:x3; val_offset:43566*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43566*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce000007; valaddr_reg:x3; val_offset:43569*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43569*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce00000f; valaddr_reg:x3; val_offset:43572*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43572*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce00001f; valaddr_reg:x3; val_offset:43575*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43575*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce00003f; valaddr_reg:x3; val_offset:43578*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43578*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce00007f; valaddr_reg:x3; val_offset:43581*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43581*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce0000ff; valaddr_reg:x3; val_offset:43584*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43584*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce0001ff; valaddr_reg:x3; val_offset:43587*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43587*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce0003ff; valaddr_reg:x3; val_offset:43590*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43590*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce0007ff; valaddr_reg:x3; val_offset:43593*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43593*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce000fff; valaddr_reg:x3; val_offset:43596*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43596*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce001fff; valaddr_reg:x3; val_offset:43599*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43599*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce003fff; valaddr_reg:x3; val_offset:43602*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43602*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce007fff; valaddr_reg:x3; val_offset:43605*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43605*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce00ffff; valaddr_reg:x3; val_offset:43608*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43608*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce01ffff; valaddr_reg:x3; val_offset:43611*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43611*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce03ffff; valaddr_reg:x3; val_offset:43614*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43614*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce07ffff; valaddr_reg:x3; val_offset:43617*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43617*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce0fffff; valaddr_reg:x3; val_offset:43620*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43620*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce1fffff; valaddr_reg:x3; val_offset:43623*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43623*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce3fffff; valaddr_reg:x3; val_offset:43626*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43626*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce400000; valaddr_reg:x3; val_offset:43629*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43629*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce600000; valaddr_reg:x3; val_offset:43632*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43632*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce700000; valaddr_reg:x3; val_offset:43635*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43635*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce780000; valaddr_reg:x3; val_offset:43638*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43638*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7c0000; valaddr_reg:x3; val_offset:43641*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43641*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7e0000; valaddr_reg:x3; val_offset:43644*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43644*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7f0000; valaddr_reg:x3; val_offset:43647*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43647*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7f8000; valaddr_reg:x3; val_offset:43650*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43650*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fc000; valaddr_reg:x3; val_offset:43653*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43653*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fe000; valaddr_reg:x3; val_offset:43656*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43656*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ff000; valaddr_reg:x3; val_offset:43659*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43659*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ff800; valaddr_reg:x3; val_offset:43662*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43662*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffc00; valaddr_reg:x3; val_offset:43665*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43665*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffe00; valaddr_reg:x3; val_offset:43668*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43668*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fff00; valaddr_reg:x3; val_offset:43671*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43671*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fff80; valaddr_reg:x3; val_offset:43674*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43674*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fffc0; valaddr_reg:x3; val_offset:43677*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43677*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fffe0; valaddr_reg:x3; val_offset:43680*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43680*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffff0; valaddr_reg:x3; val_offset:43683*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43683*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffff8; valaddr_reg:x3; val_offset:43686*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43686*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffffc; valaddr_reg:x3; val_offset:43689*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43689*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7ffffe; valaddr_reg:x3; val_offset:43692*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43692*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x120589 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x7033da and fs3 == 1 and fe3 == 0x9c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e920589; op2val:0x807033da;
op3val:0xce7fffff; valaddr_reg:x3; val_offset:43695*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43695*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:43698*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43698*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:43701*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43701*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:43704*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43704*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:43707*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43707*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:43710*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43710*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:43713*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43713*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:43716*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43716*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:43719*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43719*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:43722*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43722*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:43725*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43725*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:43728*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43728*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:43731*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43731*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:43734*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43734*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:43737*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43737*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:43740*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43740*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:43743*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43743*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:43746*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43746*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:43749*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43749*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:43752*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43752*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:43755*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43755*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:43758*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43758*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:43761*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43761*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:43764*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43764*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:43767*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43767*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:43770*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43770*0 + 3*113*FLEN/8, x4, x1, x2)

inst_14591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1337c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9337c1; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:43773*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 43773*0 + 3*113*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774911,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405774975,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405775103,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405775359,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405775871,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405776895,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405778943,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405783039,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405791231,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405807615,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405840383,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3405905919,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3406036991,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3406299135,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3406823423,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3407871999,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3409969151,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3409969152,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3412066304,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3413114880,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3413639168,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3413901312,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414032384,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414097920,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414130688,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414147072,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414155264,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414159360,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414161408,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414162432,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414162944,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163200,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163328,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163392,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163424,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163440,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163448,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163452,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163454,32,FLEN)
NAN_BOXED(2123498219,32,FLEN)
NAN_BOXED(2154837469,32,FLEN)
NAN_BOXED(3414163455,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106496,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106497,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106499,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106503,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106511,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106527,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106559,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106623,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456106751,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456107007,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456107519,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456108543,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456110591,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456114687,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456122879,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456139263,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456172031,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456237567,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456368639,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3456630783,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3457155071,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3458203647,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3460300799,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3460300800,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3462397952,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3463446528,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3463970816,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464232960,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464364032,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464429568,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464462336,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464478720,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464486912,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464491008,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464493056,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464494080,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464494592,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464494848,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464494976,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495040,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495072,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495088,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495096,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495100,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495102,32,FLEN)
NAN_BOXED(2123498889,32,FLEN)
NAN_BOXED(2154836954,32,FLEN)
NAN_BOXED(3464495103,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2123577281,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
