
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d780000; valaddr_reg:x3; val_offset:45312*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45312*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7c0000; valaddr_reg:x3; val_offset:45315*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45315*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7e0000; valaddr_reg:x3; val_offset:45318*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45318*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7f0000; valaddr_reg:x3; val_offset:45321*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45321*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7f8000; valaddr_reg:x3; val_offset:45324*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45324*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fc000; valaddr_reg:x3; val_offset:45327*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45327*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fe000; valaddr_reg:x3; val_offset:45330*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45330*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ff000; valaddr_reg:x3; val_offset:45333*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45333*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:45336*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45336*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:45339*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45339*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:45342*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45342*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:45345*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45345*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:45348*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45348*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:45351*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45351*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:45354*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45354*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:45357*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45357*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:45360*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45360*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:45363*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45363*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:45366*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45366*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x184f43 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e984f43; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:45369*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45369*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:45372*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45372*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:45375*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45375*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:45378*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45378*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:45381*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45381*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:45384*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45384*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:45387*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45387*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:45390*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45390*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:45393*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45393*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:45396*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45396*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:45399*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45399*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:45402*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45402*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:45405*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45405*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:45408*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45408*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:45411*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45411*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:45414*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45414*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:45417*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45417*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:45420*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45420*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:45423*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45423*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:45426*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45426*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:45429*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45429*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:45432*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45432*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:45435*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45435*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:45438*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45438*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:45441*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45441*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:45444*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45444*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:45447*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45447*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:45450*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45450*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:45453*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45453*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:45456*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45456*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:45459*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45459*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:45462*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45462*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:45465*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45465*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:45468*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45468*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:45471*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45471*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:45474*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45474*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:45477*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45477*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:45480*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45480*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:45483*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45483*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:45486*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45486*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:45489*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45489*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:45492*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45492*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:45495*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45495*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:45498*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45498*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:45501*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45501*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:45504*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45504*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:45507*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45507*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:45510*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45510*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x3; val_offset:45513*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45513*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x3; val_offset:45516*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45516*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x3; val_offset:45519*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45519*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x3; val_offset:45522*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45522*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x3; val_offset:45525*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45525*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x3; val_offset:45528*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45528*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x3; val_offset:45531*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45531*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x3; val_offset:45534*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45534*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x3; val_offset:45537*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45537*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x3; val_offset:45540*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45540*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x3; val_offset:45543*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45543*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x3; val_offset:45546*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45546*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x3; val_offset:45549*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45549*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x3; val_offset:45552*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45552*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x187fea and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e987fea; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x3; val_offset:45555*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45555*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:45558*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45558*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:45561*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45561*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:45564*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45564*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:45567*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45567*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:45570*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45570*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:45573*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45573*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:45576*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45576*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:45579*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45579*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:45582*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45582*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:45585*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45585*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:45588*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45588*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:45591*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45591*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:45594*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45594*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:45597*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45597*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:45600*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45600*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:45603*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45603*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85800000; valaddr_reg:x3; val_offset:45606*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45606*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85800001; valaddr_reg:x3; val_offset:45609*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45609*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85800003; valaddr_reg:x3; val_offset:45612*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45612*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85800007; valaddr_reg:x3; val_offset:45615*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45615*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8580000f; valaddr_reg:x3; val_offset:45618*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45618*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8580001f; valaddr_reg:x3; val_offset:45621*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45621*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8580003f; valaddr_reg:x3; val_offset:45624*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45624*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8580007f; valaddr_reg:x3; val_offset:45627*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45627*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x858000ff; valaddr_reg:x3; val_offset:45630*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45630*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x858001ff; valaddr_reg:x3; val_offset:45633*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45633*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x858003ff; valaddr_reg:x3; val_offset:45636*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45636*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x858007ff; valaddr_reg:x3; val_offset:45639*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45639*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85800fff; valaddr_reg:x3; val_offset:45642*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45642*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85801fff; valaddr_reg:x3; val_offset:45645*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45645*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85803fff; valaddr_reg:x3; val_offset:45648*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45648*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85807fff; valaddr_reg:x3; val_offset:45651*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45651*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8580ffff; valaddr_reg:x3; val_offset:45654*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45654*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8581ffff; valaddr_reg:x3; val_offset:45657*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45657*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8583ffff; valaddr_reg:x3; val_offset:45660*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45660*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x8587ffff; valaddr_reg:x3; val_offset:45663*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45663*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x858fffff; valaddr_reg:x3; val_offset:45666*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45666*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x859fffff; valaddr_reg:x3; val_offset:45669*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45669*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85bfffff; valaddr_reg:x3; val_offset:45672*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45672*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85c00000; valaddr_reg:x3; val_offset:45675*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45675*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85e00000; valaddr_reg:x3; val_offset:45678*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45678*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85f00000; valaddr_reg:x3; val_offset:45681*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45681*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85f80000; valaddr_reg:x3; val_offset:45684*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45684*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85fc0000; valaddr_reg:x3; val_offset:45687*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45687*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85fe0000; valaddr_reg:x3; val_offset:45690*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45690*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x19b362 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e99b362; op2val:0x80000000;
op3val:0x85ff0000; valaddr_reg:x3; val_offset:45693*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 45693*0 + 3*118*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373451776,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373713920,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373844992,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373910528,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373943296,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373959680,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373967872,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373971968,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2123910979,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100646912,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100655104,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100659200,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100661248,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662272,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662784,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663040,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663168,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663232,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663264,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663280,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663288,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663292,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663294,32,FLEN)
NAN_BOXED(2123923434,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663295,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758336,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758337,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758339,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758343,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758351,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758367,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758399,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758463,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758591,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758847,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239759359,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239760383,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239762431,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239766527,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239774719,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239791103,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239823871,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239889407,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240020479,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240282623,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240806911,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2241855487,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952639,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2243952640,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2246049792,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247098368,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247622656,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2247884800,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248015872,32,FLEN)
NAN_BOXED(2124002146,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248081408,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
