
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff444444; valaddr_reg:x3; val_offset:46464*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46464*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:46467*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46467*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:46470*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46470*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff666666; valaddr_reg:x3; val_offset:46473*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46473*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:46476*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46476*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:46479*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46479*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:46482*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46482*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1b09f8 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x535a74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9b09f8; op2val:0xc0535a74;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:46485*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46485*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c000000; valaddr_reg:x3; val_offset:46488*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46488*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c000001; valaddr_reg:x3; val_offset:46491*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46491*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c000003; valaddr_reg:x3; val_offset:46494*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46494*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c000007; valaddr_reg:x3; val_offset:46497*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46497*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c00000f; valaddr_reg:x3; val_offset:46500*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46500*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c00001f; valaddr_reg:x3; val_offset:46503*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46503*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c00003f; valaddr_reg:x3; val_offset:46506*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46506*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c00007f; valaddr_reg:x3; val_offset:46509*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46509*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c0000ff; valaddr_reg:x3; val_offset:46512*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46512*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c0001ff; valaddr_reg:x3; val_offset:46515*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46515*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c0003ff; valaddr_reg:x3; val_offset:46518*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46518*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c0007ff; valaddr_reg:x3; val_offset:46521*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46521*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c000fff; valaddr_reg:x3; val_offset:46524*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46524*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c001fff; valaddr_reg:x3; val_offset:46527*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46527*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c003fff; valaddr_reg:x3; val_offset:46530*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46530*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c007fff; valaddr_reg:x3; val_offset:46533*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46533*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c00ffff; valaddr_reg:x3; val_offset:46536*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46536*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c01ffff; valaddr_reg:x3; val_offset:46539*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46539*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c03ffff; valaddr_reg:x3; val_offset:46542*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46542*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c07ffff; valaddr_reg:x3; val_offset:46545*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46545*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c0fffff; valaddr_reg:x3; val_offset:46548*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46548*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c1fffff; valaddr_reg:x3; val_offset:46551*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46551*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c3fffff; valaddr_reg:x3; val_offset:46554*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46554*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c400000; valaddr_reg:x3; val_offset:46557*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46557*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c600000; valaddr_reg:x3; val_offset:46560*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46560*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c700000; valaddr_reg:x3; val_offset:46563*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46563*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c780000; valaddr_reg:x3; val_offset:46566*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46566*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7c0000; valaddr_reg:x3; val_offset:46569*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46569*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7e0000; valaddr_reg:x3; val_offset:46572*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46572*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7f0000; valaddr_reg:x3; val_offset:46575*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46575*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7f8000; valaddr_reg:x3; val_offset:46578*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46578*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fc000; valaddr_reg:x3; val_offset:46581*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46581*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fe000; valaddr_reg:x3; val_offset:46584*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46584*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ff000; valaddr_reg:x3; val_offset:46587*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46587*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ff800; valaddr_reg:x3; val_offset:46590*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46590*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffc00; valaddr_reg:x3; val_offset:46593*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46593*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffe00; valaddr_reg:x3; val_offset:46596*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46596*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fff00; valaddr_reg:x3; val_offset:46599*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46599*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fff80; valaddr_reg:x3; val_offset:46602*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46602*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fffc0; valaddr_reg:x3; val_offset:46605*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46605*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fffe0; valaddr_reg:x3; val_offset:46608*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46608*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffff0; valaddr_reg:x3; val_offset:46611*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46611*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffff8; valaddr_reg:x3; val_offset:46614*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46614*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffffc; valaddr_reg:x3; val_offset:46617*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46617*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7ffffe; valaddr_reg:x3; val_offset:46620*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46620*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xd8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x6c7fffff; valaddr_reg:x3; val_offset:46623*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46623*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f000001; valaddr_reg:x3; val_offset:46626*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46626*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f000003; valaddr_reg:x3; val_offset:46629*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46629*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f000007; valaddr_reg:x3; val_offset:46632*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46632*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f199999; valaddr_reg:x3; val_offset:46635*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46635*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f249249; valaddr_reg:x3; val_offset:46638*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46638*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f333333; valaddr_reg:x3; val_offset:46641*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46641*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:46644*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46644*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:46647*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46647*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f444444; valaddr_reg:x3; val_offset:46650*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46650*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:46653*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46653*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:46656*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46656*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f666666; valaddr_reg:x3; val_offset:46659*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46659*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:46662*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46662*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:46665*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46665*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:46668*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46668*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c600e and fs2 == 0 and fe2 == 0x80 and fm2 == 0x518c18 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c600e; op2val:0x40518c18;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:46671*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46671*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7800000; valaddr_reg:x3; val_offset:46674*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46674*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7800001; valaddr_reg:x3; val_offset:46677*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46677*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7800003; valaddr_reg:x3; val_offset:46680*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46680*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7800007; valaddr_reg:x3; val_offset:46683*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46683*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf780000f; valaddr_reg:x3; val_offset:46686*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46686*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf780001f; valaddr_reg:x3; val_offset:46689*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46689*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf780003f; valaddr_reg:x3; val_offset:46692*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46692*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf780007f; valaddr_reg:x3; val_offset:46695*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46695*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf78000ff; valaddr_reg:x3; val_offset:46698*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46698*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf78001ff; valaddr_reg:x3; val_offset:46701*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46701*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf78003ff; valaddr_reg:x3; val_offset:46704*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46704*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf78007ff; valaddr_reg:x3; val_offset:46707*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46707*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7800fff; valaddr_reg:x3; val_offset:46710*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46710*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7801fff; valaddr_reg:x3; val_offset:46713*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46713*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7803fff; valaddr_reg:x3; val_offset:46716*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46716*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7807fff; valaddr_reg:x3; val_offset:46719*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46719*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf780ffff; valaddr_reg:x3; val_offset:46722*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46722*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf781ffff; valaddr_reg:x3; val_offset:46725*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46725*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf783ffff; valaddr_reg:x3; val_offset:46728*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46728*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf787ffff; valaddr_reg:x3; val_offset:46731*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46731*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf78fffff; valaddr_reg:x3; val_offset:46734*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46734*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf79fffff; valaddr_reg:x3; val_offset:46737*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46737*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7bfffff; valaddr_reg:x3; val_offset:46740*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46740*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7c00000; valaddr_reg:x3; val_offset:46743*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46743*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7e00000; valaddr_reg:x3; val_offset:46746*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46746*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7f00000; valaddr_reg:x3; val_offset:46749*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46749*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7f80000; valaddr_reg:x3; val_offset:46752*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46752*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fc0000; valaddr_reg:x3; val_offset:46755*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46755*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fe0000; valaddr_reg:x3; val_offset:46758*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46758*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ff0000; valaddr_reg:x3; val_offset:46761*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46761*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ff8000; valaddr_reg:x3; val_offset:46764*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46764*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffc000; valaddr_reg:x3; val_offset:46767*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46767*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffe000; valaddr_reg:x3; val_offset:46770*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46770*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fff000; valaddr_reg:x3; val_offset:46773*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46773*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fff800; valaddr_reg:x3; val_offset:46776*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46776*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffc00; valaddr_reg:x3; val_offset:46779*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46779*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffe00; valaddr_reg:x3; val_offset:46782*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46782*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffff00; valaddr_reg:x3; val_offset:46785*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46785*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffff80; valaddr_reg:x3; val_offset:46788*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46788*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffffc0; valaddr_reg:x3; val_offset:46791*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46791*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffffe0; valaddr_reg:x3; val_offset:46794*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46794*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffff0; valaddr_reg:x3; val_offset:46797*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46797*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffff8; valaddr_reg:x3; val_offset:46800*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46800*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffffc; valaddr_reg:x3; val_offset:46803*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46803*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7fffffe; valaddr_reg:x3; val_offset:46806*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46806*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xf7ffffff; valaddr_reg:x3; val_offset:46809*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46809*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff000001; valaddr_reg:x3; val_offset:46812*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46812*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff000003; valaddr_reg:x3; val_offset:46815*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46815*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff000007; valaddr_reg:x3; val_offset:46818*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46818*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff199999; valaddr_reg:x3; val_offset:46821*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46821*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff249249; valaddr_reg:x3; val_offset:46824*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46824*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff333333; valaddr_reg:x3; val_offset:46827*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46827*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:46830*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46830*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:46833*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46833*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff444444; valaddr_reg:x3; val_offset:46836*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46836*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:46839*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46839*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:46842*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46842*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1c92c3 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x51483b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9c92c3; op2val:0xc051483b;
op3val:0xff666666; valaddr_reg:x3; val_offset:46845*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46845*0 + 3*121*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124089848,32,FLEN)
NAN_BOXED(3226688116,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939328,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939329,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939331,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939335,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939343,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939359,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939391,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939455,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939583,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811939839,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811940351,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811941375,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811943423,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811947519,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811955711,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1811972095,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1812004863,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1812070399,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1812201471,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1812463615,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1812987903,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1814036479,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1816133631,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1816133632,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1818230784,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1819279360,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1819803648,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820065792,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820196864,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820262400,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820295168,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820311552,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820319744,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820323840,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820325888,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820326912,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327424,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327680,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327808,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327872,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327904,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327920,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327928,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327932,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327934,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(1820327935,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2124177422,32,FLEN)
NAN_BOXED(1079086104,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360960,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360961,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360963,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360967,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360975,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152360991,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152361023,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152361087,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152361215,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152361471,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152361983,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152363007,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152365055,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152369151,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152377343,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152393727,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152426495,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152492031,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152623103,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4152885247,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4153409535,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4154458111,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4156555263,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4156555264,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4158652416,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4159700992,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160225280,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160487424,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160618496,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160684032,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160716800,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160733184,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160741376,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160745472,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160747520,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160748544,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749056,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749312,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749440,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749504,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749536,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749552,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749560,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749564,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749566,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4160749567,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124190403,32,FLEN)
NAN_BOXED(3226552379,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
