
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:48384*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48384*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:48387*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48387*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:48390*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48390*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:48393*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48393*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:48396*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48396*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:48399*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48399*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:48402*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48402*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:48405*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48405*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:48408*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48408*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:48411*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48411*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:48414*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48414*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:48417*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48417*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:48420*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48420*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:48423*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48423*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x3; val_offset:48426*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48426*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x3; val_offset:48429*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48429*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x3; val_offset:48432*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48432*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x3; val_offset:48435*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48435*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x3; val_offset:48438*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48438*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x3; val_offset:48441*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48441*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x3; val_offset:48444*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48444*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x3; val_offset:48447*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48447*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x3; val_offset:48450*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48450*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x3; val_offset:48453*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48453*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x3; val_offset:48456*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48456*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x3; val_offset:48459*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48459*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x3; val_offset:48462*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48462*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x3; val_offset:48465*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48465*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x3; val_offset:48468*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48468*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x3; val_offset:48471*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48471*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x3; val_offset:48474*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48474*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x3; val_offset:48477*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48477*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x3; val_offset:48480*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48480*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:48483*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48483*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:48486*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48486*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:48489*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48489*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:48492*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48492*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:48495*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48495*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:48498*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48498*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:48501*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48501*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:48504*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48504*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:48507*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48507*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:48510*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48510*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:48513*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48513*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:48516*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48516*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:48519*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48519*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:48522*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48522*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:48525*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48525*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:48528*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48528*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209877 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09877; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:48531*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48531*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:48534*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48534*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:48537*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48537*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:48540*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48540*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:48543*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48543*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:48546*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48546*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:48549*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48549*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:48552*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48552*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:48555*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48555*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:48558*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48558*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:48561*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48561*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:48564*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48564*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:48567*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48567*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:48570*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48570*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:48573*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48573*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:48576*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48576*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:48579*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48579*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:48582*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48582*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:48585*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48585*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:48588*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48588*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:48591*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48591*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:48594*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48594*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:48597*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48597*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:48600*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48600*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:48603*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48603*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:48606*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48606*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:48609*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48609*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:48612*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48612*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:48615*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48615*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:48618*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48618*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:48621*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48621*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:48624*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48624*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:48627*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48627*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:48630*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48630*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:48633*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48633*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:48636*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48636*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:48639*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48639*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:48642*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48642*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:48645*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48645*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:48648*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48648*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:48651*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48651*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:48654*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48654*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:48657*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48657*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:48660*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48660*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:48663*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48663*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:48666*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48666*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:48669*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48669*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:48672*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48672*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:48675*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48675*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:48678*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48678*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:48681*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48681*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:48684*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48684*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:48687*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48687*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:48690*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48690*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:48693*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48693*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:48696*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48696*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:48699*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48699*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:48702*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48702*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:48705*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48705*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:48708*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48708*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:48711*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48711*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:48714*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48714*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x209fdd and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea09fdd; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:48717*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48717*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1800000; valaddr_reg:x3; val_offset:48720*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48720*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1800001; valaddr_reg:x3; val_offset:48723*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48723*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1800003; valaddr_reg:x3; val_offset:48726*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48726*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1800007; valaddr_reg:x3; val_offset:48729*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48729*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa180000f; valaddr_reg:x3; val_offset:48732*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48732*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa180001f; valaddr_reg:x3; val_offset:48735*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48735*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa180003f; valaddr_reg:x3; val_offset:48738*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48738*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa180007f; valaddr_reg:x3; val_offset:48741*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48741*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa18000ff; valaddr_reg:x3; val_offset:48744*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48744*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa18001ff; valaddr_reg:x3; val_offset:48747*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48747*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa18003ff; valaddr_reg:x3; val_offset:48750*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48750*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa18007ff; valaddr_reg:x3; val_offset:48753*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48753*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1800fff; valaddr_reg:x3; val_offset:48756*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48756*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1801fff; valaddr_reg:x3; val_offset:48759*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48759*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1803fff; valaddr_reg:x3; val_offset:48762*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48762*0 + 3*126*FLEN/8, x4, x1, x2)

inst_16255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1807fff; valaddr_reg:x3; val_offset:48765*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48765*0 + 3*126*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364672,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364673,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364675,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364679,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364687,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364703,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364735,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364799,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364927,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365183,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365695,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382366719,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382368767,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382372863,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382381055,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382397439,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382430207,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382495743,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382626815,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382888959,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2383413247,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2384461823,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558975,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2386558976,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2388656128,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2389704704,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390228992,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390491136,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390622208,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390687744,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390720512,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390736896,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390745088,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390749184,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390751232,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752256,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390752768,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753024,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753152,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753216,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753248,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753264,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753272,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753276,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753278,32,FLEN)
NAN_BOXED(2124454007,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2390753279,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2124455901,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520384,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520385,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520387,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520391,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520399,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520415,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520447,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520511,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520639,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709520895,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709521407,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709522431,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709524479,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709528575,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709536767,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709553151,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
