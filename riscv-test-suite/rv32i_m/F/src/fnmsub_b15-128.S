
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa180ffff; valaddr_reg:x3; val_offset:48768*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48768*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa181ffff; valaddr_reg:x3; val_offset:48771*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48771*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa183ffff; valaddr_reg:x3; val_offset:48774*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48774*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa187ffff; valaddr_reg:x3; val_offset:48777*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48777*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa18fffff; valaddr_reg:x3; val_offset:48780*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48780*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa19fffff; valaddr_reg:x3; val_offset:48783*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48783*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1bfffff; valaddr_reg:x3; val_offset:48786*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48786*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1c00000; valaddr_reg:x3; val_offset:48789*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48789*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1e00000; valaddr_reg:x3; val_offset:48792*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48792*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1f00000; valaddr_reg:x3; val_offset:48795*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48795*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1f80000; valaddr_reg:x3; val_offset:48798*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48798*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fc0000; valaddr_reg:x3; val_offset:48801*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48801*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fe0000; valaddr_reg:x3; val_offset:48804*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48804*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ff0000; valaddr_reg:x3; val_offset:48807*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48807*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ff8000; valaddr_reg:x3; val_offset:48810*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48810*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffc000; valaddr_reg:x3; val_offset:48813*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48813*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffe000; valaddr_reg:x3; val_offset:48816*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48816*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fff000; valaddr_reg:x3; val_offset:48819*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48819*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fff800; valaddr_reg:x3; val_offset:48822*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48822*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffc00; valaddr_reg:x3; val_offset:48825*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48825*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffe00; valaddr_reg:x3; val_offset:48828*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48828*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffff00; valaddr_reg:x3; val_offset:48831*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48831*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffff80; valaddr_reg:x3; val_offset:48834*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48834*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffffc0; valaddr_reg:x3; val_offset:48837*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48837*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffffe0; valaddr_reg:x3; val_offset:48840*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48840*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffff0; valaddr_reg:x3; val_offset:48843*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48843*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffff8; valaddr_reg:x3; val_offset:48846*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48846*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffffc; valaddr_reg:x3; val_offset:48849*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48849*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1fffffe; valaddr_reg:x3; val_offset:48852*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48852*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x43 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xa1ffffff; valaddr_reg:x3; val_offset:48855*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48855*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbf800001; valaddr_reg:x3; val_offset:48858*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48858*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbf800003; valaddr_reg:x3; val_offset:48861*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48861*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbf800007; valaddr_reg:x3; val_offset:48864*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48864*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbf999999; valaddr_reg:x3; val_offset:48867*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48867*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:48870*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48870*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:48873*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48873*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:48876*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48876*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:48879*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48879*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:48882*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48882*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:48885*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48885*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:48888*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48888*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:48891*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48891*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:48894*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48894*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:48897*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48897*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:48900*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48900*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x21312f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x65a486 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea1312f; op2val:0x8065a486;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:48903*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48903*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8000000; valaddr_reg:x3; val_offset:48906*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48906*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8000001; valaddr_reg:x3; val_offset:48909*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48909*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8000003; valaddr_reg:x3; val_offset:48912*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48912*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8000007; valaddr_reg:x3; val_offset:48915*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48915*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe800000f; valaddr_reg:x3; val_offset:48918*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48918*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe800001f; valaddr_reg:x3; val_offset:48921*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48921*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe800003f; valaddr_reg:x3; val_offset:48924*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48924*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe800007f; valaddr_reg:x3; val_offset:48927*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48927*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe80000ff; valaddr_reg:x3; val_offset:48930*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48930*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe80001ff; valaddr_reg:x3; val_offset:48933*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48933*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe80003ff; valaddr_reg:x3; val_offset:48936*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48936*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe80007ff; valaddr_reg:x3; val_offset:48939*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48939*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8000fff; valaddr_reg:x3; val_offset:48942*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48942*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8001fff; valaddr_reg:x3; val_offset:48945*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48945*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8003fff; valaddr_reg:x3; val_offset:48948*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48948*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8007fff; valaddr_reg:x3; val_offset:48951*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48951*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe800ffff; valaddr_reg:x3; val_offset:48954*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48954*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe801ffff; valaddr_reg:x3; val_offset:48957*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48957*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe803ffff; valaddr_reg:x3; val_offset:48960*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48960*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe807ffff; valaddr_reg:x3; val_offset:48963*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48963*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe80fffff; valaddr_reg:x3; val_offset:48966*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48966*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe81fffff; valaddr_reg:x3; val_offset:48969*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48969*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe83fffff; valaddr_reg:x3; val_offset:48972*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48972*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8400000; valaddr_reg:x3; val_offset:48975*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48975*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8600000; valaddr_reg:x3; val_offset:48978*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48978*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8700000; valaddr_reg:x3; val_offset:48981*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48981*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe8780000; valaddr_reg:x3; val_offset:48984*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48984*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87c0000; valaddr_reg:x3; val_offset:48987*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48987*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87e0000; valaddr_reg:x3; val_offset:48990*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48990*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87f0000; valaddr_reg:x3; val_offset:48993*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48993*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87f8000; valaddr_reg:x3; val_offset:48996*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48996*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fc000; valaddr_reg:x3; val_offset:48999*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48999*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fe000; valaddr_reg:x3; val_offset:49002*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49002*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ff000; valaddr_reg:x3; val_offset:49005*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49005*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ff800; valaddr_reg:x3; val_offset:49008*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49008*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffc00; valaddr_reg:x3; val_offset:49011*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49011*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffe00; valaddr_reg:x3; val_offset:49014*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49014*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fff00; valaddr_reg:x3; val_offset:49017*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49017*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fff80; valaddr_reg:x3; val_offset:49020*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49020*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fffc0; valaddr_reg:x3; val_offset:49023*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49023*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fffe0; valaddr_reg:x3; val_offset:49026*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49026*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffff0; valaddr_reg:x3; val_offset:49029*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49029*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffff8; valaddr_reg:x3; val_offset:49032*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49032*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffffc; valaddr_reg:x3; val_offset:49035*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49035*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87ffffe; valaddr_reg:x3; val_offset:49038*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49038*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xd0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xe87fffff; valaddr_reg:x3; val_offset:49041*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49041*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff000001; valaddr_reg:x3; val_offset:49044*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49044*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff000003; valaddr_reg:x3; val_offset:49047*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49047*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff000007; valaddr_reg:x3; val_offset:49050*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49050*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff199999; valaddr_reg:x3; val_offset:49053*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49053*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff249249; valaddr_reg:x3; val_offset:49056*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49056*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff333333; valaddr_reg:x3; val_offset:49059*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49059*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:49062*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49062*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:49065*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49065*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff444444; valaddr_reg:x3; val_offset:49068*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49068*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:49071*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49071*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:49074*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49074*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff666666; valaddr_reg:x3; val_offset:49077*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49077*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:49080*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49080*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:49083*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49083*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:49086*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49086*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x221736 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x4a288e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea21736; op2val:0xc04a288e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:49089*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49089*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf800000; valaddr_reg:x3; val_offset:49092*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49092*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:49095*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49095*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:49098*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49098*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:49101*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49101*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf80000f; valaddr_reg:x3; val_offset:49104*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49104*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf80001f; valaddr_reg:x3; val_offset:49107*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49107*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf80003f; valaddr_reg:x3; val_offset:49110*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49110*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf80007f; valaddr_reg:x3; val_offset:49113*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49113*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf8000ff; valaddr_reg:x3; val_offset:49116*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49116*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf8001ff; valaddr_reg:x3; val_offset:49119*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49119*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf8003ff; valaddr_reg:x3; val_offset:49122*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49122*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf8007ff; valaddr_reg:x3; val_offset:49125*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49125*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf800fff; valaddr_reg:x3; val_offset:49128*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49128*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf801fff; valaddr_reg:x3; val_offset:49131*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49131*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf803fff; valaddr_reg:x3; val_offset:49134*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49134*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf807fff; valaddr_reg:x3; val_offset:49137*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49137*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf80ffff; valaddr_reg:x3; val_offset:49140*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49140*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf81ffff; valaddr_reg:x3; val_offset:49143*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49143*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf83ffff; valaddr_reg:x3; val_offset:49146*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49146*0 + 3*127*FLEN/8, x4, x1, x2)

inst_16383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x226d04 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x64dee2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea26d04; op2val:0x8064dee2;
op3val:0xbf87ffff; valaddr_reg:x3; val_offset:49149*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 49149*0 + 3*127*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709585919,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709651455,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2709782527,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2710044671,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2710568959,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2711617535,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2713714687,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2713714688,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2715811840,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2716860416,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717384704,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717646848,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717777920,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717843456,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717876224,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717892608,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717900800,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717904896,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717906944,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717907968,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908480,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908736,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908864,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908928,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908960,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908976,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908984,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908988,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908990,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(2717908991,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2124493103,32,FLEN)
NAN_BOXED(2154144902,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314112,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314113,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314115,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314119,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314127,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314143,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314175,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314239,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314367,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892314623,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892315135,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892316159,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892318207,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892322303,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892330495,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892346879,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892379647,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892445183,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892576255,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3892838399,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3893362687,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3894411263,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3896508415,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3896508416,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3898605568,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3899654144,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900178432,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900440576,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900571648,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900637184,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900669952,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900686336,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900694528,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900698624,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900700672,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900701696,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702208,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702464,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702592,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702656,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702688,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702704,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702712,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702716,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702718,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(3900702719,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2124551990,32,FLEN)
NAN_BOXED(3226085518,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836864,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836879,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836895,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836927,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212836991,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212837119,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212837375,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212837887,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212838911,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212840959,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212845055,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212853247,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212869631,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212902399,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3212967935,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3213099007,32,FLEN)
NAN_BOXED(2124573956,32,FLEN)
NAN_BOXED(2154094306,32,FLEN)
NAN_BOXED(3213361151,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
