
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1536:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x3; val_offset:4608*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4608*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1537:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x3; val_offset:4611*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4611*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1538:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x3; val_offset:4614*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4614*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1539:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x3; val_offset:4617*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4617*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1540:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x3; val_offset:4620*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4620*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1541:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x3; val_offset:4623*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4623*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1542:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x3; val_offset:4626*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4626*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1543:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x015d4c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d015d4c; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x3; val_offset:4629*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4629*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1544:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28000000; valaddr_reg:x3; val_offset:4632*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4632*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1545:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28000001; valaddr_reg:x3; val_offset:4635*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4635*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1546:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28000003; valaddr_reg:x3; val_offset:4638*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4638*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1547:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28000007; valaddr_reg:x3; val_offset:4641*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4641*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1548:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2800000f; valaddr_reg:x3; val_offset:4644*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4644*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1549:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2800001f; valaddr_reg:x3; val_offset:4647*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4647*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1550:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2800003f; valaddr_reg:x3; val_offset:4650*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4650*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1551:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2800007f; valaddr_reg:x3; val_offset:4653*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4653*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1552:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x280000ff; valaddr_reg:x3; val_offset:4656*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4656*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1553:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x280001ff; valaddr_reg:x3; val_offset:4659*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4659*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1554:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x280003ff; valaddr_reg:x3; val_offset:4662*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4662*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1555:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x280007ff; valaddr_reg:x3; val_offset:4665*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4665*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1556:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28000fff; valaddr_reg:x3; val_offset:4668*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4668*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1557:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28001fff; valaddr_reg:x3; val_offset:4671*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4671*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1558:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28003fff; valaddr_reg:x3; val_offset:4674*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4674*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1559:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28007fff; valaddr_reg:x3; val_offset:4677*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4677*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1560:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2800ffff; valaddr_reg:x3; val_offset:4680*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4680*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1561:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2801ffff; valaddr_reg:x3; val_offset:4683*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4683*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1562:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2803ffff; valaddr_reg:x3; val_offset:4686*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4686*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1563:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x2807ffff; valaddr_reg:x3; val_offset:4689*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4689*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1564:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x280fffff; valaddr_reg:x3; val_offset:4692*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4692*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1565:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x281fffff; valaddr_reg:x3; val_offset:4695*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4695*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1566:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x283fffff; valaddr_reg:x3; val_offset:4698*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4698*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1567:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28400000; valaddr_reg:x3; val_offset:4701*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4701*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1568:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28600000; valaddr_reg:x3; val_offset:4704*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4704*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1569:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28700000; valaddr_reg:x3; val_offset:4707*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4707*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1570:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x28780000; valaddr_reg:x3; val_offset:4710*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4710*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1571:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287c0000; valaddr_reg:x3; val_offset:4713*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4713*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1572:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287e0000; valaddr_reg:x3; val_offset:4716*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4716*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1573:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287f0000; valaddr_reg:x3; val_offset:4719*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4719*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1574:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287f8000; valaddr_reg:x3; val_offset:4722*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4722*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1575:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fc000; valaddr_reg:x3; val_offset:4725*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4725*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1576:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fe000; valaddr_reg:x3; val_offset:4728*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4728*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1577:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ff000; valaddr_reg:x3; val_offset:4731*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4731*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1578:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ff800; valaddr_reg:x3; val_offset:4734*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4734*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1579:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffc00; valaddr_reg:x3; val_offset:4737*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4737*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1580:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffe00; valaddr_reg:x3; val_offset:4740*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4740*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1581:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fff00; valaddr_reg:x3; val_offset:4743*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4743*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1582:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fff80; valaddr_reg:x3; val_offset:4746*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4746*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1583:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fffc0; valaddr_reg:x3; val_offset:4749*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4749*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1584:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fffe0; valaddr_reg:x3; val_offset:4752*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4752*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1585:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffff0; valaddr_reg:x3; val_offset:4755*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4755*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1586:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffff8; valaddr_reg:x3; val_offset:4758*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4758*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1587:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffffc; valaddr_reg:x3; val_offset:4761*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4761*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1588:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287ffffe; valaddr_reg:x3; val_offset:4764*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4764*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1589:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x287fffff; valaddr_reg:x3; val_offset:4767*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4767*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1590:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3f800001; valaddr_reg:x3; val_offset:4770*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4770*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1591:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3f800003; valaddr_reg:x3; val_offset:4773*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4773*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1592:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3f800007; valaddr_reg:x3; val_offset:4776*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4776*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1593:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3f999999; valaddr_reg:x3; val_offset:4779*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4779*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1594:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:4782*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4782*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1595:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:4785*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4785*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1596:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:4788*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4788*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1597:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:4791*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4791*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1598:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:4794*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4794*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1599:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:4797*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4797*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1600:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:4800*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4800*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1601:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:4803*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4803*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1602:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:4806*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4806*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1603:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:4809*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4809*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1604:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:4812*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4812*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1605:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x025ce3 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x7b5c26 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d025ce3; op2val:0x1fb5c26;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:4815*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4815*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1606:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4800000; valaddr_reg:x3; val_offset:4818*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4818*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1607:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4800001; valaddr_reg:x3; val_offset:4821*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4821*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1608:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4800003; valaddr_reg:x3; val_offset:4824*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4824*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1609:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4800007; valaddr_reg:x3; val_offset:4827*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4827*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1610:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe480000f; valaddr_reg:x3; val_offset:4830*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4830*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1611:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe480001f; valaddr_reg:x3; val_offset:4833*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4833*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1612:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe480003f; valaddr_reg:x3; val_offset:4836*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4836*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1613:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe480007f; valaddr_reg:x3; val_offset:4839*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4839*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1614:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe48000ff; valaddr_reg:x3; val_offset:4842*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4842*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1615:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe48001ff; valaddr_reg:x3; val_offset:4845*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4845*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1616:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe48003ff; valaddr_reg:x3; val_offset:4848*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4848*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1617:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe48007ff; valaddr_reg:x3; val_offset:4851*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4851*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1618:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4800fff; valaddr_reg:x3; val_offset:4854*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4854*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1619:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4801fff; valaddr_reg:x3; val_offset:4857*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4857*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1620:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4803fff; valaddr_reg:x3; val_offset:4860*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4860*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1621:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4807fff; valaddr_reg:x3; val_offset:4863*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4863*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1622:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe480ffff; valaddr_reg:x3; val_offset:4866*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4866*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1623:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe481ffff; valaddr_reg:x3; val_offset:4869*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4869*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1624:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe483ffff; valaddr_reg:x3; val_offset:4872*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4872*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1625:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe487ffff; valaddr_reg:x3; val_offset:4875*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4875*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1626:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe48fffff; valaddr_reg:x3; val_offset:4878*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4878*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1627:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe49fffff; valaddr_reg:x3; val_offset:4881*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4881*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1628:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4bfffff; valaddr_reg:x3; val_offset:4884*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4884*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1629:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4c00000; valaddr_reg:x3; val_offset:4887*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4887*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1630:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4e00000; valaddr_reg:x3; val_offset:4890*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4890*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1631:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4f00000; valaddr_reg:x3; val_offset:4893*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4893*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1632:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4f80000; valaddr_reg:x3; val_offset:4896*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4896*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1633:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fc0000; valaddr_reg:x3; val_offset:4899*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4899*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1634:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fe0000; valaddr_reg:x3; val_offset:4902*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4902*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1635:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ff0000; valaddr_reg:x3; val_offset:4905*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4905*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1636:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ff8000; valaddr_reg:x3; val_offset:4908*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4908*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1637:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffc000; valaddr_reg:x3; val_offset:4911*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4911*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1638:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffe000; valaddr_reg:x3; val_offset:4914*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4914*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1639:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fff000; valaddr_reg:x3; val_offset:4917*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4917*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1640:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fff800; valaddr_reg:x3; val_offset:4920*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4920*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1641:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffc00; valaddr_reg:x3; val_offset:4923*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4923*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1642:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffe00; valaddr_reg:x3; val_offset:4926*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4926*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1643:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffff00; valaddr_reg:x3; val_offset:4929*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4929*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1644:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffff80; valaddr_reg:x3; val_offset:4932*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4932*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1645:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffffc0; valaddr_reg:x3; val_offset:4935*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4935*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1646:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffffe0; valaddr_reg:x3; val_offset:4938*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4938*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1647:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffff0; valaddr_reg:x3; val_offset:4941*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4941*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1648:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffff8; valaddr_reg:x3; val_offset:4944*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4944*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1649:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffffc; valaddr_reg:x3; val_offset:4947*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4947*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1650:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4fffffe; valaddr_reg:x3; val_offset:4950*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4950*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1651:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xe4ffffff; valaddr_reg:x3; val_offset:4953*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4953*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1652:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff000001; valaddr_reg:x3; val_offset:4956*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4956*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1653:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff000003; valaddr_reg:x3; val_offset:4959*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4959*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1654:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff000007; valaddr_reg:x3; val_offset:4962*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4962*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1655:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff199999; valaddr_reg:x3; val_offset:4965*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4965*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1656:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff249249; valaddr_reg:x3; val_offset:4968*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4968*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1657:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff333333; valaddr_reg:x3; val_offset:4971*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4971*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1658:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:4974*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4974*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1659:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:4977*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4977*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1660:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff444444; valaddr_reg:x3; val_offset:4980*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4980*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1661:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:4983*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4983*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1662:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:4986*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4986*0 + 3*12*FLEN/8, x4, x1, x2)

inst_1663:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x032ddf and fs2 == 1 and fe2 == 0x83 and fm2 == 0x79cbb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d032ddf; op2val:0xc1f9cbb3;
op3val:0xff666666; valaddr_reg:x3; val_offset:4989*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 4989*0 + 3*12*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141760,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141824,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141856,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141872,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141880,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141884,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141886,32,FLEN)
NAN_BOXED(2097241420,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141887,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088640,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088641,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088643,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088647,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088655,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088671,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088703,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088767,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671088895,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671089151,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671089663,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671090687,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671092735,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671096831,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671105023,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671121407,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671154175,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671219711,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671350783,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(671612927,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(672137215,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(673185791,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(675282943,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(675282944,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(677380096,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(678428672,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(678952960,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679215104,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679346176,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679411712,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679444480,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679460864,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679469056,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679473152,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679475200,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679476224,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679476736,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679476992,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477120,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477184,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477216,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477232,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477240,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477244,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477246,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(679477247,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2097306851,32,FLEN)
NAN_BOXED(33250342,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593856,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593857,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593859,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593863,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593871,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593887,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593919,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833593983,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833594111,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833594367,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833594879,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833595903,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833597951,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833602047,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833610239,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833626623,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833659391,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833724927,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3833855999,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3834118143,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3834642431,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3835691007,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3837788159,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3837788160,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3839885312,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3840933888,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841458176,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841720320,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841851392,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841916928,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841949696,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841966080,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841974272,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841978368,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841980416,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841981440,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841981952,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982208,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982336,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982400,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982432,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982448,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982456,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982460,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982462,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(3841982463,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2097360351,32,FLEN)
NAN_BOXED(3254373299,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
