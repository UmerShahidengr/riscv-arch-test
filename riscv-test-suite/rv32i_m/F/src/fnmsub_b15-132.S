
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_16768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5ffff80; valaddr_reg:x3; val_offset:50304*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50304*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5ffffc0; valaddr_reg:x3; val_offset:50307*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50307*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5ffffe0; valaddr_reg:x3; val_offset:50310*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50310*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5fffff0; valaddr_reg:x3; val_offset:50313*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50313*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5fffff8; valaddr_reg:x3; val_offset:50316*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50316*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5fffffc; valaddr_reg:x3; val_offset:50319*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50319*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5fffffe; valaddr_reg:x3; val_offset:50322*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50322*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x4b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xa5ffffff; valaddr_reg:x3; val_offset:50325*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50325*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbf800001; valaddr_reg:x3; val_offset:50328*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50328*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbf800003; valaddr_reg:x3; val_offset:50331*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50331*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbf800007; valaddr_reg:x3; val_offset:50334*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50334*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbf999999; valaddr_reg:x3; val_offset:50337*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50337*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:50340*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50340*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:50343*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50343*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:50346*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50346*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:50349*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50349*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:50352*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50352*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:50355*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50355*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:50358*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50358*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:50361*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50361*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:50364*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50364*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:50367*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50367*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:50370*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50370*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26ca91 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x623b05 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6ca91; op2val:0x80623b05;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:50373*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50373*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:50376*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50376*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:50379*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50379*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:50382*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50382*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:50385*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50385*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:50388*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50388*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:50391*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50391*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:50394*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50394*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:50397*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50397*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:50400*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50400*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:50403*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50403*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:50406*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50406*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:50409*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50409*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:50412*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50412*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:50415*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50415*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:50418*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50418*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:50421*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50421*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44800000; valaddr_reg:x3; val_offset:50424*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50424*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44800001; valaddr_reg:x3; val_offset:50427*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50427*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44800003; valaddr_reg:x3; val_offset:50430*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50430*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44800007; valaddr_reg:x3; val_offset:50433*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50433*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4480000f; valaddr_reg:x3; val_offset:50436*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50436*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4480001f; valaddr_reg:x3; val_offset:50439*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50439*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4480003f; valaddr_reg:x3; val_offset:50442*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50442*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4480007f; valaddr_reg:x3; val_offset:50445*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50445*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x448000ff; valaddr_reg:x3; val_offset:50448*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50448*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x448001ff; valaddr_reg:x3; val_offset:50451*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50451*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x448003ff; valaddr_reg:x3; val_offset:50454*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50454*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x448007ff; valaddr_reg:x3; val_offset:50457*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50457*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44800fff; valaddr_reg:x3; val_offset:50460*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50460*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44801fff; valaddr_reg:x3; val_offset:50463*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50463*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44803fff; valaddr_reg:x3; val_offset:50466*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50466*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44807fff; valaddr_reg:x3; val_offset:50469*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50469*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4480ffff; valaddr_reg:x3; val_offset:50472*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50472*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4481ffff; valaddr_reg:x3; val_offset:50475*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50475*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4483ffff; valaddr_reg:x3; val_offset:50478*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50478*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x4487ffff; valaddr_reg:x3; val_offset:50481*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50481*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x448fffff; valaddr_reg:x3; val_offset:50484*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50484*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x449fffff; valaddr_reg:x3; val_offset:50487*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50487*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44bfffff; valaddr_reg:x3; val_offset:50490*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50490*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44c00000; valaddr_reg:x3; val_offset:50493*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50493*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44e00000; valaddr_reg:x3; val_offset:50496*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50496*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44f00000; valaddr_reg:x3; val_offset:50499*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50499*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44f80000; valaddr_reg:x3; val_offset:50502*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50502*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fc0000; valaddr_reg:x3; val_offset:50505*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50505*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fe0000; valaddr_reg:x3; val_offset:50508*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50508*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ff0000; valaddr_reg:x3; val_offset:50511*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50511*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ff8000; valaddr_reg:x3; val_offset:50514*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50514*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffc000; valaddr_reg:x3; val_offset:50517*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50517*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffe000; valaddr_reg:x3; val_offset:50520*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50520*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fff000; valaddr_reg:x3; val_offset:50523*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50523*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fff800; valaddr_reg:x3; val_offset:50526*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50526*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffc00; valaddr_reg:x3; val_offset:50529*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50529*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffe00; valaddr_reg:x3; val_offset:50532*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50532*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffff00; valaddr_reg:x3; val_offset:50535*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50535*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffff80; valaddr_reg:x3; val_offset:50538*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50538*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffffc0; valaddr_reg:x3; val_offset:50541*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50541*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffffe0; valaddr_reg:x3; val_offset:50544*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50544*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffff0; valaddr_reg:x3; val_offset:50547*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50547*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffff8; valaddr_reg:x3; val_offset:50550*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50550*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffffc; valaddr_reg:x3; val_offset:50553*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50553*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44fffffe; valaddr_reg:x3; val_offset:50556*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50556*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x272145 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62080f and fs3 == 0 and fe3 == 0x89 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea72145; op2val:0x62080f;
op3val:0x44ffffff; valaddr_reg:x3; val_offset:50559*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50559*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:50562*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50562*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:50565*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50565*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:50568*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50568*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:50571*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50571*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:50574*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50574*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:50577*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50577*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:50580*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50580*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:50583*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50583*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:50586*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50586*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:50589*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50589*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:50592*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50592*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:50595*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50595*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:50598*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50598*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:50601*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50601*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:50604*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50604*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:50607*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50607*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:50610*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50610*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:50613*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50613*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:50616*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50616*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:50619*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50619*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:50622*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50622*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:50625*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50625*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:50628*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50628*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:50631*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50631*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:50634*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50634*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:50637*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50637*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:50640*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50640*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:50643*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50643*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:50646*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50646*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:50649*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50649*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:50652*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50652*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:50655*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50655*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:50658*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50658*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:50661*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50661*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:50664*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50664*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:50667*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50667*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:50670*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50670*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:50673*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50673*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:50676*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50676*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:50679*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50679*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:50682*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50682*0 + 3*131*FLEN/8, x4, x1, x2)

inst_16895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x277c74 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea77c74; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:50685*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 50685*0 + 3*131*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017728,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017792,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017824,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017840,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017848,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017852,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017854,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(2785017855,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2124860049,32,FLEN)
NAN_BOXED(2153921285,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239296,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239297,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239299,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239303,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239311,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239327,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239359,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239423,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239551,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149239807,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149240319,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149241343,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149243391,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149247487,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149255679,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149272063,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149304831,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149370367,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149501439,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1149763583,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1150287871,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1151336447,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1153433599,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1153433600,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1155530752,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1156579328,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157103616,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157365760,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157496832,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157562368,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157595136,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157611520,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157619712,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157623808,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157625856,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157626880,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627392,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627648,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627776,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627840,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627872,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627888,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627896,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627900,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627902,32,FLEN)
NAN_BOXED(2124882245,32,FLEN)
NAN_BOXED(6424591,32,FLEN)
NAN_BOXED(1157627903,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649472,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649473,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649475,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649479,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649487,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649503,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649535,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649599,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649727,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649983,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172650495,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172651519,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172653567,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172657663,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172665855,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172682239,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172715007,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172780543,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172911615,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173173759,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2173698047,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2174746623,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843775,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2176843776,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2178940928,32,FLEN)
NAN_BOXED(2124905588,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2179989504,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
