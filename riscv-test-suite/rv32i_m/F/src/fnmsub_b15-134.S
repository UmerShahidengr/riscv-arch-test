
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ff8000; valaddr_reg:x3; val_offset:51072*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51072*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffc000; valaddr_reg:x3; val_offset:51075*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51075*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffe000; valaddr_reg:x3; val_offset:51078*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51078*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fff000; valaddr_reg:x3; val_offset:51081*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51081*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fff800; valaddr_reg:x3; val_offset:51084*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51084*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffc00; valaddr_reg:x3; val_offset:51087*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51087*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffe00; valaddr_reg:x3; val_offset:51090*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51090*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffff00; valaddr_reg:x3; val_offset:51093*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51093*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffff80; valaddr_reg:x3; val_offset:51096*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51096*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffffc0; valaddr_reg:x3; val_offset:51099*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51099*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffffe0; valaddr_reg:x3; val_offset:51102*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51102*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffff0; valaddr_reg:x3; val_offset:51105*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51105*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffff8; valaddr_reg:x3; val_offset:51108*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51108*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffffc; valaddr_reg:x3; val_offset:51111*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51111*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8fffffe; valaddr_reg:x3; val_offset:51114*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51114*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285a5d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85a5d; op2val:0x0;
op3val:0x8ffffff; valaddr_reg:x3; val_offset:51117*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51117*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3f800001; valaddr_reg:x3; val_offset:51120*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51120*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3f800003; valaddr_reg:x3; val_offset:51123*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51123*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3f800007; valaddr_reg:x3; val_offset:51126*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51126*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3f999999; valaddr_reg:x3; val_offset:51129*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51129*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:51132*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51132*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:51135*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51135*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:51138*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51138*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:51141*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51141*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:51144*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51144*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:51147*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51147*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:51150*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51150*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:51153*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51153*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:51156*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51156*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:51159*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51159*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:51162*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51162*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:51165*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51165*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47800000; valaddr_reg:x3; val_offset:51168*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51168*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47800001; valaddr_reg:x3; val_offset:51171*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51171*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47800003; valaddr_reg:x3; val_offset:51174*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51174*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47800007; valaddr_reg:x3; val_offset:51177*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51177*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4780000f; valaddr_reg:x3; val_offset:51180*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51180*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4780001f; valaddr_reg:x3; val_offset:51183*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51183*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4780003f; valaddr_reg:x3; val_offset:51186*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51186*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4780007f; valaddr_reg:x3; val_offset:51189*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51189*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x478000ff; valaddr_reg:x3; val_offset:51192*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51192*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x478001ff; valaddr_reg:x3; val_offset:51195*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51195*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x478003ff; valaddr_reg:x3; val_offset:51198*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51198*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x478007ff; valaddr_reg:x3; val_offset:51201*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51201*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47800fff; valaddr_reg:x3; val_offset:51204*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51204*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47801fff; valaddr_reg:x3; val_offset:51207*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51207*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47803fff; valaddr_reg:x3; val_offset:51210*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51210*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47807fff; valaddr_reg:x3; val_offset:51213*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51213*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4780ffff; valaddr_reg:x3; val_offset:51216*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51216*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4781ffff; valaddr_reg:x3; val_offset:51219*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51219*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4783ffff; valaddr_reg:x3; val_offset:51222*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51222*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x4787ffff; valaddr_reg:x3; val_offset:51225*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51225*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x478fffff; valaddr_reg:x3; val_offset:51228*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51228*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x479fffff; valaddr_reg:x3; val_offset:51231*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51231*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47bfffff; valaddr_reg:x3; val_offset:51234*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51234*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47c00000; valaddr_reg:x3; val_offset:51237*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51237*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47e00000; valaddr_reg:x3; val_offset:51240*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51240*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47f00000; valaddr_reg:x3; val_offset:51243*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51243*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47f80000; valaddr_reg:x3; val_offset:51246*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51246*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fc0000; valaddr_reg:x3; val_offset:51249*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51249*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fe0000; valaddr_reg:x3; val_offset:51252*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51252*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ff0000; valaddr_reg:x3; val_offset:51255*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51255*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ff8000; valaddr_reg:x3; val_offset:51258*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51258*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffc000; valaddr_reg:x3; val_offset:51261*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51261*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffe000; valaddr_reg:x3; val_offset:51264*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51264*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fff000; valaddr_reg:x3; val_offset:51267*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51267*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fff800; valaddr_reg:x3; val_offset:51270*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51270*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffc00; valaddr_reg:x3; val_offset:51273*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51273*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffe00; valaddr_reg:x3; val_offset:51276*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51276*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffff00; valaddr_reg:x3; val_offset:51279*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51279*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffff80; valaddr_reg:x3; val_offset:51282*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51282*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffffc0; valaddr_reg:x3; val_offset:51285*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51285*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffffe0; valaddr_reg:x3; val_offset:51288*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51288*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffff0; valaddr_reg:x3; val_offset:51291*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51291*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffff8; valaddr_reg:x3; val_offset:51294*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51294*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffffc; valaddr_reg:x3; val_offset:51297*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51297*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47fffffe; valaddr_reg:x3; val_offset:51300*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51300*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x285b7e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x615118 and fs3 == 0 and fe3 == 0x8f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea85b7e; op2val:0x615118;
op3val:0x47ffffff; valaddr_reg:x3; val_offset:51303*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51303*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b800000; valaddr_reg:x3; val_offset:51306*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51306*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b800001; valaddr_reg:x3; val_offset:51309*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51309*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b800003; valaddr_reg:x3; val_offset:51312*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51312*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b800007; valaddr_reg:x3; val_offset:51315*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51315*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b80000f; valaddr_reg:x3; val_offset:51318*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51318*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b80001f; valaddr_reg:x3; val_offset:51321*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51321*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b80003f; valaddr_reg:x3; val_offset:51324*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51324*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b80007f; valaddr_reg:x3; val_offset:51327*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51327*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b8000ff; valaddr_reg:x3; val_offset:51330*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51330*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b8001ff; valaddr_reg:x3; val_offset:51333*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51333*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b8003ff; valaddr_reg:x3; val_offset:51336*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51336*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b8007ff; valaddr_reg:x3; val_offset:51339*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51339*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b800fff; valaddr_reg:x3; val_offset:51342*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51342*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b801fff; valaddr_reg:x3; val_offset:51345*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51345*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b803fff; valaddr_reg:x3; val_offset:51348*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51348*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b807fff; valaddr_reg:x3; val_offset:51351*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51351*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b80ffff; valaddr_reg:x3; val_offset:51354*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51354*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b81ffff; valaddr_reg:x3; val_offset:51357*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51357*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b83ffff; valaddr_reg:x3; val_offset:51360*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51360*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b87ffff; valaddr_reg:x3; val_offset:51363*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51363*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b8fffff; valaddr_reg:x3; val_offset:51366*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51366*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6b9fffff; valaddr_reg:x3; val_offset:51369*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51369*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bbfffff; valaddr_reg:x3; val_offset:51372*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51372*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bc00000; valaddr_reg:x3; val_offset:51375*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51375*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6be00000; valaddr_reg:x3; val_offset:51378*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51378*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bf00000; valaddr_reg:x3; val_offset:51381*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51381*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bf80000; valaddr_reg:x3; val_offset:51384*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51384*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfc0000; valaddr_reg:x3; val_offset:51387*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51387*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfe0000; valaddr_reg:x3; val_offset:51390*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51390*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bff0000; valaddr_reg:x3; val_offset:51393*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51393*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bff8000; valaddr_reg:x3; val_offset:51396*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51396*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffc000; valaddr_reg:x3; val_offset:51399*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51399*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffe000; valaddr_reg:x3; val_offset:51402*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51402*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfff000; valaddr_reg:x3; val_offset:51405*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51405*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfff800; valaddr_reg:x3; val_offset:51408*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51408*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffc00; valaddr_reg:x3; val_offset:51411*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51411*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffe00; valaddr_reg:x3; val_offset:51414*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51414*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffff00; valaddr_reg:x3; val_offset:51417*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51417*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffff80; valaddr_reg:x3; val_offset:51420*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51420*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffffc0; valaddr_reg:x3; val_offset:51423*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51423*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffffe0; valaddr_reg:x3; val_offset:51426*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51426*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffff0; valaddr_reg:x3; val_offset:51429*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51429*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffff8; valaddr_reg:x3; val_offset:51432*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51432*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffffc; valaddr_reg:x3; val_offset:51435*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51435*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bfffffe; valaddr_reg:x3; val_offset:51438*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51438*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x6bffffff; valaddr_reg:x3; val_offset:51441*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51441*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x7f000001; valaddr_reg:x3; val_offset:51444*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51444*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x7f000003; valaddr_reg:x3; val_offset:51447*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51447*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x7f000007; valaddr_reg:x3; val_offset:51450*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51450*0 + 3*133*FLEN/8, x4, x1, x2)

inst_17151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2ad137 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x3fd4aa and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eaad137; op2val:0x403fd4aa;
op3val:0x7f199999; valaddr_reg:x3; val_offset:51453*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51453*0 + 3*133*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150962176,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150978560,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150986752,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150990848,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150992896,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150993920,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994432,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994688,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994816,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994880,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994912,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994928,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994936,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994940,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994942,32,FLEN)
NAN_BOXED(2124962397,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994943,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570944,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570945,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570947,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570951,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570959,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199570975,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199571007,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199571071,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199571199,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199571455,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199571967,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199572991,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199575039,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199579135,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199587327,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199603711,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199636479,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199702015,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1199833087,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1200095231,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1200619519,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1201668095,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1203765247,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1203765248,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1205862400,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1206910976,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207435264,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207697408,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207828480,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207894016,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207926784,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207943168,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207951360,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207955456,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207957504,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207958528,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959040,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959296,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959424,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959488,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959520,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959536,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959544,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959548,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959550,32,FLEN)
NAN_BOXED(2124962686,32,FLEN)
NAN_BOXED(6377752,32,FLEN)
NAN_BOXED(1207959551,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550720,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550721,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550723,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550727,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550735,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550751,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550783,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550847,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803550975,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803551231,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803551743,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803552767,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803554815,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803558911,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803567103,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803583487,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803616255,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803681791,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1803812863,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1804075007,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1804599295,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1805647871,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1807745023,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1807745024,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1809842176,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1810890752,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811415040,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811677184,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811808256,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811873792,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811906560,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811922944,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811931136,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811935232,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811937280,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811938304,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811938816,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939072,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939200,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939264,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939296,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939312,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939320,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939324,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939326,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(1811939327,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2125123895,32,FLEN)
NAN_BOXED(1077925034,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
