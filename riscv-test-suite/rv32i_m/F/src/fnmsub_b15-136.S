
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_17280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:51840*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51840*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:51843*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51843*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:51846*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51846*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:51849*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51849*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:51852*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51852*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:51855*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51855*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:51858*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51858*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:51861*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51861*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:51864*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51864*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:51867*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51867*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:51870*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51870*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:51873*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51873*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:51876*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51876*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:51879*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51879*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:51882*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51882*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:51885*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51885*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:51888*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51888*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:51891*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51891*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:51894*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51894*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:51897*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51897*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:51900*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51900*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:51903*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51903*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:51906*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51906*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:51909*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51909*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2cf546 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eacf546; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:51912*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51912*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3f800001; valaddr_reg:x3; val_offset:51915*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51915*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3f800003; valaddr_reg:x3; val_offset:51918*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51918*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3f800007; valaddr_reg:x3; val_offset:51921*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51921*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3f999999; valaddr_reg:x3; val_offset:51924*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51924*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:51927*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51927*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:51930*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51930*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:51933*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51933*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:51936*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51936*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:51939*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51939*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:51942*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51942*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:51945*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51945*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:51948*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51948*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:51951*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51951*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:51954*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51954*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:51957*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51957*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:51960*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51960*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a800000; valaddr_reg:x3; val_offset:51963*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51963*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a800001; valaddr_reg:x3; val_offset:51966*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51966*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a800003; valaddr_reg:x3; val_offset:51969*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51969*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a800007; valaddr_reg:x3; val_offset:51972*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51972*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a80000f; valaddr_reg:x3; val_offset:51975*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51975*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a80001f; valaddr_reg:x3; val_offset:51978*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51978*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a80003f; valaddr_reg:x3; val_offset:51981*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51981*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a80007f; valaddr_reg:x3; val_offset:51984*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51984*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a8000ff; valaddr_reg:x3; val_offset:51987*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51987*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a8001ff; valaddr_reg:x3; val_offset:51990*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51990*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a8003ff; valaddr_reg:x3; val_offset:51993*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51993*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a8007ff; valaddr_reg:x3; val_offset:51996*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51996*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a800fff; valaddr_reg:x3; val_offset:51999*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 51999*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a801fff; valaddr_reg:x3; val_offset:52002*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52002*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a803fff; valaddr_reg:x3; val_offset:52005*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52005*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a807fff; valaddr_reg:x3; val_offset:52008*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52008*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a80ffff; valaddr_reg:x3; val_offset:52011*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52011*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a81ffff; valaddr_reg:x3; val_offset:52014*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52014*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a83ffff; valaddr_reg:x3; val_offset:52017*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52017*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a87ffff; valaddr_reg:x3; val_offset:52020*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52020*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a8fffff; valaddr_reg:x3; val_offset:52023*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52023*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4a9fffff; valaddr_reg:x3; val_offset:52026*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52026*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4abfffff; valaddr_reg:x3; val_offset:52029*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52029*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4ac00000; valaddr_reg:x3; val_offset:52032*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52032*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4ae00000; valaddr_reg:x3; val_offset:52035*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52035*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4af00000; valaddr_reg:x3; val_offset:52038*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52038*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4af80000; valaddr_reg:x3; val_offset:52041*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52041*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afc0000; valaddr_reg:x3; val_offset:52044*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52044*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afe0000; valaddr_reg:x3; val_offset:52047*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52047*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4aff0000; valaddr_reg:x3; val_offset:52050*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52050*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4aff8000; valaddr_reg:x3; val_offset:52053*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52053*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affc000; valaddr_reg:x3; val_offset:52056*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52056*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affe000; valaddr_reg:x3; val_offset:52059*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52059*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afff000; valaddr_reg:x3; val_offset:52062*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52062*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afff800; valaddr_reg:x3; val_offset:52065*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52065*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffc00; valaddr_reg:x3; val_offset:52068*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52068*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffe00; valaddr_reg:x3; val_offset:52071*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52071*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affff00; valaddr_reg:x3; val_offset:52074*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52074*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affff80; valaddr_reg:x3; val_offset:52077*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52077*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affffc0; valaddr_reg:x3; val_offset:52080*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52080*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affffe0; valaddr_reg:x3; val_offset:52083*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52083*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffff0; valaddr_reg:x3; val_offset:52086*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52086*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffff8; valaddr_reg:x3; val_offset:52089*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52089*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffffc; valaddr_reg:x3; val_offset:52092*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52092*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4afffffe; valaddr_reg:x3; val_offset:52095*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52095*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2d3925 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5e9549 and fs3 == 0 and fe3 == 0x95 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ead3925; op2val:0x5e9549;
op3val:0x4affffff; valaddr_reg:x3; val_offset:52098*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52098*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:52101*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52101*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:52104*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52104*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:52107*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52107*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:52110*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52110*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:52113*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52113*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:52116*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52116*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:52119*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52119*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:52122*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52122*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:52125*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52125*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:52128*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52128*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:52131*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52131*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:52134*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52134*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:52137*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52137*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:52140*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52140*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:52143*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52143*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:52146*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52146*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:52149*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52149*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:52152*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52152*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:52155*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52155*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:52158*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52158*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:52161*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52161*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:52164*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52164*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:52167*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52167*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:52170*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52170*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:52173*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52173*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:52176*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52176*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:52179*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52179*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:52182*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52182*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:52185*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52185*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:52188*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52188*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:52191*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52191*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:52194*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52194*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:52197*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52197*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:52200*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52200*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:52203*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52203*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:52206*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52206*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:52209*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52209*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:52212*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52212*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:52215*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52215*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:52218*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52218*0 + 3*135*FLEN/8, x4, x1, x2)

inst_17407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2db47e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eadb47e; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:52221*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 52221*0 + 3*135*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(203423743,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2125264198,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902592,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902593,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902595,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902599,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902607,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902623,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902655,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902719,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249902847,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249903103,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249903615,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249904639,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249906687,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249910783,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249918975,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249935359,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1249968127,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1250033663,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1250164735,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1250426879,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1250951167,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1251999743,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1254096895,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1254096896,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1256194048,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1257242624,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1257766912,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258029056,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258160128,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258225664,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258258432,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258274816,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258283008,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258287104,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258289152,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258290176,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258290688,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258290944,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291072,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291136,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291168,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291184,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291192,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291196,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291198,32,FLEN)
NAN_BOXED(2125281573,32,FLEN)
NAN_BOXED(6198601,32,FLEN)
NAN_BOXED(1258291199,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2125313150,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
