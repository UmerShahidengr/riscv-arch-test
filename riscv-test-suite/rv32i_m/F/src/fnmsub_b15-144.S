
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb680007f; valaddr_reg:x3; val_offset:54912*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54912*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb68000ff; valaddr_reg:x3; val_offset:54915*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54915*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb68001ff; valaddr_reg:x3; val_offset:54918*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54918*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb68003ff; valaddr_reg:x3; val_offset:54921*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54921*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb68007ff; valaddr_reg:x3; val_offset:54924*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54924*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6800fff; valaddr_reg:x3; val_offset:54927*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54927*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6801fff; valaddr_reg:x3; val_offset:54930*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54930*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6803fff; valaddr_reg:x3; val_offset:54933*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54933*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6807fff; valaddr_reg:x3; val_offset:54936*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54936*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb680ffff; valaddr_reg:x3; val_offset:54939*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54939*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb681ffff; valaddr_reg:x3; val_offset:54942*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54942*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb683ffff; valaddr_reg:x3; val_offset:54945*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54945*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb687ffff; valaddr_reg:x3; val_offset:54948*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54948*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb68fffff; valaddr_reg:x3; val_offset:54951*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54951*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb69fffff; valaddr_reg:x3; val_offset:54954*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54954*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6bfffff; valaddr_reg:x3; val_offset:54957*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54957*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6c00000; valaddr_reg:x3; val_offset:54960*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54960*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6e00000; valaddr_reg:x3; val_offset:54963*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54963*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6f00000; valaddr_reg:x3; val_offset:54966*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54966*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6f80000; valaddr_reg:x3; val_offset:54969*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54969*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fc0000; valaddr_reg:x3; val_offset:54972*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54972*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fe0000; valaddr_reg:x3; val_offset:54975*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54975*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ff0000; valaddr_reg:x3; val_offset:54978*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54978*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ff8000; valaddr_reg:x3; val_offset:54981*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54981*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffc000; valaddr_reg:x3; val_offset:54984*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54984*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffe000; valaddr_reg:x3; val_offset:54987*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54987*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fff000; valaddr_reg:x3; val_offset:54990*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54990*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fff800; valaddr_reg:x3; val_offset:54993*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54993*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffc00; valaddr_reg:x3; val_offset:54996*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54996*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffe00; valaddr_reg:x3; val_offset:54999*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 54999*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffff00; valaddr_reg:x3; val_offset:55002*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55002*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffff80; valaddr_reg:x3; val_offset:55005*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55005*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffffc0; valaddr_reg:x3; val_offset:55008*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55008*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffffe0; valaddr_reg:x3; val_offset:55011*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55011*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffff0; valaddr_reg:x3; val_offset:55014*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55014*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffff8; valaddr_reg:x3; val_offset:55017*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55017*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffffc; valaddr_reg:x3; val_offset:55020*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55020*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6fffffe; valaddr_reg:x3; val_offset:55023*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55023*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x6d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xb6ffffff; valaddr_reg:x3; val_offset:55026*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55026*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbf800001; valaddr_reg:x3; val_offset:55029*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55029*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbf800003; valaddr_reg:x3; val_offset:55032*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55032*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbf800007; valaddr_reg:x3; val_offset:55035*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55035*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbf999999; valaddr_reg:x3; val_offset:55038*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55038*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:55041*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55041*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:55044*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55044*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:55047*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55047*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:55050*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55050*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:55053*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55053*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:55056*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55056*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:55059*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55059*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:55062*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55062*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:55065*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55065*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:55068*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55068*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:55071*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55071*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x373e6b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x596932 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb73e6b; op2val:0x80596932;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:55074*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55074*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:55077*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55077*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:55080*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55080*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:55083*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55083*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:55086*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55086*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:55089*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55089*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:55092*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55092*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:55095*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55095*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:55098*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55098*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:55101*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55101*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:55104*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55104*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:55107*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55107*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:55110*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55110*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:55113*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55113*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:55116*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55116*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:55119*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55119*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:55122*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55122*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81000000; valaddr_reg:x3; val_offset:55125*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55125*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81000001; valaddr_reg:x3; val_offset:55128*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55128*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81000003; valaddr_reg:x3; val_offset:55131*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55131*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81000007; valaddr_reg:x3; val_offset:55134*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55134*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8100000f; valaddr_reg:x3; val_offset:55137*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55137*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8100001f; valaddr_reg:x3; val_offset:55140*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55140*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8100003f; valaddr_reg:x3; val_offset:55143*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55143*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8100007f; valaddr_reg:x3; val_offset:55146*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55146*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x810000ff; valaddr_reg:x3; val_offset:55149*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55149*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x810001ff; valaddr_reg:x3; val_offset:55152*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55152*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x810003ff; valaddr_reg:x3; val_offset:55155*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55155*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x810007ff; valaddr_reg:x3; val_offset:55158*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55158*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81000fff; valaddr_reg:x3; val_offset:55161*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55161*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81001fff; valaddr_reg:x3; val_offset:55164*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55164*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81003fff; valaddr_reg:x3; val_offset:55167*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55167*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81007fff; valaddr_reg:x3; val_offset:55170*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55170*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8100ffff; valaddr_reg:x3; val_offset:55173*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55173*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8101ffff; valaddr_reg:x3; val_offset:55176*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55176*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8103ffff; valaddr_reg:x3; val_offset:55179*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55179*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x8107ffff; valaddr_reg:x3; val_offset:55182*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55182*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x810fffff; valaddr_reg:x3; val_offset:55185*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55185*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x811fffff; valaddr_reg:x3; val_offset:55188*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55188*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x813fffff; valaddr_reg:x3; val_offset:55191*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55191*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81400000; valaddr_reg:x3; val_offset:55194*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55194*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81600000; valaddr_reg:x3; val_offset:55197*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55197*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81700000; valaddr_reg:x3; val_offset:55200*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55200*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x81780000; valaddr_reg:x3; val_offset:55203*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55203*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817c0000; valaddr_reg:x3; val_offset:55206*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55206*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817e0000; valaddr_reg:x3; val_offset:55209*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55209*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817f0000; valaddr_reg:x3; val_offset:55212*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55212*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817f8000; valaddr_reg:x3; val_offset:55215*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55215*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fc000; valaddr_reg:x3; val_offset:55218*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55218*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fe000; valaddr_reg:x3; val_offset:55221*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55221*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:55224*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55224*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:55227*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55227*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:55230*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55230*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:55233*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55233*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:55236*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55236*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:55239*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55239*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:55242*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55242*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:55245*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55245*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:55248*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55248*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:55251*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55251*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:55254*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55254*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:55257*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55257*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x382999 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb82999; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:55260*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55260*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:55263*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55263*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:55266*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55266*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:55269*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55269*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:55272*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55272*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:55275*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55275*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:55278*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55278*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:55281*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55281*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:55284*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55284*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:55287*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55287*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:55290*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55290*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x38d1a5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb8d1a5; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:55293*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55293*0 + 3*143*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061842047,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061842175,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061842431,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061842943,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061843967,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061846015,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061850111,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061858303,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061874687,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061907455,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3061972991,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3062104063,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3062366207,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3062890495,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3063939071,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3066036223,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3066036224,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3068133376,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3069181952,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3069706240,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3069968384,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070099456,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070164992,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070197760,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070214144,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070222336,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070226432,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070228480,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070229504,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230016,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230272,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230400,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230464,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230496,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230512,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230520,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230524,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230526,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3070230527,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2125938283,32,FLEN)
NAN_BOXED(2153343282,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260864,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260865,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260867,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260871,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260879,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260895,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260927,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260991,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261119,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261375,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164261887,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164262911,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164264959,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164269055,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164277247,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164293631,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164326399,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164391935,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164523007,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164785151,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2165309439,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2166358015,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455167,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2168455168,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2170552320,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2171600896,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172125184,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172387328,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172518400,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172583936,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172616704,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172633088,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172641280,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2125998489,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126041509,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
