
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3807fff; valaddr_reg:x3; val_offset:55680*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55680*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe380ffff; valaddr_reg:x3; val_offset:55683*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55683*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe381ffff; valaddr_reg:x3; val_offset:55686*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55686*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe383ffff; valaddr_reg:x3; val_offset:55689*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55689*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe387ffff; valaddr_reg:x3; val_offset:55692*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55692*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe38fffff; valaddr_reg:x3; val_offset:55695*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55695*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe39fffff; valaddr_reg:x3; val_offset:55698*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55698*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3bfffff; valaddr_reg:x3; val_offset:55701*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55701*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3c00000; valaddr_reg:x3; val_offset:55704*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55704*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3e00000; valaddr_reg:x3; val_offset:55707*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55707*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3f00000; valaddr_reg:x3; val_offset:55710*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55710*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3f80000; valaddr_reg:x3; val_offset:55713*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55713*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fc0000; valaddr_reg:x3; val_offset:55716*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55716*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fe0000; valaddr_reg:x3; val_offset:55719*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55719*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ff0000; valaddr_reg:x3; val_offset:55722*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55722*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ff8000; valaddr_reg:x3; val_offset:55725*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55725*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffc000; valaddr_reg:x3; val_offset:55728*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55728*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffe000; valaddr_reg:x3; val_offset:55731*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55731*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fff000; valaddr_reg:x3; val_offset:55734*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55734*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fff800; valaddr_reg:x3; val_offset:55737*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55737*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffc00; valaddr_reg:x3; val_offset:55740*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55740*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffe00; valaddr_reg:x3; val_offset:55743*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55743*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffff00; valaddr_reg:x3; val_offset:55746*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55746*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffff80; valaddr_reg:x3; val_offset:55749*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55749*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffffc0; valaddr_reg:x3; val_offset:55752*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55752*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffffe0; valaddr_reg:x3; val_offset:55755*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55755*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffff0; valaddr_reg:x3; val_offset:55758*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55758*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffff8; valaddr_reg:x3; val_offset:55761*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55761*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffffc; valaddr_reg:x3; val_offset:55764*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55764*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3fffffe; valaddr_reg:x3; val_offset:55767*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55767*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xc7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xe3ffffff; valaddr_reg:x3; val_offset:55770*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55770*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff000001; valaddr_reg:x3; val_offset:55773*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55773*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff000003; valaddr_reg:x3; val_offset:55776*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55776*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff000007; valaddr_reg:x3; val_offset:55779*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55779*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff199999; valaddr_reg:x3; val_offset:55782*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55782*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff249249; valaddr_reg:x3; val_offset:55785*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55785*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff333333; valaddr_reg:x3; val_offset:55788*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55788*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:55791*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55791*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:55794*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55794*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff444444; valaddr_reg:x3; val_offset:55797*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55797*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:55800*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55800*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:55803*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55803*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff666666; valaddr_reg:x3; val_offset:55806*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55806*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:55809*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55809*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:55812*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55812*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:55815*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55815*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a3d9c and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2ff1c2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba3d9c; op2val:0xc02ff1c2;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:55818*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55818*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:55821*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55821*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:55824*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55824*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:55827*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55827*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:55830*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55830*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:55833*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55833*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:55836*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55836*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:55839*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55839*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:55842*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55842*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:55845*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55845*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:55848*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55848*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:55851*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55851*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:55854*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55854*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:55857*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55857*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:55860*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55860*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:55863*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55863*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:55866*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55866*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:55869*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55869*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:55872*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55872*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:55875*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55875*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:55878*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55878*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:55881*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55881*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:55884*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55884*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:55887*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55887*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:55890*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55890*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:55893*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55893*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:55896*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55896*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:55899*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55899*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:55902*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55902*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:55905*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55905*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:55908*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55908*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:55911*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55911*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:55914*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55914*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:55917*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55917*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:55920*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55920*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:55923*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55923*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:55926*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55926*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:55929*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55929*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:55932*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55932*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:55935*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55935*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:55938*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55938*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:55941*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55941*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:55944*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55944*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:55947*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55947*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:55950*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55950*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:55953*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55953*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:55956*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55956*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:55959*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55959*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x3; val_offset:55962*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55962*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x3; val_offset:55965*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55965*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x3; val_offset:55968*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55968*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x3; val_offset:55971*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55971*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x3; val_offset:55974*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55974*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x3; val_offset:55977*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55977*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x3; val_offset:55980*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55980*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x3; val_offset:55983*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55983*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x3; val_offset:55986*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55986*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x3; val_offset:55989*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55989*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x3; val_offset:55992*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55992*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x3; val_offset:55995*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55995*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x3; val_offset:55998*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55998*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x3; val_offset:56001*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56001*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c2749 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc2749; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x3; val_offset:56004*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56004*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5800000; valaddr_reg:x3; val_offset:56007*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56007*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5800001; valaddr_reg:x3; val_offset:56010*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56010*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5800003; valaddr_reg:x3; val_offset:56013*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56013*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5800007; valaddr_reg:x3; val_offset:56016*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56016*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf580000f; valaddr_reg:x3; val_offset:56019*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56019*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf580001f; valaddr_reg:x3; val_offset:56022*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56022*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf580003f; valaddr_reg:x3; val_offset:56025*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56025*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf580007f; valaddr_reg:x3; val_offset:56028*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56028*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf58000ff; valaddr_reg:x3; val_offset:56031*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56031*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf58001ff; valaddr_reg:x3; val_offset:56034*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56034*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf58003ff; valaddr_reg:x3; val_offset:56037*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56037*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf58007ff; valaddr_reg:x3; val_offset:56040*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56040*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5800fff; valaddr_reg:x3; val_offset:56043*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56043*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5801fff; valaddr_reg:x3; val_offset:56046*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56046*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5803fff; valaddr_reg:x3; val_offset:56049*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56049*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf5807fff; valaddr_reg:x3; val_offset:56052*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56052*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf580ffff; valaddr_reg:x3; val_offset:56055*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56055*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf581ffff; valaddr_reg:x3; val_offset:56058*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56058*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4401 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2e0d4a and fs3 == 1 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4401; op2val:0xc02e0d4a;
op3val:0xf583ffff; valaddr_reg:x3; val_offset:56061*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56061*0 + 3*145*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3816849407,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3816882175,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3816947711,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3817078783,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3817340927,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3817865215,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3818913791,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3821010943,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3821010944,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3823108096,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3824156672,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3824680960,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3824943104,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825074176,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825139712,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825172480,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825188864,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825197056,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825201152,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825203200,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825204224,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825204736,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825204992,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205120,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205184,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205216,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205232,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205240,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205244,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205246,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(3825205247,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2126134684,32,FLEN)
NAN_BOXED(3224367554,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100630528,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100646912,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100655104,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100659200,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100661248,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662272,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100662784,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663040,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663168,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663232,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663264,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663280,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663288,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663292,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663294,32,FLEN)
NAN_BOXED(2126260041,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663295,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806528,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806529,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806531,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806535,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806543,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806559,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806591,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806655,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118806783,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118807039,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118807551,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118808575,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118810623,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118814719,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118822911,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118839295,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118872063,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4118937599,32,FLEN)
NAN_BOXED(2126267393,32,FLEN)
NAN_BOXED(3224243530,32,FLEN)
NAN_BOXED(4119068671,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
