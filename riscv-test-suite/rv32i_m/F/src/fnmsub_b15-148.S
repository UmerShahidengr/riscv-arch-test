
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6ec00000; valaddr_reg:x3; val_offset:56448*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56448*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6ee00000; valaddr_reg:x3; val_offset:56451*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56451*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6ef00000; valaddr_reg:x3; val_offset:56454*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56454*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6ef80000; valaddr_reg:x3; val_offset:56457*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56457*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efc0000; valaddr_reg:x3; val_offset:56460*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56460*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efe0000; valaddr_reg:x3; val_offset:56463*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56463*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6eff0000; valaddr_reg:x3; val_offset:56466*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56466*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6eff8000; valaddr_reg:x3; val_offset:56469*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56469*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effc000; valaddr_reg:x3; val_offset:56472*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56472*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effe000; valaddr_reg:x3; val_offset:56475*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56475*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efff000; valaddr_reg:x3; val_offset:56478*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56478*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efff800; valaddr_reg:x3; val_offset:56481*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56481*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffc00; valaddr_reg:x3; val_offset:56484*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56484*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffe00; valaddr_reg:x3; val_offset:56487*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56487*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effff00; valaddr_reg:x3; val_offset:56490*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56490*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effff80; valaddr_reg:x3; val_offset:56493*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56493*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effffc0; valaddr_reg:x3; val_offset:56496*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56496*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effffe0; valaddr_reg:x3; val_offset:56499*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56499*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffff0; valaddr_reg:x3; val_offset:56502*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56502*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffff8; valaddr_reg:x3; val_offset:56505*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56505*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffffc; valaddr_reg:x3; val_offset:56508*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56508*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6efffffe; valaddr_reg:x3; val_offset:56511*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56511*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xdd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x6effffff; valaddr_reg:x3; val_offset:56514*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56514*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f000001; valaddr_reg:x3; val_offset:56517*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56517*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f000003; valaddr_reg:x3; val_offset:56520*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56520*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f000007; valaddr_reg:x3; val_offset:56523*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56523*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f199999; valaddr_reg:x3; val_offset:56526*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56526*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f249249; valaddr_reg:x3; val_offset:56529*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56529*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f333333; valaddr_reg:x3; val_offset:56532*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56532*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:56535*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56535*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:56538*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56538*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f444444; valaddr_reg:x3; val_offset:56541*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56541*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:56544*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56544*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:56547*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56547*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f666666; valaddr_reg:x3; val_offset:56550*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56550*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:56553*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56553*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:56556*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56556*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:56559*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56559*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f2962 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b6a44 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf2962; op2val:0x402b6a44;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:56562*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56562*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:56565*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56565*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:56568*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56568*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:56571*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56571*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:56574*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56574*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:56577*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56577*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:56580*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56580*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:56583*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56583*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:56586*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56586*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:56589*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56589*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:56592*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56592*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:56595*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56595*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:56598*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56598*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:56601*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56601*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:56604*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56604*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:56607*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56607*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:56610*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56610*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4000000; valaddr_reg:x3; val_offset:56613*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56613*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4000001; valaddr_reg:x3; val_offset:56616*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56616*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4000003; valaddr_reg:x3; val_offset:56619*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56619*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4000007; valaddr_reg:x3; val_offset:56622*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56622*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x400000f; valaddr_reg:x3; val_offset:56625*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56625*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x400001f; valaddr_reg:x3; val_offset:56628*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56628*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x400003f; valaddr_reg:x3; val_offset:56631*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56631*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x400007f; valaddr_reg:x3; val_offset:56634*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56634*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x40000ff; valaddr_reg:x3; val_offset:56637*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56637*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x40001ff; valaddr_reg:x3; val_offset:56640*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56640*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x40003ff; valaddr_reg:x3; val_offset:56643*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56643*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x40007ff; valaddr_reg:x3; val_offset:56646*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56646*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4000fff; valaddr_reg:x3; val_offset:56649*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56649*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4001fff; valaddr_reg:x3; val_offset:56652*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56652*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4003fff; valaddr_reg:x3; val_offset:56655*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56655*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4007fff; valaddr_reg:x3; val_offset:56658*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56658*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x400ffff; valaddr_reg:x3; val_offset:56661*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56661*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x401ffff; valaddr_reg:x3; val_offset:56664*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56664*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x403ffff; valaddr_reg:x3; val_offset:56667*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56667*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x407ffff; valaddr_reg:x3; val_offset:56670*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56670*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x40fffff; valaddr_reg:x3; val_offset:56673*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56673*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x41fffff; valaddr_reg:x3; val_offset:56676*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56676*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x43fffff; valaddr_reg:x3; val_offset:56679*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56679*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4400000; valaddr_reg:x3; val_offset:56682*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56682*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4600000; valaddr_reg:x3; val_offset:56685*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56685*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4700000; valaddr_reg:x3; val_offset:56688*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56688*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x4780000; valaddr_reg:x3; val_offset:56691*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56691*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47c0000; valaddr_reg:x3; val_offset:56694*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56694*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47e0000; valaddr_reg:x3; val_offset:56697*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56697*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47f0000; valaddr_reg:x3; val_offset:56700*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56700*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47f8000; valaddr_reg:x3; val_offset:56703*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56703*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fc000; valaddr_reg:x3; val_offset:56706*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56706*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fe000; valaddr_reg:x3; val_offset:56709*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56709*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ff000; valaddr_reg:x3; val_offset:56712*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56712*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ff800; valaddr_reg:x3; val_offset:56715*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56715*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffc00; valaddr_reg:x3; val_offset:56718*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56718*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffe00; valaddr_reg:x3; val_offset:56721*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56721*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fff00; valaddr_reg:x3; val_offset:56724*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56724*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fff80; valaddr_reg:x3; val_offset:56727*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56727*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fffc0; valaddr_reg:x3; val_offset:56730*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56730*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fffe0; valaddr_reg:x3; val_offset:56733*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56733*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffff0; valaddr_reg:x3; val_offset:56736*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56736*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffff8; valaddr_reg:x3; val_offset:56739*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56739*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffffc; valaddr_reg:x3; val_offset:56742*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56742*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47ffffe; valaddr_reg:x3; val_offset:56745*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56745*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f374b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf374b; op2val:0x0;
op3val:0x47fffff; valaddr_reg:x3; val_offset:56748*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56748*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f800000; valaddr_reg:x3; val_offset:56751*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56751*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f800001; valaddr_reg:x3; val_offset:56754*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56754*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f800003; valaddr_reg:x3; val_offset:56757*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56757*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f800007; valaddr_reg:x3; val_offset:56760*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56760*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f80000f; valaddr_reg:x3; val_offset:56763*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56763*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f80001f; valaddr_reg:x3; val_offset:56766*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56766*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f80003f; valaddr_reg:x3; val_offset:56769*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56769*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f80007f; valaddr_reg:x3; val_offset:56772*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56772*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f8000ff; valaddr_reg:x3; val_offset:56775*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56775*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f8001ff; valaddr_reg:x3; val_offset:56778*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56778*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f8003ff; valaddr_reg:x3; val_offset:56781*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56781*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f8007ff; valaddr_reg:x3; val_offset:56784*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56784*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f800fff; valaddr_reg:x3; val_offset:56787*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56787*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f801fff; valaddr_reg:x3; val_offset:56790*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56790*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f803fff; valaddr_reg:x3; val_offset:56793*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56793*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f807fff; valaddr_reg:x3; val_offset:56796*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56796*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f80ffff; valaddr_reg:x3; val_offset:56799*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56799*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f81ffff; valaddr_reg:x3; val_offset:56802*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56802*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f83ffff; valaddr_reg:x3; val_offset:56805*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56805*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f87ffff; valaddr_reg:x3; val_offset:56808*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56808*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f8fffff; valaddr_reg:x3; val_offset:56811*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56811*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5f9fffff; valaddr_reg:x3; val_offset:56814*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56814*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5fbfffff; valaddr_reg:x3; val_offset:56817*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56817*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5fc00000; valaddr_reg:x3; val_offset:56820*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56820*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5fe00000; valaddr_reg:x3; val_offset:56823*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56823*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5ff00000; valaddr_reg:x3; val_offset:56826*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56826*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f3bf4 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x2b599f and fs3 == 0 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf3bf4; op2val:0x402b599f;
op3val:0x5ff80000; valaddr_reg:x3; val_offset:56829*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56829*0 + 3*147*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1858076672,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1860173824,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1861222400,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1861746688,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862008832,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862139904,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862205440,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862238208,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862254592,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862262784,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862266880,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862268928,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862269952,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270464,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270720,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270848,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270912,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270944,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270960,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270968,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270972,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270974,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(1862270975,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2126457186,32,FLEN)
NAN_BOXED(1076587076,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108865,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108867,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108871,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108879,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108895,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108927,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108991,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109119,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109375,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67109887,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67110911,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67112959,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67117055,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67125247,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67141631,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67174399,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67239935,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67371007,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67633151,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(68157439,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(69206015,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303167,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(71303168,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(73400320,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74448896,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(74973184,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75235328,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75366400,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75431936,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75464704,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75481088,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75489280,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75493376,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75495424,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496448,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75496960,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497216,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497344,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497408,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497440,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497456,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497464,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497468,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497470,32,FLEN)
NAN_BOXED(2126460747,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497471,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224128,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224129,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224131,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224135,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224143,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224159,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224191,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224255,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224383,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602224639,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602225151,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602226175,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602228223,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602232319,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602240511,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602256895,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602289663,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602355199,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602486271,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1602748415,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1603272703,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1604321279,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1606418431,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1606418432,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1608515584,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1609564160,32,FLEN)
NAN_BOXED(2126461940,32,FLEN)
NAN_BOXED(1076582815,32,FLEN)
NAN_BOXED(1610088448,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
