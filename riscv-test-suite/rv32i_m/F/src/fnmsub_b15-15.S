
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1792:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20800000; valaddr_reg:x3; val_offset:5376*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5376*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1793:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20800001; valaddr_reg:x3; val_offset:5379*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5379*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1794:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20800003; valaddr_reg:x3; val_offset:5382*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5382*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1795:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20800007; valaddr_reg:x3; val_offset:5385*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5385*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1796:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2080000f; valaddr_reg:x3; val_offset:5388*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5388*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1797:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2080001f; valaddr_reg:x3; val_offset:5391*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5391*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1798:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2080003f; valaddr_reg:x3; val_offset:5394*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5394*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1799:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2080007f; valaddr_reg:x3; val_offset:5397*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5397*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1800:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x208000ff; valaddr_reg:x3; val_offset:5400*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5400*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1801:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x208001ff; valaddr_reg:x3; val_offset:5403*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5403*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1802:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x208003ff; valaddr_reg:x3; val_offset:5406*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5406*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1803:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x208007ff; valaddr_reg:x3; val_offset:5409*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5409*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1804:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20800fff; valaddr_reg:x3; val_offset:5412*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5412*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1805:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20801fff; valaddr_reg:x3; val_offset:5415*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5415*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1806:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20803fff; valaddr_reg:x3; val_offset:5418*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5418*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1807:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20807fff; valaddr_reg:x3; val_offset:5421*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5421*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1808:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2080ffff; valaddr_reg:x3; val_offset:5424*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5424*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1809:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2081ffff; valaddr_reg:x3; val_offset:5427*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5427*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1810:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2083ffff; valaddr_reg:x3; val_offset:5430*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5430*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1811:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x2087ffff; valaddr_reg:x3; val_offset:5433*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5433*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1812:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x208fffff; valaddr_reg:x3; val_offset:5436*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5436*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1813:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x209fffff; valaddr_reg:x3; val_offset:5439*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5439*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1814:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20bfffff; valaddr_reg:x3; val_offset:5442*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5442*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1815:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20c00000; valaddr_reg:x3; val_offset:5445*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5445*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1816:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20e00000; valaddr_reg:x3; val_offset:5448*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5448*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1817:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20f00000; valaddr_reg:x3; val_offset:5451*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5451*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1818:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20f80000; valaddr_reg:x3; val_offset:5454*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5454*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1819:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fc0000; valaddr_reg:x3; val_offset:5457*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5457*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1820:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fe0000; valaddr_reg:x3; val_offset:5460*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5460*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1821:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ff0000; valaddr_reg:x3; val_offset:5463*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5463*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1822:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ff8000; valaddr_reg:x3; val_offset:5466*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5466*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1823:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffc000; valaddr_reg:x3; val_offset:5469*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5469*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1824:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffe000; valaddr_reg:x3; val_offset:5472*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5472*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1825:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fff000; valaddr_reg:x3; val_offset:5475*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5475*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1826:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fff800; valaddr_reg:x3; val_offset:5478*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5478*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1827:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffc00; valaddr_reg:x3; val_offset:5481*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5481*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1828:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffe00; valaddr_reg:x3; val_offset:5484*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5484*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1829:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffff00; valaddr_reg:x3; val_offset:5487*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5487*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1830:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffff80; valaddr_reg:x3; val_offset:5490*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5490*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1831:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffffc0; valaddr_reg:x3; val_offset:5493*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5493*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1832:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffffe0; valaddr_reg:x3; val_offset:5496*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5496*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1833:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffff0; valaddr_reg:x3; val_offset:5499*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5499*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1834:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffff8; valaddr_reg:x3; val_offset:5502*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5502*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1835:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffffc; valaddr_reg:x3; val_offset:5505*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5505*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1836:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20fffffe; valaddr_reg:x3; val_offset:5508*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5508*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1837:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x41 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x20ffffff; valaddr_reg:x3; val_offset:5511*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5511*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1838:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:5514*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5514*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1839:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:5517*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5517*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1840:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:5520*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5520*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1841:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:5523*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5523*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1842:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:5526*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5526*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1843:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:5529*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5529*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1844:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:5532*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5532*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1845:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:5535*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5535*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1846:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:5538*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5538*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1847:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:5541*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5541*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1848:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:5544*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5544*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1849:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:5547*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5547*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1850:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:5550*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5550*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1851:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:5553*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5553*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1852:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:5556*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5556*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1853:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a0e71 and fs2 == 0 and fe2 == 0x03 and fm2 == 0x6d5a2b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a0e71; op2val:0x1ed5a2b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:5559*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5559*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1854:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad000000; valaddr_reg:x3; val_offset:5562*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5562*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1855:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad000001; valaddr_reg:x3; val_offset:5565*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5565*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1856:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad000003; valaddr_reg:x3; val_offset:5568*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5568*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1857:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad000007; valaddr_reg:x3; val_offset:5571*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5571*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1858:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad00000f; valaddr_reg:x3; val_offset:5574*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5574*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1859:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad00001f; valaddr_reg:x3; val_offset:5577*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5577*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1860:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad00003f; valaddr_reg:x3; val_offset:5580*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5580*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1861:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad00007f; valaddr_reg:x3; val_offset:5583*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5583*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1862:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad0000ff; valaddr_reg:x3; val_offset:5586*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5586*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1863:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad0001ff; valaddr_reg:x3; val_offset:5589*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5589*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1864:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad0003ff; valaddr_reg:x3; val_offset:5592*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5592*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1865:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad0007ff; valaddr_reg:x3; val_offset:5595*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5595*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1866:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad000fff; valaddr_reg:x3; val_offset:5598*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5598*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1867:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad001fff; valaddr_reg:x3; val_offset:5601*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5601*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1868:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad003fff; valaddr_reg:x3; val_offset:5604*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5604*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1869:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad007fff; valaddr_reg:x3; val_offset:5607*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5607*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1870:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad00ffff; valaddr_reg:x3; val_offset:5610*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5610*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1871:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad01ffff; valaddr_reg:x3; val_offset:5613*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5613*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1872:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad03ffff; valaddr_reg:x3; val_offset:5616*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5616*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1873:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad07ffff; valaddr_reg:x3; val_offset:5619*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5619*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1874:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad0fffff; valaddr_reg:x3; val_offset:5622*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5622*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1875:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad1fffff; valaddr_reg:x3; val_offset:5625*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5625*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1876:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad3fffff; valaddr_reg:x3; val_offset:5628*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5628*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1877:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad400000; valaddr_reg:x3; val_offset:5631*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5631*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1878:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad600000; valaddr_reg:x3; val_offset:5634*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5634*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1879:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad700000; valaddr_reg:x3; val_offset:5637*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5637*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1880:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad780000; valaddr_reg:x3; val_offset:5640*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5640*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1881:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7c0000; valaddr_reg:x3; val_offset:5643*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5643*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1882:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7e0000; valaddr_reg:x3; val_offset:5646*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5646*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1883:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7f0000; valaddr_reg:x3; val_offset:5649*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5649*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1884:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7f8000; valaddr_reg:x3; val_offset:5652*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5652*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1885:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fc000; valaddr_reg:x3; val_offset:5655*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5655*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1886:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fe000; valaddr_reg:x3; val_offset:5658*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5658*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1887:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ff000; valaddr_reg:x3; val_offset:5661*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5661*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1888:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ff800; valaddr_reg:x3; val_offset:5664*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5664*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1889:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffc00; valaddr_reg:x3; val_offset:5667*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5667*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1890:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffe00; valaddr_reg:x3; val_offset:5670*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5670*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1891:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fff00; valaddr_reg:x3; val_offset:5673*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5673*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1892:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fff80; valaddr_reg:x3; val_offset:5676*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5676*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1893:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fffc0; valaddr_reg:x3; val_offset:5679*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5679*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1894:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fffe0; valaddr_reg:x3; val_offset:5682*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5682*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1895:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffff0; valaddr_reg:x3; val_offset:5685*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5685*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1896:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffff8; valaddr_reg:x3; val_offset:5688*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5688*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1897:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffffc; valaddr_reg:x3; val_offset:5691*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5691*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1898:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7ffffe; valaddr_reg:x3; val_offset:5694*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5694*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1899:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xad7fffff; valaddr_reg:x3; val_offset:5697*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5697*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1900:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbf800001; valaddr_reg:x3; val_offset:5700*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5700*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1901:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbf800003; valaddr_reg:x3; val_offset:5703*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5703*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1902:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbf800007; valaddr_reg:x3; val_offset:5706*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5706*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1903:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbf999999; valaddr_reg:x3; val_offset:5709*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5709*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1904:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:5712*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5712*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1905:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:5715*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5715*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1906:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:5718*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5718*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1907:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:5721*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5721*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1908:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:5724*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5724*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1909:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:5727*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5727*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1910:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:5730*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5730*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1911:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:5733*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5733*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1912:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:5736*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5736*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1913:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:5739*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5739*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1914:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:5742*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5742*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1915:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0a79d8 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x6ca215 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0a79d8; op2val:0x81eca215;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:5745*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5745*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1916:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd800000; valaddr_reg:x3; val_offset:5748*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5748*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1917:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd800001; valaddr_reg:x3; val_offset:5751*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5751*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1918:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd800003; valaddr_reg:x3; val_offset:5754*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5754*0 + 3*14*FLEN/8, x4, x1, x2)

inst_1919:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd800007; valaddr_reg:x3; val_offset:5757*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5757*0 + 3*14*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259520,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259521,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259523,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259527,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259535,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259551,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259583,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259647,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545259775,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545260031,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545260543,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545261567,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545263615,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545267711,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545275903,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545292287,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545325055,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545390591,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545521663,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(545783807,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(546308095,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(547356671,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(549453823,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(549453824,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(551550976,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(552599552,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553123840,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553385984,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553517056,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553582592,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553615360,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553631744,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553639936,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553644032,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553646080,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553647104,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553647616,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553647872,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648000,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648064,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648096,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648112,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648120,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648124,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648126,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(553648127,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2097811057,32,FLEN)
NAN_BOXED(32332331,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458368,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458369,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458371,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458375,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458383,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458399,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458431,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458495,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458623,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902458879,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902459391,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902460415,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902462463,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902466559,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902474751,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902491135,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902523903,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902589439,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902720511,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2902982655,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2903506943,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2904555519,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2906652671,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2906652672,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2908749824,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2909798400,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910322688,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910584832,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910715904,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910781440,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910814208,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910830592,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910838784,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910842880,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910844928,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910845952,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846464,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846720,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846848,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846912,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846944,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846960,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846968,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846972,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846974,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(2910846975,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2097838552,32,FLEN)
NAN_BOXED(2179768853,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282432,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282433,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282435,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282439,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
