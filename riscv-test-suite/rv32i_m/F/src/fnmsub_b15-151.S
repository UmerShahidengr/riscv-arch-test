
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:57600*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57600*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:57603*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57603*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:57606*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57606*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:57609*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57609*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:57612*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57612*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:57615*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57615*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:57618*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57618*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:57621*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57621*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:57624*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57624*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:57627*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57627*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:57630*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57630*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:57633*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57633*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:57636*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57636*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:57639*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57639*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:57642*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57642*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:57645*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57645*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:57648*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57648*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:57651*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57651*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:57654*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57654*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:57657*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57657*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:57660*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57660*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:57663*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57663*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:57666*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57666*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:57669*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57669*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:57672*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57672*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:57675*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57675*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41cf2f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1cf2f; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:57678*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57678*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23000000; valaddr_reg:x3; val_offset:57681*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57681*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23000001; valaddr_reg:x3; val_offset:57684*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57684*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23000003; valaddr_reg:x3; val_offset:57687*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57687*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23000007; valaddr_reg:x3; val_offset:57690*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57690*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2300000f; valaddr_reg:x3; val_offset:57693*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57693*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2300001f; valaddr_reg:x3; val_offset:57696*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57696*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2300003f; valaddr_reg:x3; val_offset:57699*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57699*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2300007f; valaddr_reg:x3; val_offset:57702*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57702*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x230000ff; valaddr_reg:x3; val_offset:57705*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57705*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x230001ff; valaddr_reg:x3; val_offset:57708*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57708*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x230003ff; valaddr_reg:x3; val_offset:57711*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57711*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x230007ff; valaddr_reg:x3; val_offset:57714*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57714*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23000fff; valaddr_reg:x3; val_offset:57717*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57717*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23001fff; valaddr_reg:x3; val_offset:57720*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57720*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23003fff; valaddr_reg:x3; val_offset:57723*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57723*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23007fff; valaddr_reg:x3; val_offset:57726*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57726*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2300ffff; valaddr_reg:x3; val_offset:57729*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57729*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2301ffff; valaddr_reg:x3; val_offset:57732*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57732*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2303ffff; valaddr_reg:x3; val_offset:57735*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57735*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x2307ffff; valaddr_reg:x3; val_offset:57738*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57738*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x230fffff; valaddr_reg:x3; val_offset:57741*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57741*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x231fffff; valaddr_reg:x3; val_offset:57744*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57744*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x233fffff; valaddr_reg:x3; val_offset:57747*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57747*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23400000; valaddr_reg:x3; val_offset:57750*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57750*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23600000; valaddr_reg:x3; val_offset:57753*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57753*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23700000; valaddr_reg:x3; val_offset:57756*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57756*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x23780000; valaddr_reg:x3; val_offset:57759*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57759*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237c0000; valaddr_reg:x3; val_offset:57762*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57762*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237e0000; valaddr_reg:x3; val_offset:57765*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57765*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237f0000; valaddr_reg:x3; val_offset:57768*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57768*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237f8000; valaddr_reg:x3; val_offset:57771*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57771*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fc000; valaddr_reg:x3; val_offset:57774*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57774*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fe000; valaddr_reg:x3; val_offset:57777*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57777*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ff000; valaddr_reg:x3; val_offset:57780*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57780*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ff800; valaddr_reg:x3; val_offset:57783*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57783*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffc00; valaddr_reg:x3; val_offset:57786*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57786*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffe00; valaddr_reg:x3; val_offset:57789*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57789*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fff00; valaddr_reg:x3; val_offset:57792*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57792*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fff80; valaddr_reg:x3; val_offset:57795*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57795*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fffc0; valaddr_reg:x3; val_offset:57798*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57798*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fffe0; valaddr_reg:x3; val_offset:57801*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57801*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffff0; valaddr_reg:x3; val_offset:57804*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57804*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffff8; valaddr_reg:x3; val_offset:57807*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57807*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffffc; valaddr_reg:x3; val_offset:57810*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57810*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237ffffe; valaddr_reg:x3; val_offset:57813*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57813*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x237fffff; valaddr_reg:x3; val_offset:57816*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57816*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:57819*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57819*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:57822*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57822*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:57825*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57825*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:57828*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57828*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:57831*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57831*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:57834*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57834*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:57837*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57837*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:57840*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57840*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:57843*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57843*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:57846*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57846*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:57849*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57849*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:57852*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57852*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:57855*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57855*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:57858*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57858*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:57861*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57861*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4214d7 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x546b0d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec214d7; op2val:0x546b0d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:57864*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57864*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c800000; valaddr_reg:x3; val_offset:57867*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57867*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c800001; valaddr_reg:x3; val_offset:57870*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57870*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c800003; valaddr_reg:x3; val_offset:57873*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57873*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c800007; valaddr_reg:x3; val_offset:57876*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57876*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c80000f; valaddr_reg:x3; val_offset:57879*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57879*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c80001f; valaddr_reg:x3; val_offset:57882*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57882*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c80003f; valaddr_reg:x3; val_offset:57885*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57885*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c80007f; valaddr_reg:x3; val_offset:57888*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57888*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c8000ff; valaddr_reg:x3; val_offset:57891*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57891*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c8001ff; valaddr_reg:x3; val_offset:57894*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57894*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c8003ff; valaddr_reg:x3; val_offset:57897*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57897*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c8007ff; valaddr_reg:x3; val_offset:57900*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57900*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c800fff; valaddr_reg:x3; val_offset:57903*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57903*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c801fff; valaddr_reg:x3; val_offset:57906*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57906*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c803fff; valaddr_reg:x3; val_offset:57909*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57909*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c807fff; valaddr_reg:x3; val_offset:57912*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57912*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c80ffff; valaddr_reg:x3; val_offset:57915*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57915*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c81ffff; valaddr_reg:x3; val_offset:57918*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57918*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c83ffff; valaddr_reg:x3; val_offset:57921*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57921*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c87ffff; valaddr_reg:x3; val_offset:57924*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57924*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c8fffff; valaddr_reg:x3; val_offset:57927*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57927*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7c9fffff; valaddr_reg:x3; val_offset:57930*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57930*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cbfffff; valaddr_reg:x3; val_offset:57933*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57933*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cc00000; valaddr_reg:x3; val_offset:57936*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57936*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7ce00000; valaddr_reg:x3; val_offset:57939*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57939*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cf00000; valaddr_reg:x3; val_offset:57942*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57942*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cf80000; valaddr_reg:x3; val_offset:57945*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57945*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfc0000; valaddr_reg:x3; val_offset:57948*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57948*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfe0000; valaddr_reg:x3; val_offset:57951*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57951*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cff0000; valaddr_reg:x3; val_offset:57954*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57954*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cff8000; valaddr_reg:x3; val_offset:57957*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57957*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffc000; valaddr_reg:x3; val_offset:57960*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57960*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffe000; valaddr_reg:x3; val_offset:57963*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57963*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfff000; valaddr_reg:x3; val_offset:57966*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57966*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfff800; valaddr_reg:x3; val_offset:57969*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57969*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffc00; valaddr_reg:x3; val_offset:57972*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57972*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffe00; valaddr_reg:x3; val_offset:57975*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57975*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffff00; valaddr_reg:x3; val_offset:57978*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57978*0 + 3*150*FLEN/8, x4, x1, x2)

inst_19327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffff80; valaddr_reg:x3; val_offset:57981*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57981*0 + 3*150*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2126630703,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202560,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202561,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202563,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202567,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202575,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202591,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202623,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202687,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587202815,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587203071,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587203583,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587204607,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587206655,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587210751,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587218943,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587235327,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587268095,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587333631,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587464703,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(587726847,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(588251135,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(589299711,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(591396863,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(591396864,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(593494016,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(594542592,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595066880,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595329024,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595460096,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595525632,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595558400,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595574784,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595582976,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595587072,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595589120,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595590144,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595590656,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595590912,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591040,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591104,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591136,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591152,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591160,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591164,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591166,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(595591167,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126648535,32,FLEN)
NAN_BOXED(5532429,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763392,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763393,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763395,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763399,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763407,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763423,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763455,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763519,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763647,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088763903,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088764415,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088765439,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088767487,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088771583,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088779775,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088796159,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088828927,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2088894463,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2089025535,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2089287679,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2089811967,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2090860543,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2092957695,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2092957696,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2095054848,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2096103424,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2096627712,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2096889856,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097020928,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097086464,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097119232,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097135616,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097143808,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097147904,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097149952,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097150976,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151488,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151744,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151872,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
