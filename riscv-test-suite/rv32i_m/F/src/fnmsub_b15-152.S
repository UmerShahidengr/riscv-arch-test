
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffffc0; valaddr_reg:x3; val_offset:57984*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57984*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffffe0; valaddr_reg:x3; val_offset:57987*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57987*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffff0; valaddr_reg:x3; val_offset:57990*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57990*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffff8; valaddr_reg:x3; val_offset:57993*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57993*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffffc; valaddr_reg:x3; val_offset:57996*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57996*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cfffffe; valaddr_reg:x3; val_offset:57999*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57999*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xf9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7cffffff; valaddr_reg:x3; val_offset:58002*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58002*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f000001; valaddr_reg:x3; val_offset:58005*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58005*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f000003; valaddr_reg:x3; val_offset:58008*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58008*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f000007; valaddr_reg:x3; val_offset:58011*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58011*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f199999; valaddr_reg:x3; val_offset:58014*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58014*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f249249; valaddr_reg:x3; val_offset:58017*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58017*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f333333; valaddr_reg:x3; val_offset:58020*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58020*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:58023*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58023*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:58026*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58026*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f444444; valaddr_reg:x3; val_offset:58029*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58029*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:58032*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58032*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:58035*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58035*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f666666; valaddr_reg:x3; val_offset:58038*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58038*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:58041*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58041*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:58044*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58044*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:58047*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58047*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42494a and fs2 == 0 and fe2 == 0x80 and fm2 == 0x28a887 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2494a; op2val:0x4028a887;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:58050*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58050*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e800000; valaddr_reg:x3; val_offset:58053*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58053*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e800001; valaddr_reg:x3; val_offset:58056*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58056*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e800003; valaddr_reg:x3; val_offset:58059*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58059*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e800007; valaddr_reg:x3; val_offset:58062*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58062*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e80000f; valaddr_reg:x3; val_offset:58065*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58065*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e80001f; valaddr_reg:x3; val_offset:58068*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58068*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e80003f; valaddr_reg:x3; val_offset:58071*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58071*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e80007f; valaddr_reg:x3; val_offset:58074*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58074*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e8000ff; valaddr_reg:x3; val_offset:58077*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58077*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e8001ff; valaddr_reg:x3; val_offset:58080*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58080*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e8003ff; valaddr_reg:x3; val_offset:58083*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58083*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e8007ff; valaddr_reg:x3; val_offset:58086*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58086*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e800fff; valaddr_reg:x3; val_offset:58089*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58089*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e801fff; valaddr_reg:x3; val_offset:58092*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58092*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e803fff; valaddr_reg:x3; val_offset:58095*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58095*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e807fff; valaddr_reg:x3; val_offset:58098*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58098*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e80ffff; valaddr_reg:x3; val_offset:58101*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58101*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e81ffff; valaddr_reg:x3; val_offset:58104*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58104*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e83ffff; valaddr_reg:x3; val_offset:58107*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58107*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e87ffff; valaddr_reg:x3; val_offset:58110*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58110*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e8fffff; valaddr_reg:x3; val_offset:58113*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58113*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2e9fffff; valaddr_reg:x3; val_offset:58116*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58116*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2ebfffff; valaddr_reg:x3; val_offset:58119*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58119*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2ec00000; valaddr_reg:x3; val_offset:58122*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58122*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2ee00000; valaddr_reg:x3; val_offset:58125*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58125*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2ef00000; valaddr_reg:x3; val_offset:58128*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58128*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2ef80000; valaddr_reg:x3; val_offset:58131*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58131*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efc0000; valaddr_reg:x3; val_offset:58134*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58134*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efe0000; valaddr_reg:x3; val_offset:58137*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58137*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2eff0000; valaddr_reg:x3; val_offset:58140*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58140*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2eff8000; valaddr_reg:x3; val_offset:58143*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58143*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effc000; valaddr_reg:x3; val_offset:58146*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58146*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effe000; valaddr_reg:x3; val_offset:58149*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58149*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efff000; valaddr_reg:x3; val_offset:58152*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58152*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efff800; valaddr_reg:x3; val_offset:58155*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58155*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffc00; valaddr_reg:x3; val_offset:58158*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58158*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffe00; valaddr_reg:x3; val_offset:58161*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58161*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effff00; valaddr_reg:x3; val_offset:58164*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58164*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effff80; valaddr_reg:x3; val_offset:58167*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58167*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effffc0; valaddr_reg:x3; val_offset:58170*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58170*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effffe0; valaddr_reg:x3; val_offset:58173*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58173*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffff0; valaddr_reg:x3; val_offset:58176*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58176*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffff8; valaddr_reg:x3; val_offset:58179*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58179*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffffc; valaddr_reg:x3; val_offset:58182*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58182*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2efffffe; valaddr_reg:x3; val_offset:58185*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58185*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x5d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x2effffff; valaddr_reg:x3; val_offset:58188*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58188*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3f800001; valaddr_reg:x3; val_offset:58191*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58191*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3f800003; valaddr_reg:x3; val_offset:58194*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58194*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3f800007; valaddr_reg:x3; val_offset:58197*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58197*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3f999999; valaddr_reg:x3; val_offset:58200*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58200*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:58203*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58203*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:58206*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58206*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:58209*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58209*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:58212*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58212*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:58215*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58215*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:58218*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58218*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:58221*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58221*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:58224*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58224*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:58227*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58227*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:58230*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58230*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:58233*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58233*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42b2c3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x542695 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2b2c3; op2val:0x542695;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:58236*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58236*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:58239*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58239*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:58242*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58242*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:58245*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58245*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:58248*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58248*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:58251*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58251*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:58254*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58254*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:58257*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58257*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:58260*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58260*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:58263*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58263*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:58266*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58266*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:58269*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58269*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:58272*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58272*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:58275*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58275*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:58278*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58278*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:58281*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58281*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:58284*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58284*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:58287*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58287*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:58290*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58290*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:58293*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58293*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:58296*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58296*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:58299*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58299*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:58302*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58302*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:58305*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58305*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:58308*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58308*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:58311*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58311*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:58314*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58314*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:58317*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58317*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:58320*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58320*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:58323*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58323*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:58326*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58326*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:58329*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58329*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:58332*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58332*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:58335*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58335*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:58338*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58338*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:58341*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58341*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:58344*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58344*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:58347*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58347*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:58350*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58350*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:58353*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58353*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:58356*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58356*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:58359*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58359*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:58362*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58362*0 + 3*151*FLEN/8, x4, x1, x2)

inst_19455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:58365*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58365*0 + 3*151*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151936,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151968,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151984,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151992,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151996,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151998,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2097151999,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2126661962,32,FLEN)
NAN_BOXED(1076406407,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140544,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140545,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140547,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140551,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140559,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140575,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140607,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140671,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780140799,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780141055,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780141567,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780142591,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780144639,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780148735,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780156927,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780173311,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780206079,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780271615,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780402687,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(780664831,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(781189119,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(782237695,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(784334847,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(784334848,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(786432000,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(787480576,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788004864,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788267008,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788398080,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788463616,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788496384,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788512768,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788520960,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788525056,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788527104,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788528128,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788528640,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788528896,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529024,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529088,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529120,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529136,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529144,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529148,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529150,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(788529151,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2126688963,32,FLEN)
NAN_BOXED(5514901,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
