
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:58368*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58368*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:58371*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58371*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:58374*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58374*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:58377*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58377*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:58380*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58380*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:58383*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58383*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:58386*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58386*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:58389*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58389*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:58392*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58392*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:58395*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58395*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:58398*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58398*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:58401*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58401*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:58404*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58404*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:58407*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58407*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:58410*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58410*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:58413*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58413*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:58416*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58416*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:58419*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58419*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x42c803 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec2c803; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:58422*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58422*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:58425*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58425*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:58428*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58428*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:58431*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58431*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:58434*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58434*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:58437*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58437*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:58440*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58440*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:58443*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58443*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:58446*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58446*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:58449*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58449*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:58452*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58452*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:58455*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58455*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:58458*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58458*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:58461*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58461*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:58464*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58464*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:58467*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58467*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:58470*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58470*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85000000; valaddr_reg:x3; val_offset:58473*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58473*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:58476*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58476*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:58479*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58479*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:58482*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58482*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:58485*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58485*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:58488*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58488*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:58491*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58491*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:58494*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58494*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:58497*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58497*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:58500*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58500*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:58503*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58503*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:58506*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58506*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:58509*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58509*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:58512*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58512*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:58515*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58515*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:58518*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58518*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:58521*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58521*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:58524*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58524*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:58527*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58527*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:58530*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58530*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:58533*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58533*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:58536*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58536*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:58539*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58539*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:58542*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58542*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:58545*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58545*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:58548*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58548*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:58551*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58551*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:58554*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58554*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:58557*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58557*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:58560*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58560*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:58563*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58563*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:58566*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58566*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:58569*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58569*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:58572*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58572*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:58575*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58575*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:58578*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58578*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:58581*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58581*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:58584*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58584*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:58587*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58587*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:58590*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58590*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:58593*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58593*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:58596*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58596*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:58599*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58599*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:58602*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58602*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:58605*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58605*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x44595d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec4595d; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:58608*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58608*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:58611*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58611*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:58614*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58614*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:58617*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58617*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:58620*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58620*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:58623*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58623*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:58626*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58626*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:58629*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58629*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:58632*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58632*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:58635*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58635*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:58638*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58638*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:58641*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58641*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:58644*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58644*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:58647*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58647*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:58650*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58650*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:58653*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58653*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:58656*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58656*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8800000; valaddr_reg:x3; val_offset:58659*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58659*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8800001; valaddr_reg:x3; val_offset:58662*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58662*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8800003; valaddr_reg:x3; val_offset:58665*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58665*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8800007; valaddr_reg:x3; val_offset:58668*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58668*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x880000f; valaddr_reg:x3; val_offset:58671*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58671*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x880001f; valaddr_reg:x3; val_offset:58674*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58674*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x880003f; valaddr_reg:x3; val_offset:58677*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58677*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x880007f; valaddr_reg:x3; val_offset:58680*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58680*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x88000ff; valaddr_reg:x3; val_offset:58683*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58683*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x88001ff; valaddr_reg:x3; val_offset:58686*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58686*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x88003ff; valaddr_reg:x3; val_offset:58689*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58689*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x88007ff; valaddr_reg:x3; val_offset:58692*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58692*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8800fff; valaddr_reg:x3; val_offset:58695*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58695*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8801fff; valaddr_reg:x3; val_offset:58698*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58698*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8803fff; valaddr_reg:x3; val_offset:58701*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58701*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8807fff; valaddr_reg:x3; val_offset:58704*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58704*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x880ffff; valaddr_reg:x3; val_offset:58707*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58707*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x881ffff; valaddr_reg:x3; val_offset:58710*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58710*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x883ffff; valaddr_reg:x3; val_offset:58713*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58713*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x887ffff; valaddr_reg:x3; val_offset:58716*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58716*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x88fffff; valaddr_reg:x3; val_offset:58719*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58719*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x89fffff; valaddr_reg:x3; val_offset:58722*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58722*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8bfffff; valaddr_reg:x3; val_offset:58725*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58725*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8c00000; valaddr_reg:x3; val_offset:58728*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58728*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8e00000; valaddr_reg:x3; val_offset:58731*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58731*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8f00000; valaddr_reg:x3; val_offset:58734*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58734*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8f80000; valaddr_reg:x3; val_offset:58737*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58737*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8fc0000; valaddr_reg:x3; val_offset:58740*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58740*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8fe0000; valaddr_reg:x3; val_offset:58743*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58743*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8ff0000; valaddr_reg:x3; val_offset:58746*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58746*0 + 3*152*FLEN/8, x4, x1, x2)

inst_19583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x45ff56 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec5ff56; op2val:0x0;
op3val:0x8ff8000; valaddr_reg:x3; val_offset:58749*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 58749*0 + 3*152*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2126694403,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369728,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369729,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369731,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369735,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369743,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369759,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369791,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369855,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369983,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370239,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231370751,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231371775,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231373823,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231377919,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231386111,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231402495,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231435263,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231500799,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231631871,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231894015,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2232418303,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2233466879,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564031,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2235564032,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2237661184,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2238709760,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239234048,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239496192,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239627264,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239692800,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239725568,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239741952,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239750144,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239754240,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239756288,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757312,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239757824,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758080,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758208,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758272,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758304,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758320,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758328,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758332,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758334,32,FLEN)
NAN_BOXED(2126797149,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758335,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606336,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606337,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606339,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606343,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606351,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606367,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606399,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606463,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606591,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606847,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142607359,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142608383,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142610431,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142614527,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142622719,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142639103,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142671871,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142737407,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142868479,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143130623,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143654911,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(144703487,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800639,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800640,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(148897792,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(149946368,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150470656,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150732800,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150863872,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150929408,32,FLEN)
NAN_BOXED(2126905174,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150962176,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
