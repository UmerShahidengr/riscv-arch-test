
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_19712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:59136*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59136*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:59139*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59139*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:59142*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59142*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:59145*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59145*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:59148*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59148*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:59151*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59151*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:59154*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59154*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:59157*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59157*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:59160*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59160*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:59163*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59163*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x47b540 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x520a2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec7b540; op2val:0x520a2e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:59166*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59166*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31800000; valaddr_reg:x3; val_offset:59169*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59169*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31800001; valaddr_reg:x3; val_offset:59172*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59172*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31800003; valaddr_reg:x3; val_offset:59175*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59175*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31800007; valaddr_reg:x3; val_offset:59178*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59178*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3180000f; valaddr_reg:x3; val_offset:59181*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59181*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3180001f; valaddr_reg:x3; val_offset:59184*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59184*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3180003f; valaddr_reg:x3; val_offset:59187*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59187*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3180007f; valaddr_reg:x3; val_offset:59190*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59190*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x318000ff; valaddr_reg:x3; val_offset:59193*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59193*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x318001ff; valaddr_reg:x3; val_offset:59196*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59196*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x318003ff; valaddr_reg:x3; val_offset:59199*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59199*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x318007ff; valaddr_reg:x3; val_offset:59202*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59202*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31800fff; valaddr_reg:x3; val_offset:59205*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59205*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31801fff; valaddr_reg:x3; val_offset:59208*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59208*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31803fff; valaddr_reg:x3; val_offset:59211*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59211*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31807fff; valaddr_reg:x3; val_offset:59214*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59214*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3180ffff; valaddr_reg:x3; val_offset:59217*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59217*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3181ffff; valaddr_reg:x3; val_offset:59220*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59220*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3183ffff; valaddr_reg:x3; val_offset:59223*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59223*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3187ffff; valaddr_reg:x3; val_offset:59226*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59226*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x318fffff; valaddr_reg:x3; val_offset:59229*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59229*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x319fffff; valaddr_reg:x3; val_offset:59232*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59232*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31bfffff; valaddr_reg:x3; val_offset:59235*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59235*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31c00000; valaddr_reg:x3; val_offset:59238*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59238*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31e00000; valaddr_reg:x3; val_offset:59241*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59241*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31f00000; valaddr_reg:x3; val_offset:59244*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59244*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31f80000; valaddr_reg:x3; val_offset:59247*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59247*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fc0000; valaddr_reg:x3; val_offset:59250*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59250*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fe0000; valaddr_reg:x3; val_offset:59253*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59253*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ff0000; valaddr_reg:x3; val_offset:59256*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59256*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ff8000; valaddr_reg:x3; val_offset:59259*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59259*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffc000; valaddr_reg:x3; val_offset:59262*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59262*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffe000; valaddr_reg:x3; val_offset:59265*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59265*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fff000; valaddr_reg:x3; val_offset:59268*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59268*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fff800; valaddr_reg:x3; val_offset:59271*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59271*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffc00; valaddr_reg:x3; val_offset:59274*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59274*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffe00; valaddr_reg:x3; val_offset:59277*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59277*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffff00; valaddr_reg:x3; val_offset:59280*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59280*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffff80; valaddr_reg:x3; val_offset:59283*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59283*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffffc0; valaddr_reg:x3; val_offset:59286*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59286*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffffe0; valaddr_reg:x3; val_offset:59289*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59289*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffff0; valaddr_reg:x3; val_offset:59292*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59292*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffff8; valaddr_reg:x3; val_offset:59295*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59295*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffffc; valaddr_reg:x3; val_offset:59298*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59298*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31fffffe; valaddr_reg:x3; val_offset:59301*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59301*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x63 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x31ffffff; valaddr_reg:x3; val_offset:59304*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59304*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3f800001; valaddr_reg:x3; val_offset:59307*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59307*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3f800003; valaddr_reg:x3; val_offset:59310*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59310*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3f800007; valaddr_reg:x3; val_offset:59313*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59313*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3f999999; valaddr_reg:x3; val_offset:59316*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59316*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:59319*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59319*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:59322*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59322*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:59325*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59325*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:59328*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59328*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:59331*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59331*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:59334*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59334*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:59337*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59337*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:59340*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59340*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:59343*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59343*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:59346*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59346*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:59349*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59349*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x481ce5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x51dfb0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec81ce5; op2val:0x51dfb0;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:59352*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59352*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3000000; valaddr_reg:x3; val_offset:59355*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59355*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3000001; valaddr_reg:x3; val_offset:59358*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59358*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3000003; valaddr_reg:x3; val_offset:59361*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59361*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3000007; valaddr_reg:x3; val_offset:59364*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59364*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb300000f; valaddr_reg:x3; val_offset:59367*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59367*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb300001f; valaddr_reg:x3; val_offset:59370*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59370*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb300003f; valaddr_reg:x3; val_offset:59373*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59373*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb300007f; valaddr_reg:x3; val_offset:59376*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59376*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb30000ff; valaddr_reg:x3; val_offset:59379*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59379*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb30001ff; valaddr_reg:x3; val_offset:59382*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59382*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb30003ff; valaddr_reg:x3; val_offset:59385*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59385*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb30007ff; valaddr_reg:x3; val_offset:59388*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59388*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3000fff; valaddr_reg:x3; val_offset:59391*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59391*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3001fff; valaddr_reg:x3; val_offset:59394*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59394*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3003fff; valaddr_reg:x3; val_offset:59397*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59397*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3007fff; valaddr_reg:x3; val_offset:59400*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59400*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb300ffff; valaddr_reg:x3; val_offset:59403*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59403*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb301ffff; valaddr_reg:x3; val_offset:59406*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59406*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb303ffff; valaddr_reg:x3; val_offset:59409*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59409*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb307ffff; valaddr_reg:x3; val_offset:59412*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59412*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb30fffff; valaddr_reg:x3; val_offset:59415*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59415*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb31fffff; valaddr_reg:x3; val_offset:59418*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59418*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb33fffff; valaddr_reg:x3; val_offset:59421*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59421*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3400000; valaddr_reg:x3; val_offset:59424*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59424*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3600000; valaddr_reg:x3; val_offset:59427*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59427*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3700000; valaddr_reg:x3; val_offset:59430*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59430*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb3780000; valaddr_reg:x3; val_offset:59433*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59433*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37c0000; valaddr_reg:x3; val_offset:59436*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59436*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37e0000; valaddr_reg:x3; val_offset:59439*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59439*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37f0000; valaddr_reg:x3; val_offset:59442*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59442*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37f8000; valaddr_reg:x3; val_offset:59445*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59445*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fc000; valaddr_reg:x3; val_offset:59448*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59448*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fe000; valaddr_reg:x3; val_offset:59451*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59451*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ff000; valaddr_reg:x3; val_offset:59454*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59454*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ff800; valaddr_reg:x3; val_offset:59457*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59457*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffc00; valaddr_reg:x3; val_offset:59460*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59460*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffe00; valaddr_reg:x3; val_offset:59463*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59463*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fff00; valaddr_reg:x3; val_offset:59466*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59466*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fff80; valaddr_reg:x3; val_offset:59469*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59469*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fffc0; valaddr_reg:x3; val_offset:59472*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59472*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fffe0; valaddr_reg:x3; val_offset:59475*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59475*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffff0; valaddr_reg:x3; val_offset:59478*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59478*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffff8; valaddr_reg:x3; val_offset:59481*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59481*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffffc; valaddr_reg:x3; val_offset:59484*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59484*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37ffffe; valaddr_reg:x3; val_offset:59487*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59487*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x66 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xb37fffff; valaddr_reg:x3; val_offset:59490*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59490*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbf800001; valaddr_reg:x3; val_offset:59493*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59493*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbf800003; valaddr_reg:x3; val_offset:59496*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59496*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbf800007; valaddr_reg:x3; val_offset:59499*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59499*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbf999999; valaddr_reg:x3; val_offset:59502*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59502*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:59505*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59505*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:59508*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59508*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:59511*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59511*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:59514*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59514*0 + 3*154*FLEN/8, x4, x1, x2)

inst_19839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x499612 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x514680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec99612; op2val:0x80514680;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:59517*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 59517*0 + 3*154*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127017280,32,FLEN)
NAN_BOXED(5376558,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472192,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472193,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472195,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472199,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472207,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472223,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472255,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472319,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472447,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830472703,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830473215,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830474239,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830476287,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830480383,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830488575,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830504959,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830537727,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830603263,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830734335,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(830996479,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(831520767,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(832569343,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(834666495,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(834666496,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(836763648,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(837812224,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838336512,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838598656,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838729728,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838795264,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838828032,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838844416,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838852608,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838856704,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838858752,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838859776,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860288,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860544,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860672,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860736,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860768,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860784,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860792,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860796,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860798,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(838860799,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127043813,32,FLEN)
NAN_BOXED(5365680,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121664,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121665,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121667,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121671,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121679,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121695,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121727,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121791,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003121919,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003122175,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003122687,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003123711,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003125759,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003129855,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003138047,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003154431,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003187199,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003252735,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003383807,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3003645951,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3004170239,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3005218815,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3007315967,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3007315968,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3009413120,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3010461696,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3010985984,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011248128,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011379200,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011444736,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011477504,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011493888,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011502080,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011506176,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011508224,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011509248,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011509760,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510016,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510144,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510208,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510240,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510256,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510264,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510268,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510270,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3011510271,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127140370,32,FLEN)
NAN_BOXED(2152810112,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
