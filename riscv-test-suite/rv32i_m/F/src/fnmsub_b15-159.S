
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed80001f; valaddr_reg:x3; val_offset:60672*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60672*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed80003f; valaddr_reg:x3; val_offset:60675*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60675*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed80007f; valaddr_reg:x3; val_offset:60678*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60678*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed8000ff; valaddr_reg:x3; val_offset:60681*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60681*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed8001ff; valaddr_reg:x3; val_offset:60684*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60684*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed8003ff; valaddr_reg:x3; val_offset:60687*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60687*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed8007ff; valaddr_reg:x3; val_offset:60690*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60690*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed800fff; valaddr_reg:x3; val_offset:60693*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60693*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed801fff; valaddr_reg:x3; val_offset:60696*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60696*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed803fff; valaddr_reg:x3; val_offset:60699*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60699*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed807fff; valaddr_reg:x3; val_offset:60702*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60702*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed80ffff; valaddr_reg:x3; val_offset:60705*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60705*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed81ffff; valaddr_reg:x3; val_offset:60708*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60708*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed83ffff; valaddr_reg:x3; val_offset:60711*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60711*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed87ffff; valaddr_reg:x3; val_offset:60714*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60714*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed8fffff; valaddr_reg:x3; val_offset:60717*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60717*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xed9fffff; valaddr_reg:x3; val_offset:60720*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60720*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedbfffff; valaddr_reg:x3; val_offset:60723*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60723*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedc00000; valaddr_reg:x3; val_offset:60726*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60726*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xede00000; valaddr_reg:x3; val_offset:60729*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60729*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedf00000; valaddr_reg:x3; val_offset:60732*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60732*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedf80000; valaddr_reg:x3; val_offset:60735*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60735*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfc0000; valaddr_reg:x3; val_offset:60738*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60738*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfe0000; valaddr_reg:x3; val_offset:60741*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60741*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedff0000; valaddr_reg:x3; val_offset:60744*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60744*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedff8000; valaddr_reg:x3; val_offset:60747*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60747*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffc000; valaddr_reg:x3; val_offset:60750*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60750*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffe000; valaddr_reg:x3; val_offset:60753*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60753*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfff000; valaddr_reg:x3; val_offset:60756*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60756*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfff800; valaddr_reg:x3; val_offset:60759*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60759*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffc00; valaddr_reg:x3; val_offset:60762*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60762*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffe00; valaddr_reg:x3; val_offset:60765*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60765*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffff00; valaddr_reg:x3; val_offset:60768*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60768*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffff80; valaddr_reg:x3; val_offset:60771*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60771*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffffc0; valaddr_reg:x3; val_offset:60774*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60774*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffffe0; valaddr_reg:x3; val_offset:60777*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60777*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffff0; valaddr_reg:x3; val_offset:60780*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60780*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffff8; valaddr_reg:x3; val_offset:60783*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60783*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffffc; valaddr_reg:x3; val_offset:60786*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60786*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedfffffe; valaddr_reg:x3; val_offset:60789*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60789*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xdb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xedffffff; valaddr_reg:x3; val_offset:60792*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60792*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff000001; valaddr_reg:x3; val_offset:60795*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60795*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff000003; valaddr_reg:x3; val_offset:60798*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60798*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff000007; valaddr_reg:x3; val_offset:60801*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60801*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff199999; valaddr_reg:x3; val_offset:60804*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60804*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff249249; valaddr_reg:x3; val_offset:60807*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60807*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff333333; valaddr_reg:x3; val_offset:60810*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60810*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:60813*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60813*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:60816*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60816*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff444444; valaddr_reg:x3; val_offset:60819*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60819*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:60822*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60822*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:60825*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60825*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff666666; valaddr_reg:x3; val_offset:60828*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60828*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:60831*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60831*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:60834*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60834*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:60837*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60837*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b435e and fs2 == 1 and fe2 == 0x80 and fm2 == 0x2135b0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb435e; op2val:0xc02135b0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:60840*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60840*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:60843*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60843*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:60846*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60846*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:60849*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60849*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:60852*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60852*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:60855*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60855*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:60858*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60858*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:60861*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60861*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:60864*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60864*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:60867*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60867*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:60870*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60870*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:60873*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60873*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:60876*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60876*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:60879*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60879*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:60882*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60882*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:60885*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60885*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:60888*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60888*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c000000; valaddr_reg:x3; val_offset:60891*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60891*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c000001; valaddr_reg:x3; val_offset:60894*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60894*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c000003; valaddr_reg:x3; val_offset:60897*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60897*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c000007; valaddr_reg:x3; val_offset:60900*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60900*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c00000f; valaddr_reg:x3; val_offset:60903*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60903*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c00001f; valaddr_reg:x3; val_offset:60906*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60906*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c00003f; valaddr_reg:x3; val_offset:60909*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60909*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c00007f; valaddr_reg:x3; val_offset:60912*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60912*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c0000ff; valaddr_reg:x3; val_offset:60915*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60915*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c0001ff; valaddr_reg:x3; val_offset:60918*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60918*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c0003ff; valaddr_reg:x3; val_offset:60921*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60921*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c0007ff; valaddr_reg:x3; val_offset:60924*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60924*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c000fff; valaddr_reg:x3; val_offset:60927*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60927*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c001fff; valaddr_reg:x3; val_offset:60930*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60930*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c003fff; valaddr_reg:x3; val_offset:60933*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60933*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c007fff; valaddr_reg:x3; val_offset:60936*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60936*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c00ffff; valaddr_reg:x3; val_offset:60939*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60939*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c01ffff; valaddr_reg:x3; val_offset:60942*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60942*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c03ffff; valaddr_reg:x3; val_offset:60945*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60945*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c07ffff; valaddr_reg:x3; val_offset:60948*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60948*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c0fffff; valaddr_reg:x3; val_offset:60951*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60951*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c1fffff; valaddr_reg:x3; val_offset:60954*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60954*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c3fffff; valaddr_reg:x3; val_offset:60957*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60957*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c400000; valaddr_reg:x3; val_offset:60960*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60960*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c600000; valaddr_reg:x3; val_offset:60963*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60963*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c700000; valaddr_reg:x3; val_offset:60966*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60966*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c780000; valaddr_reg:x3; val_offset:60969*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60969*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7c0000; valaddr_reg:x3; val_offset:60972*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60972*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7e0000; valaddr_reg:x3; val_offset:60975*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60975*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7f0000; valaddr_reg:x3; val_offset:60978*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60978*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7f8000; valaddr_reg:x3; val_offset:60981*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60981*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fc000; valaddr_reg:x3; val_offset:60984*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60984*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fe000; valaddr_reg:x3; val_offset:60987*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60987*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ff000; valaddr_reg:x3; val_offset:60990*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60990*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ff800; valaddr_reg:x3; val_offset:60993*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60993*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffc00; valaddr_reg:x3; val_offset:60996*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60996*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffe00; valaddr_reg:x3; val_offset:60999*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 60999*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fff00; valaddr_reg:x3; val_offset:61002*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61002*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fff80; valaddr_reg:x3; val_offset:61005*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61005*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fffc0; valaddr_reg:x3; val_offset:61008*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61008*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fffe0; valaddr_reg:x3; val_offset:61011*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61011*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffff0; valaddr_reg:x3; val_offset:61014*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61014*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffff8; valaddr_reg:x3; val_offset:61017*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61017*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffffc; valaddr_reg:x3; val_offset:61020*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61020*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7ffffe; valaddr_reg:x3; val_offset:61023*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61023*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b6083 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x508f4b and fs3 == 0 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb6083; op2val:0x508f4b;
op3val:0x4c7fffff; valaddr_reg:x3; val_offset:61026*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61026*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:61029*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61029*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:61032*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61032*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:61035*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61035*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:61038*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61038*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:61041*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61041*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:61044*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61044*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:61047*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61047*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:61050*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61050*0 + 3*158*FLEN/8, x4, x1, x2)

inst_20351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4b96c5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecb96c5; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:61053*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61053*0 + 3*158*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984588831,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984588863,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984588927,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984589055,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984589311,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984589823,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984590847,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984592895,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984596991,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984605183,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984621567,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984654335,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984719871,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3984850943,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3985113087,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3985637375,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3986685951,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3988783103,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3988783104,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3990880256,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3991928832,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992453120,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992715264,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992846336,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992911872,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992944640,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992961024,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992969216,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992973312,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992975360,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992976384,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992976896,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977152,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977280,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977344,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977376,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977392,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977400,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977404,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977406,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(3992977407,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127250270,32,FLEN)
NAN_BOXED(3223401904,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068416,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068417,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068419,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068423,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068431,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068447,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068479,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068543,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068671,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275068927,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275069439,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275070463,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275072511,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275076607,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275084799,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275101183,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275133951,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275199487,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275330559,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1275592703,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1276116991,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1277165567,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1279262719,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1279262720,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1281359872,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1282408448,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1282932736,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283194880,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283325952,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283391488,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283424256,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283440640,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283448832,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283452928,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283454976,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456000,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456512,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456768,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456896,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456960,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283456992,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283457008,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283457016,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283457020,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283457022,32,FLEN)
NAN_BOXED(2127257731,32,FLEN)
NAN_BOXED(5279563,32,FLEN)
NAN_BOXED(1283457023,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127271621,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
