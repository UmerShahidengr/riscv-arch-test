
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_1920:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd80000f; valaddr_reg:x3; val_offset:5760*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5760*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1921:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd80001f; valaddr_reg:x3; val_offset:5763*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5763*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1922:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd80003f; valaddr_reg:x3; val_offset:5766*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5766*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1923:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd80007f; valaddr_reg:x3; val_offset:5769*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5769*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1924:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd8000ff; valaddr_reg:x3; val_offset:5772*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5772*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1925:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd8001ff; valaddr_reg:x3; val_offset:5775*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5775*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1926:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd8003ff; valaddr_reg:x3; val_offset:5778*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5778*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1927:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd8007ff; valaddr_reg:x3; val_offset:5781*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5781*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1928:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd800fff; valaddr_reg:x3; val_offset:5784*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5784*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1929:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd801fff; valaddr_reg:x3; val_offset:5787*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5787*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1930:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd803fff; valaddr_reg:x3; val_offset:5790*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5790*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1931:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd807fff; valaddr_reg:x3; val_offset:5793*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5793*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1932:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd80ffff; valaddr_reg:x3; val_offset:5796*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5796*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1933:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd81ffff; valaddr_reg:x3; val_offset:5799*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5799*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1934:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd83ffff; valaddr_reg:x3; val_offset:5802*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5802*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1935:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd87ffff; valaddr_reg:x3; val_offset:5805*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5805*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1936:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd8fffff; valaddr_reg:x3; val_offset:5808*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5808*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1937:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbd9fffff; valaddr_reg:x3; val_offset:5811*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5811*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1938:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdbfffff; valaddr_reg:x3; val_offset:5814*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5814*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1939:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdc00000; valaddr_reg:x3; val_offset:5817*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5817*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1940:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbde00000; valaddr_reg:x3; val_offset:5820*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5820*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1941:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdf00000; valaddr_reg:x3; val_offset:5823*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5823*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1942:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdf80000; valaddr_reg:x3; val_offset:5826*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5826*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1943:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfc0000; valaddr_reg:x3; val_offset:5829*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5829*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1944:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfe0000; valaddr_reg:x3; val_offset:5832*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5832*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1945:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdff0000; valaddr_reg:x3; val_offset:5835*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5835*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1946:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdff8000; valaddr_reg:x3; val_offset:5838*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5838*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1947:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffc000; valaddr_reg:x3; val_offset:5841*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5841*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1948:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffe000; valaddr_reg:x3; val_offset:5844*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5844*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1949:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfff000; valaddr_reg:x3; val_offset:5847*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5847*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1950:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfff800; valaddr_reg:x3; val_offset:5850*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5850*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1951:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffc00; valaddr_reg:x3; val_offset:5853*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5853*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1952:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffe00; valaddr_reg:x3; val_offset:5856*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5856*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1953:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffff00; valaddr_reg:x3; val_offset:5859*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5859*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1954:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffff80; valaddr_reg:x3; val_offset:5862*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5862*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1955:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffffc0; valaddr_reg:x3; val_offset:5865*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5865*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1956:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffffe0; valaddr_reg:x3; val_offset:5868*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5868*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1957:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffff0; valaddr_reg:x3; val_offset:5871*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5871*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1958:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffff8; valaddr_reg:x3; val_offset:5874*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5874*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1959:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffffc; valaddr_reg:x3; val_offset:5877*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5877*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1960:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdfffffe; valaddr_reg:x3; val_offset:5880*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5880*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1961:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbdffffff; valaddr_reg:x3; val_offset:5883*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5883*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1962:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbf800001; valaddr_reg:x3; val_offset:5886*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5886*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1963:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbf800003; valaddr_reg:x3; val_offset:5889*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5889*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1964:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbf800007; valaddr_reg:x3; val_offset:5892*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5892*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1965:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbf999999; valaddr_reg:x3; val_offset:5895*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5895*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1966:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:5898*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5898*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1967:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:5901*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5901*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1968:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:5904*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5904*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1969:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:5907*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5907*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1970:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:5910*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5910*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1971:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:5913*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5913*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1972:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:5916*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5916*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1973:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:5919*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5919*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1974:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:5922*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5922*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1975:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:5925*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5925*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1976:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:5928*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5928*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1977:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x196401 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x559fdf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d196401; op2val:0x81d59fdf;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:5931*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5931*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1978:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8800000; valaddr_reg:x3; val_offset:5934*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5934*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1979:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8800001; valaddr_reg:x3; val_offset:5937*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5937*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1980:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8800003; valaddr_reg:x3; val_offset:5940*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5940*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1981:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8800007; valaddr_reg:x3; val_offset:5943*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5943*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1982:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf880000f; valaddr_reg:x3; val_offset:5946*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5946*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1983:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf880001f; valaddr_reg:x3; val_offset:5949*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5949*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1984:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf880003f; valaddr_reg:x3; val_offset:5952*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5952*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1985:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf880007f; valaddr_reg:x3; val_offset:5955*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5955*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1986:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf88000ff; valaddr_reg:x3; val_offset:5958*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5958*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1987:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf88001ff; valaddr_reg:x3; val_offset:5961*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5961*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1988:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf88003ff; valaddr_reg:x3; val_offset:5964*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5964*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1989:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf88007ff; valaddr_reg:x3; val_offset:5967*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5967*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1990:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8800fff; valaddr_reg:x3; val_offset:5970*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5970*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1991:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8801fff; valaddr_reg:x3; val_offset:5973*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5973*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1992:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8803fff; valaddr_reg:x3; val_offset:5976*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5976*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1993:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8807fff; valaddr_reg:x3; val_offset:5979*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5979*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1994:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf880ffff; valaddr_reg:x3; val_offset:5982*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5982*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1995:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf881ffff; valaddr_reg:x3; val_offset:5985*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5985*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1996:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf883ffff; valaddr_reg:x3; val_offset:5988*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5988*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1997:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf887ffff; valaddr_reg:x3; val_offset:5991*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5991*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1998:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf88fffff; valaddr_reg:x3; val_offset:5994*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5994*0 + 3*15*FLEN/8, x4, x1, x2)

inst_1999:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf89fffff; valaddr_reg:x3; val_offset:5997*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 5997*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2000:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8bfffff; valaddr_reg:x3; val_offset:6000*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6000*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2001:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8c00000; valaddr_reg:x3; val_offset:6003*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6003*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2002:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8e00000; valaddr_reg:x3; val_offset:6006*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6006*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2003:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8f00000; valaddr_reg:x3; val_offset:6009*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6009*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2004:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8f80000; valaddr_reg:x3; val_offset:6012*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6012*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2005:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fc0000; valaddr_reg:x3; val_offset:6015*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6015*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2006:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fe0000; valaddr_reg:x3; val_offset:6018*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6018*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2007:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ff0000; valaddr_reg:x3; val_offset:6021*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6021*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2008:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ff8000; valaddr_reg:x3; val_offset:6024*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6024*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2009:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffc000; valaddr_reg:x3; val_offset:6027*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6027*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2010:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffe000; valaddr_reg:x3; val_offset:6030*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6030*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2011:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fff000; valaddr_reg:x3; val_offset:6033*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6033*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2012:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fff800; valaddr_reg:x3; val_offset:6036*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6036*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2013:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffc00; valaddr_reg:x3; val_offset:6039*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6039*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2014:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffe00; valaddr_reg:x3; val_offset:6042*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6042*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2015:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffff00; valaddr_reg:x3; val_offset:6045*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6045*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2016:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffff80; valaddr_reg:x3; val_offset:6048*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6048*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2017:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffffc0; valaddr_reg:x3; val_offset:6051*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6051*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2018:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffffe0; valaddr_reg:x3; val_offset:6054*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6054*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2019:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffff0; valaddr_reg:x3; val_offset:6057*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6057*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2020:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffff8; valaddr_reg:x3; val_offset:6060*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6060*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2021:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffffc; valaddr_reg:x3; val_offset:6063*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6063*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2022:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8fffffe; valaddr_reg:x3; val_offset:6066*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6066*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2023:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xf1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xf8ffffff; valaddr_reg:x3; val_offset:6069*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6069*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2024:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff000001; valaddr_reg:x3; val_offset:6072*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6072*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2025:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff000003; valaddr_reg:x3; val_offset:6075*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6075*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2026:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff000007; valaddr_reg:x3; val_offset:6078*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6078*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2027:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff199999; valaddr_reg:x3; val_offset:6081*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6081*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2028:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff249249; valaddr_reg:x3; val_offset:6084*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6084*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2029:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff333333; valaddr_reg:x3; val_offset:6087*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6087*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2030:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:6090*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6090*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2031:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:6093*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6093*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2032:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff444444; valaddr_reg:x3; val_offset:6096*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6096*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2033:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:6099*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6099*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2034:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:6102*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6102*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2035:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff666666; valaddr_reg:x3; val_offset:6105*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6105*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2036:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:6108*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6108*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2037:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:6111*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6111*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2038:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:6114*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6114*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2039:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1d0754 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x50ace0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1d0754; op2val:0xc1d0ace0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:6117*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6117*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2040:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe800000; valaddr_reg:x3; val_offset:6120*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6120*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2041:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe800001; valaddr_reg:x3; val_offset:6123*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6123*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2042:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe800003; valaddr_reg:x3; val_offset:6126*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6126*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2043:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe800007; valaddr_reg:x3; val_offset:6129*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6129*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2044:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe80000f; valaddr_reg:x3; val_offset:6132*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6132*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2045:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe80001f; valaddr_reg:x3; val_offset:6135*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6135*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2046:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe80003f; valaddr_reg:x3; val_offset:6138*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6138*0 + 3*15*FLEN/8, x4, x1, x2)

inst_2047:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe80007f; valaddr_reg:x3; val_offset:6141*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6141*0 + 3*15*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282447,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282463,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282495,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282559,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282687,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179282943,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179283455,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179284479,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179286527,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179290623,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179298815,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179315199,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179347967,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179413503,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179544575,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3179806719,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3180331007,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3181379583,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3183476735,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3183476736,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3185573888,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3186622464,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187146752,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187408896,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187539968,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187605504,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187638272,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187654656,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187662848,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187666944,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187668992,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187670016,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187670528,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187670784,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187670912,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187670976,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671008,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671024,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671032,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671036,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671038,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3187671039,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2098816001,32,FLEN)
NAN_BOXED(2178260959,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138176,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138177,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138179,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138183,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138191,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138207,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138239,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138303,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138431,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169138687,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169139199,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169140223,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169142271,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169146367,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169154559,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169170943,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169203711,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169269247,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169400319,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4169662463,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4170186751,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4171235327,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4173332479,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4173332480,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4175429632,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4176478208,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177002496,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177264640,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177395712,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177461248,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177494016,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177510400,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177518592,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177522688,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177524736,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177525760,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526272,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526528,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526656,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526720,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526752,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526768,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526776,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526780,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526782,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4177526783,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2099054420,32,FLEN)
NAN_BOXED(3251678432,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801472,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801473,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801475,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801479,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801487,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801503,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801535,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801599,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
