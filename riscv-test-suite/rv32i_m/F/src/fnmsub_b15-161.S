
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8801fff; valaddr_reg:x3; val_offset:61440*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61440*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8803fff; valaddr_reg:x3; val_offset:61443*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61443*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8807fff; valaddr_reg:x3; val_offset:61446*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61446*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb880ffff; valaddr_reg:x3; val_offset:61449*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61449*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb881ffff; valaddr_reg:x3; val_offset:61452*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61452*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb883ffff; valaddr_reg:x3; val_offset:61455*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61455*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb887ffff; valaddr_reg:x3; val_offset:61458*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61458*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb88fffff; valaddr_reg:x3; val_offset:61461*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61461*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb89fffff; valaddr_reg:x3; val_offset:61464*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61464*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8bfffff; valaddr_reg:x3; val_offset:61467*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61467*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8c00000; valaddr_reg:x3; val_offset:61470*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61470*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8e00000; valaddr_reg:x3; val_offset:61473*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61473*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8f00000; valaddr_reg:x3; val_offset:61476*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61476*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8f80000; valaddr_reg:x3; val_offset:61479*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61479*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fc0000; valaddr_reg:x3; val_offset:61482*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61482*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fe0000; valaddr_reg:x3; val_offset:61485*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61485*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ff0000; valaddr_reg:x3; val_offset:61488*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61488*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ff8000; valaddr_reg:x3; val_offset:61491*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61491*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffc000; valaddr_reg:x3; val_offset:61494*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61494*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffe000; valaddr_reg:x3; val_offset:61497*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61497*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fff000; valaddr_reg:x3; val_offset:61500*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61500*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fff800; valaddr_reg:x3; val_offset:61503*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61503*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffc00; valaddr_reg:x3; val_offset:61506*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61506*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffe00; valaddr_reg:x3; val_offset:61509*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61509*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffff00; valaddr_reg:x3; val_offset:61512*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61512*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffff80; valaddr_reg:x3; val_offset:61515*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61515*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffffc0; valaddr_reg:x3; val_offset:61518*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61518*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffffe0; valaddr_reg:x3; val_offset:61521*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61521*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffff0; valaddr_reg:x3; val_offset:61524*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61524*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffff8; valaddr_reg:x3; val_offset:61527*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61527*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffffc; valaddr_reg:x3; val_offset:61530*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61530*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8fffffe; valaddr_reg:x3; val_offset:61533*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61533*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x71 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xb8ffffff; valaddr_reg:x3; val_offset:61536*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61536*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbf800001; valaddr_reg:x3; val_offset:61539*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61539*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbf800003; valaddr_reg:x3; val_offset:61542*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61542*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbf800007; valaddr_reg:x3; val_offset:61545*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61545*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbf999999; valaddr_reg:x3; val_offset:61548*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61548*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:61551*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61551*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:61554*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61554*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:61557*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61557*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:61560*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61560*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:61563*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61563*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:61566*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61566*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:61569*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61569*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:61572*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61572*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:61575*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61575*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:61578*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61578*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:61581*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61581*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4d4cf5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4fce0f and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ecd4cf5; op2val:0x804fce0f;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:61584*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61584*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7800000; valaddr_reg:x3; val_offset:61587*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61587*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7800001; valaddr_reg:x3; val_offset:61590*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61590*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7800003; valaddr_reg:x3; val_offset:61593*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61593*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7800007; valaddr_reg:x3; val_offset:61596*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61596*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe780000f; valaddr_reg:x3; val_offset:61599*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61599*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe780001f; valaddr_reg:x3; val_offset:61602*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61602*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe780003f; valaddr_reg:x3; val_offset:61605*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61605*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe780007f; valaddr_reg:x3; val_offset:61608*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61608*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe78000ff; valaddr_reg:x3; val_offset:61611*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61611*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe78001ff; valaddr_reg:x3; val_offset:61614*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61614*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe78003ff; valaddr_reg:x3; val_offset:61617*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61617*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe78007ff; valaddr_reg:x3; val_offset:61620*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61620*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7800fff; valaddr_reg:x3; val_offset:61623*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61623*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7801fff; valaddr_reg:x3; val_offset:61626*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61626*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7803fff; valaddr_reg:x3; val_offset:61629*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61629*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7807fff; valaddr_reg:x3; val_offset:61632*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61632*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe780ffff; valaddr_reg:x3; val_offset:61635*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61635*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe781ffff; valaddr_reg:x3; val_offset:61638*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61638*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe783ffff; valaddr_reg:x3; val_offset:61641*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61641*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe787ffff; valaddr_reg:x3; val_offset:61644*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61644*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe78fffff; valaddr_reg:x3; val_offset:61647*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61647*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe79fffff; valaddr_reg:x3; val_offset:61650*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61650*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7bfffff; valaddr_reg:x3; val_offset:61653*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61653*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7c00000; valaddr_reg:x3; val_offset:61656*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61656*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7e00000; valaddr_reg:x3; val_offset:61659*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61659*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7f00000; valaddr_reg:x3; val_offset:61662*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61662*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7f80000; valaddr_reg:x3; val_offset:61665*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61665*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fc0000; valaddr_reg:x3; val_offset:61668*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61668*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fe0000; valaddr_reg:x3; val_offset:61671*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61671*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ff0000; valaddr_reg:x3; val_offset:61674*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61674*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ff8000; valaddr_reg:x3; val_offset:61677*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61677*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffc000; valaddr_reg:x3; val_offset:61680*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61680*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffe000; valaddr_reg:x3; val_offset:61683*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61683*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fff000; valaddr_reg:x3; val_offset:61686*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61686*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fff800; valaddr_reg:x3; val_offset:61689*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61689*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffc00; valaddr_reg:x3; val_offset:61692*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61692*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffe00; valaddr_reg:x3; val_offset:61695*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61695*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffff00; valaddr_reg:x3; val_offset:61698*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61698*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffff80; valaddr_reg:x3; val_offset:61701*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61701*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffffc0; valaddr_reg:x3; val_offset:61704*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61704*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffffe0; valaddr_reg:x3; val_offset:61707*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61707*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffff0; valaddr_reg:x3; val_offset:61710*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61710*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffff8; valaddr_reg:x3; val_offset:61713*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61713*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffffc; valaddr_reg:x3; val_offset:61716*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61716*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7fffffe; valaddr_reg:x3; val_offset:61719*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61719*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xe7ffffff; valaddr_reg:x3; val_offset:61722*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61722*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff000001; valaddr_reg:x3; val_offset:61725*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61725*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff000003; valaddr_reg:x3; val_offset:61728*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61728*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff000007; valaddr_reg:x3; val_offset:61731*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61731*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff199999; valaddr_reg:x3; val_offset:61734*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61734*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff249249; valaddr_reg:x3; val_offset:61737*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61737*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff333333; valaddr_reg:x3; val_offset:61740*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61740*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:61743*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61743*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:61746*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61746*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff444444; valaddr_reg:x3; val_offset:61749*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61749*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:61752*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61752*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:61755*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61755*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff666666; valaddr_reg:x3; val_offset:61758*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61758*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:61761*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61761*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:61764*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61764*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:61767*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61767*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e6013 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x1ec757 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece6013; op2val:0xc01ec757;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:61770*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61770*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:61773*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61773*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:61776*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61776*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:61779*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61779*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:61782*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61782*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:61785*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61785*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:61788*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61788*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:61791*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61791*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:61794*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61794*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:61797*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61797*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:61800*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61800*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:61803*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61803*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:61806*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61806*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:61809*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61809*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:61812*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61812*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:61815*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61815*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:61818*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61818*0 + 3*160*FLEN/8, x4, x1, x2)

inst_20607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x4e9aef and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ece9aef; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:61821*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 61821*0 + 3*160*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095404543,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095412735,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095429119,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095461887,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095527423,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095658495,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3095920639,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3096444927,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3097493503,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3099590655,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3099590656,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3101687808,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3102736384,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103260672,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103522816,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103653888,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103719424,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103752192,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103768576,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103776768,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103780864,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103782912,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103783936,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784448,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784704,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784832,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784896,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784928,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784944,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784952,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784956,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784958,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3103784959,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2127383797,32,FLEN)
NAN_BOXED(2152713743,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925504,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925505,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925507,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925511,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925519,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925535,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925567,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925631,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883925759,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883926015,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883926527,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883927551,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883929599,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883933695,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883941887,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883958271,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3883991039,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3884056575,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3884187647,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3884449791,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3884974079,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3886022655,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3888119807,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3888119808,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3890216960,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3891265536,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3891789824,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892051968,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892183040,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892248576,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892281344,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892297728,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892305920,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892310016,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892312064,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892313088,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892313600,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892313856,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892313984,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314048,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314080,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314096,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314104,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314108,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314110,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(3892314111,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2127454227,32,FLEN)
NAN_BOXED(3223242583,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127469295,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
