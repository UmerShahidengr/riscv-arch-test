
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_20736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:62208*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62208*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:62211*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62211*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:62214*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62214*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:62217*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62217*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:62220*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62220*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:62223*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62223*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:62226*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62226*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:62229*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62229*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:62232*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62232*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:62235*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62235*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:62238*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62238*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:62241*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62241*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:62244*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62244*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:62247*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62247*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:62250*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62250*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:62253*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62253*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:62256*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62256*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:62259*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62259*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:62262*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62262*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:62265*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62265*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:62268*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62268*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:62271*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62271*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:62274*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62274*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:62277*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62277*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:62280*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62280*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:62283*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62283*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:62286*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62286*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:62289*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62289*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:62292*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62292*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:62295*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62295*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:62298*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62298*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:62301*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62301*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:62304*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62304*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:62307*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62307*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:62310*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62310*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:62313*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62313*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:62316*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62316*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:62319*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62319*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:62322*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62322*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:62325*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62325*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x50905a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed0905a; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:62328*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62328*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68000000; valaddr_reg:x3; val_offset:62331*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62331*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68000001; valaddr_reg:x3; val_offset:62334*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62334*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68000003; valaddr_reg:x3; val_offset:62337*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62337*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68000007; valaddr_reg:x3; val_offset:62340*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62340*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6800000f; valaddr_reg:x3; val_offset:62343*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62343*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6800001f; valaddr_reg:x3; val_offset:62346*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62346*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6800003f; valaddr_reg:x3; val_offset:62349*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62349*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6800007f; valaddr_reg:x3; val_offset:62352*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62352*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x680000ff; valaddr_reg:x3; val_offset:62355*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62355*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x680001ff; valaddr_reg:x3; val_offset:62358*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62358*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x680003ff; valaddr_reg:x3; val_offset:62361*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62361*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x680007ff; valaddr_reg:x3; val_offset:62364*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62364*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68000fff; valaddr_reg:x3; val_offset:62367*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62367*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68001fff; valaddr_reg:x3; val_offset:62370*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62370*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68003fff; valaddr_reg:x3; val_offset:62373*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62373*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68007fff; valaddr_reg:x3; val_offset:62376*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62376*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6800ffff; valaddr_reg:x3; val_offset:62379*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62379*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6801ffff; valaddr_reg:x3; val_offset:62382*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62382*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6803ffff; valaddr_reg:x3; val_offset:62385*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62385*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x6807ffff; valaddr_reg:x3; val_offset:62388*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62388*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x680fffff; valaddr_reg:x3; val_offset:62391*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62391*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x681fffff; valaddr_reg:x3; val_offset:62394*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62394*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x683fffff; valaddr_reg:x3; val_offset:62397*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62397*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68400000; valaddr_reg:x3; val_offset:62400*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62400*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68600000; valaddr_reg:x3; val_offset:62403*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62403*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68700000; valaddr_reg:x3; val_offset:62406*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62406*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x68780000; valaddr_reg:x3; val_offset:62409*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62409*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687c0000; valaddr_reg:x3; val_offset:62412*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62412*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687e0000; valaddr_reg:x3; val_offset:62415*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62415*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687f0000; valaddr_reg:x3; val_offset:62418*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62418*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687f8000; valaddr_reg:x3; val_offset:62421*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62421*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fc000; valaddr_reg:x3; val_offset:62424*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62424*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fe000; valaddr_reg:x3; val_offset:62427*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62427*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ff000; valaddr_reg:x3; val_offset:62430*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62430*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ff800; valaddr_reg:x3; val_offset:62433*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62433*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffc00; valaddr_reg:x3; val_offset:62436*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62436*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffe00; valaddr_reg:x3; val_offset:62439*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62439*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fff00; valaddr_reg:x3; val_offset:62442*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62442*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fff80; valaddr_reg:x3; val_offset:62445*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62445*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fffc0; valaddr_reg:x3; val_offset:62448*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62448*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fffe0; valaddr_reg:x3; val_offset:62451*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62451*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffff0; valaddr_reg:x3; val_offset:62454*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62454*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffff8; valaddr_reg:x3; val_offset:62457*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62457*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffffc; valaddr_reg:x3; val_offset:62460*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62460*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687ffffe; valaddr_reg:x3; val_offset:62463*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62463*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xd0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x687fffff; valaddr_reg:x3; val_offset:62466*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62466*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f000001; valaddr_reg:x3; val_offset:62469*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62469*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f000003; valaddr_reg:x3; val_offset:62472*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62472*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f000007; valaddr_reg:x3; val_offset:62475*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62475*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f199999; valaddr_reg:x3; val_offset:62478*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62478*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f249249; valaddr_reg:x3; val_offset:62481*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62481*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f333333; valaddr_reg:x3; val_offset:62484*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62484*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:62487*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62487*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:62490*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62490*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f444444; valaddr_reg:x3; val_offset:62493*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62493*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:62496*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62496*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:62499*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62499*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f666666; valaddr_reg:x3; val_offset:62502*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62502*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:62505*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62505*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:62508*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62508*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:62511*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62511*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x512c24 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1ca7ca and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed12c24; op2val:0x401ca7ca;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:62514*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62514*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32000000; valaddr_reg:x3; val_offset:62517*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62517*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32000001; valaddr_reg:x3; val_offset:62520*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62520*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32000003; valaddr_reg:x3; val_offset:62523*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62523*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32000007; valaddr_reg:x3; val_offset:62526*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62526*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3200000f; valaddr_reg:x3; val_offset:62529*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62529*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3200001f; valaddr_reg:x3; val_offset:62532*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62532*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3200003f; valaddr_reg:x3; val_offset:62535*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62535*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3200007f; valaddr_reg:x3; val_offset:62538*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62538*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x320000ff; valaddr_reg:x3; val_offset:62541*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62541*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x320001ff; valaddr_reg:x3; val_offset:62544*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62544*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x320003ff; valaddr_reg:x3; val_offset:62547*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62547*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x320007ff; valaddr_reg:x3; val_offset:62550*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62550*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32000fff; valaddr_reg:x3; val_offset:62553*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62553*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32001fff; valaddr_reg:x3; val_offset:62556*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62556*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32003fff; valaddr_reg:x3; val_offset:62559*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62559*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32007fff; valaddr_reg:x3; val_offset:62562*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62562*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3200ffff; valaddr_reg:x3; val_offset:62565*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62565*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3201ffff; valaddr_reg:x3; val_offset:62568*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62568*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3203ffff; valaddr_reg:x3; val_offset:62571*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62571*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x3207ffff; valaddr_reg:x3; val_offset:62574*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62574*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x320fffff; valaddr_reg:x3; val_offset:62577*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62577*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x321fffff; valaddr_reg:x3; val_offset:62580*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62580*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x323fffff; valaddr_reg:x3; val_offset:62583*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62583*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32400000; valaddr_reg:x3; val_offset:62586*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62586*0 + 3*162*FLEN/8, x4, x1, x2)

inst_20863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5298e8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x4dcc3a and fs3 == 0 and fe3 == 0x64 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed298e8; op2val:0x4dcc3a;
op3val:0x32600000; valaddr_reg:x3; val_offset:62589*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 62589*0 + 3*162*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421663,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421695,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421759,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421887,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422143,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340422655,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340423679,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340425727,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340429823,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340438015,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340454399,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340487167,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340552703,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340683775,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340945919,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2341470207,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2342518783,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615935,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2344615936,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2346713088,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2347761664,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348285952,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348548096,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348679168,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348744704,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348777472,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348793856,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348802048,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348806144,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348808192,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809216,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809728,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348809984,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810112,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810176,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810208,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810224,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810232,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810236,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810238,32,FLEN)
NAN_BOXED(2127597658,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810239,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830464,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830465,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830467,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830471,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830479,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830495,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830527,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830591,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830719,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744830975,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744831487,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744832511,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744834559,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744838655,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744846847,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744863231,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744895999,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1744961535,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1745092607,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1745354751,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1745879039,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1746927615,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1749024767,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1749024768,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1751121920,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1752170496,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1752694784,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1752956928,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753088000,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753153536,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753186304,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753202688,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753210880,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753214976,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753217024,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753218048,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753218560,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753218816,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753218944,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219008,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219040,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219056,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219064,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219068,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219070,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(1753219071,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2127637540,32,FLEN)
NAN_BOXED(1075619786,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860800,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860801,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860803,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860807,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860815,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860831,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860863,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838860927,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838861055,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838861311,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838861823,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838862847,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838864895,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838868991,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838877183,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838893567,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838926335,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(838991871,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(839122943,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(839385087,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(839909375,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(840957951,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(843055103,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(843055104,32,FLEN)
NAN_BOXED(2127730920,32,FLEN)
NAN_BOXED(5098554,32,FLEN)
NAN_BOXED(845152256,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
