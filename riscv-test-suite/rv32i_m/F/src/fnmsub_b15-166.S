
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca01ffff; valaddr_reg:x3; val_offset:63360*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63360*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca03ffff; valaddr_reg:x3; val_offset:63363*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63363*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca07ffff; valaddr_reg:x3; val_offset:63366*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63366*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca0fffff; valaddr_reg:x3; val_offset:63369*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63369*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca1fffff; valaddr_reg:x3; val_offset:63372*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63372*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca3fffff; valaddr_reg:x3; val_offset:63375*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63375*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca400000; valaddr_reg:x3; val_offset:63378*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63378*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca600000; valaddr_reg:x3; val_offset:63381*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63381*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca700000; valaddr_reg:x3; val_offset:63384*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63384*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca780000; valaddr_reg:x3; val_offset:63387*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63387*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7c0000; valaddr_reg:x3; val_offset:63390*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63390*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7e0000; valaddr_reg:x3; val_offset:63393*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63393*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7f0000; valaddr_reg:x3; val_offset:63396*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63396*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7f8000; valaddr_reg:x3; val_offset:63399*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63399*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fc000; valaddr_reg:x3; val_offset:63402*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63402*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fe000; valaddr_reg:x3; val_offset:63405*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63405*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ff000; valaddr_reg:x3; val_offset:63408*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63408*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ff800; valaddr_reg:x3; val_offset:63411*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63411*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffc00; valaddr_reg:x3; val_offset:63414*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63414*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffe00; valaddr_reg:x3; val_offset:63417*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63417*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fff00; valaddr_reg:x3; val_offset:63420*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63420*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fff80; valaddr_reg:x3; val_offset:63423*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63423*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fffc0; valaddr_reg:x3; val_offset:63426*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63426*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fffe0; valaddr_reg:x3; val_offset:63429*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63429*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffff0; valaddr_reg:x3; val_offset:63432*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63432*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffff8; valaddr_reg:x3; val_offset:63435*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63435*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffffc; valaddr_reg:x3; val_offset:63438*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63438*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7ffffe; valaddr_reg:x3; val_offset:63441*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63441*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55526b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x4ccdd9 and fs3 == 1 and fe3 == 0x94 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5526b; op2val:0x804ccdd9;
op3val:0xca7fffff; valaddr_reg:x3; val_offset:63444*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63444*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:63447*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63447*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:63450*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63450*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:63453*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63453*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:63456*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63456*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:63459*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63459*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:63462*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63462*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:63465*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63465*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:63468*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63468*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:63471*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63471*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:63474*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63474*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:63477*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63477*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:63480*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63480*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:63483*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63483*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:63486*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63486*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:63489*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63489*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:63492*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63492*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83800000; valaddr_reg:x3; val_offset:63495*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63495*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83800001; valaddr_reg:x3; val_offset:63498*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63498*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83800003; valaddr_reg:x3; val_offset:63501*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63501*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83800007; valaddr_reg:x3; val_offset:63504*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63504*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8380000f; valaddr_reg:x3; val_offset:63507*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63507*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8380001f; valaddr_reg:x3; val_offset:63510*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63510*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8380003f; valaddr_reg:x3; val_offset:63513*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63513*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8380007f; valaddr_reg:x3; val_offset:63516*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63516*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x838000ff; valaddr_reg:x3; val_offset:63519*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63519*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x838001ff; valaddr_reg:x3; val_offset:63522*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63522*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x838003ff; valaddr_reg:x3; val_offset:63525*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63525*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x838007ff; valaddr_reg:x3; val_offset:63528*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63528*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83800fff; valaddr_reg:x3; val_offset:63531*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63531*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83801fff; valaddr_reg:x3; val_offset:63534*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63534*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83803fff; valaddr_reg:x3; val_offset:63537*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63537*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83807fff; valaddr_reg:x3; val_offset:63540*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63540*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8380ffff; valaddr_reg:x3; val_offset:63543*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63543*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8381ffff; valaddr_reg:x3; val_offset:63546*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63546*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8383ffff; valaddr_reg:x3; val_offset:63549*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63549*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x8387ffff; valaddr_reg:x3; val_offset:63552*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63552*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x838fffff; valaddr_reg:x3; val_offset:63555*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63555*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x839fffff; valaddr_reg:x3; val_offset:63558*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63558*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83bfffff; valaddr_reg:x3; val_offset:63561*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63561*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83c00000; valaddr_reg:x3; val_offset:63564*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63564*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83e00000; valaddr_reg:x3; val_offset:63567*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63567*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83f00000; valaddr_reg:x3; val_offset:63570*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63570*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83f80000; valaddr_reg:x3; val_offset:63573*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63573*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fc0000; valaddr_reg:x3; val_offset:63576*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63576*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fe0000; valaddr_reg:x3; val_offset:63579*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63579*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ff0000; valaddr_reg:x3; val_offset:63582*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63582*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ff8000; valaddr_reg:x3; val_offset:63585*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63585*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffc000; valaddr_reg:x3; val_offset:63588*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63588*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffe000; valaddr_reg:x3; val_offset:63591*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63591*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fff000; valaddr_reg:x3; val_offset:63594*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63594*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fff800; valaddr_reg:x3; val_offset:63597*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63597*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffc00; valaddr_reg:x3; val_offset:63600*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63600*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffe00; valaddr_reg:x3; val_offset:63603*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63603*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffff00; valaddr_reg:x3; val_offset:63606*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63606*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffff80; valaddr_reg:x3; val_offset:63609*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63609*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffffc0; valaddr_reg:x3; val_offset:63612*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63612*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffffe0; valaddr_reg:x3; val_offset:63615*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63615*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffff0; valaddr_reg:x3; val_offset:63618*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63618*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffff8; valaddr_reg:x3; val_offset:63621*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63621*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffffc; valaddr_reg:x3; val_offset:63624*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63624*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83fffffe; valaddr_reg:x3; val_offset:63627*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63627*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x55ef3e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed5ef3e; op2val:0x80000000;
op3val:0x83ffffff; valaddr_reg:x3; val_offset:63630*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63630*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:63633*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63633*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:63636*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63636*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:63639*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63639*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:63642*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63642*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:63645*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63645*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:63648*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63648*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:63651*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63651*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:63654*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63654*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:63657*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63657*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:63660*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63660*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:63663*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63663*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:63666*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63666*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:63669*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63669*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:63672*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63672*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:63675*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63675*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:63678*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63678*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6800000; valaddr_reg:x3; val_offset:63681*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63681*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6800001; valaddr_reg:x3; val_offset:63684*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63684*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6800003; valaddr_reg:x3; val_offset:63687*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63687*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6800007; valaddr_reg:x3; val_offset:63690*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63690*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x680000f; valaddr_reg:x3; val_offset:63693*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63693*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x680001f; valaddr_reg:x3; val_offset:63696*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63696*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x680003f; valaddr_reg:x3; val_offset:63699*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63699*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x680007f; valaddr_reg:x3; val_offset:63702*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63702*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x68000ff; valaddr_reg:x3; val_offset:63705*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63705*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x68001ff; valaddr_reg:x3; val_offset:63708*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63708*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x68003ff; valaddr_reg:x3; val_offset:63711*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63711*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x68007ff; valaddr_reg:x3; val_offset:63714*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63714*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6800fff; valaddr_reg:x3; val_offset:63717*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63717*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6801fff; valaddr_reg:x3; val_offset:63720*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63720*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6803fff; valaddr_reg:x3; val_offset:63723*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63723*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x6807fff; valaddr_reg:x3; val_offset:63726*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63726*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x680ffff; valaddr_reg:x3; val_offset:63729*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63729*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x681ffff; valaddr_reg:x3; val_offset:63732*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63732*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x683ffff; valaddr_reg:x3; val_offset:63735*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63735*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x687ffff; valaddr_reg:x3; val_offset:63738*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63738*0 + 3*165*FLEN/8, x4, x1, x2)

inst_21247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x56af53 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed6af53; op2val:0x0;
op3val:0x68fffff; valaddr_reg:x3; val_offset:63741*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 63741*0 + 3*165*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3389128703,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3389259775,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3389521919,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3390046207,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3391094783,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3393191935,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3393191936,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3395289088,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3396337664,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3396861952,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397124096,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397255168,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397320704,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397353472,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397369856,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397378048,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397382144,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397384192,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397385216,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397385728,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397385984,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386112,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386176,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386208,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386224,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386232,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386236,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386238,32,FLEN)
NAN_BOXED(2127909483,32,FLEN)
NAN_BOXED(2152517081,32,FLEN)
NAN_BOXED(3397386239,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203904,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203905,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203907,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203911,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203919,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203935,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203967,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204031,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204159,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204415,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206204927,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206205951,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206207999,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206212095,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206220287,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206236671,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206269439,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206334975,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206466047,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206728191,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2207252479,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2208301055,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398207,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2210398208,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2212495360,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2213543936,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214068224,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214330368,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214461440,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214526976,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214559744,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214576128,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214584320,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214588416,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214590464,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214591488,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592000,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592256,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592384,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592448,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592480,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592496,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592504,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592508,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592510,32,FLEN)
NAN_BOXED(2127949630,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592511,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051904,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051905,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051907,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051911,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051919,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051935,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051967,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052031,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052159,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052415,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109052927,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109053951,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109055999,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109060095,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109068287,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109084671,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109117439,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109182975,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109314047,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109576191,32,FLEN)
NAN_BOXED(2127998803,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(110100479,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
