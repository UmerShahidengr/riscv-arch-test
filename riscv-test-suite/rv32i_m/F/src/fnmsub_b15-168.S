
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:64128*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64128*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:64131*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64131*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:64134*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64134*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:64137*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64137*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:64140*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64140*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:64143*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64143*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:64146*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64146*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:64149*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64149*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:64152*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64152*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:64155*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64155*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:64158*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64158*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:64161*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64161*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:64164*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64164*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:64167*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64167*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:64170*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64170*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:64173*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64173*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:64176*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64176*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:64179*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64179*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:64182*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64182*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:64185*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64185*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58913a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8913a; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:64188*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64188*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:64191*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64191*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:64194*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64194*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:64197*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64197*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:64200*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64200*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:64203*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64203*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:64206*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64206*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:64209*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64209*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:64212*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64212*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:64215*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64215*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:64218*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64218*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:64221*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64221*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:64224*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64224*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:64227*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64227*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:64230*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64230*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:64233*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64233*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:64236*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64236*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:64239*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64239*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:64242*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64242*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:64245*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64245*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:64248*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64248*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:64251*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64251*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:64254*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64254*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:64257*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64257*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:64260*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64260*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:64263*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64263*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:64266*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64266*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:64269*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64269*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:64272*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64272*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:64275*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64275*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:64278*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64278*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:64281*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64281*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:64284*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64284*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:64287*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64287*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:64290*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64290*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:64293*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64293*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:64296*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64296*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:64299*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64299*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:64302*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64302*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:64305*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64305*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:64308*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64308*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:64311*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64311*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:64314*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64314*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:64317*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64317*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:64320*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64320*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:64323*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64323*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:64326*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64326*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:64329*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64329*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:64332*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64332*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:64335*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64335*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:64338*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64338*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:64341*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64341*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:64344*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64344*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:64347*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64347*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:64350*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64350*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:64353*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64353*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:64356*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64356*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:64359*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64359*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:64362*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64362*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:64365*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64365*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:64368*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64368*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:64371*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64371*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b312 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b312; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:64374*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64374*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62000000; valaddr_reg:x3; val_offset:64377*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64377*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62000001; valaddr_reg:x3; val_offset:64380*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64380*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62000003; valaddr_reg:x3; val_offset:64383*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64383*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62000007; valaddr_reg:x3; val_offset:64386*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64386*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6200000f; valaddr_reg:x3; val_offset:64389*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64389*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6200001f; valaddr_reg:x3; val_offset:64392*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64392*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6200003f; valaddr_reg:x3; val_offset:64395*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64395*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6200007f; valaddr_reg:x3; val_offset:64398*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64398*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x620000ff; valaddr_reg:x3; val_offset:64401*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64401*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x620001ff; valaddr_reg:x3; val_offset:64404*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64404*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x620003ff; valaddr_reg:x3; val_offset:64407*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64407*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x620007ff; valaddr_reg:x3; val_offset:64410*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64410*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62000fff; valaddr_reg:x3; val_offset:64413*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64413*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62001fff; valaddr_reg:x3; val_offset:64416*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64416*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62003fff; valaddr_reg:x3; val_offset:64419*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64419*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62007fff; valaddr_reg:x3; val_offset:64422*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64422*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6200ffff; valaddr_reg:x3; val_offset:64425*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64425*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6201ffff; valaddr_reg:x3; val_offset:64428*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64428*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6203ffff; valaddr_reg:x3; val_offset:64431*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64431*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x6207ffff; valaddr_reg:x3; val_offset:64434*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64434*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x620fffff; valaddr_reg:x3; val_offset:64437*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64437*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x621fffff; valaddr_reg:x3; val_offset:64440*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64440*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x623fffff; valaddr_reg:x3; val_offset:64443*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64443*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62400000; valaddr_reg:x3; val_offset:64446*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64446*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62600000; valaddr_reg:x3; val_offset:64449*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64449*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62700000; valaddr_reg:x3; val_offset:64452*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64452*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x62780000; valaddr_reg:x3; val_offset:64455*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64455*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627c0000; valaddr_reg:x3; val_offset:64458*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64458*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627e0000; valaddr_reg:x3; val_offset:64461*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64461*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627f0000; valaddr_reg:x3; val_offset:64464*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64464*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627f8000; valaddr_reg:x3; val_offset:64467*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64467*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fc000; valaddr_reg:x3; val_offset:64470*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64470*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fe000; valaddr_reg:x3; val_offset:64473*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64473*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ff000; valaddr_reg:x3; val_offset:64476*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64476*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ff800; valaddr_reg:x3; val_offset:64479*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64479*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffc00; valaddr_reg:x3; val_offset:64482*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64482*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffe00; valaddr_reg:x3; val_offset:64485*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64485*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fff00; valaddr_reg:x3; val_offset:64488*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64488*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fff80; valaddr_reg:x3; val_offset:64491*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64491*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fffc0; valaddr_reg:x3; val_offset:64494*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64494*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627fffe0; valaddr_reg:x3; val_offset:64497*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64497*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffff0; valaddr_reg:x3; val_offset:64500*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64500*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffff8; valaddr_reg:x3; val_offset:64503*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64503*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffffc; valaddr_reg:x3; val_offset:64506*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64506*0 + 3*167*FLEN/8, x4, x1, x2)

inst_21503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x58b6b2 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x173441 and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed8b6b2; op2val:0x40173441;
op3val:0x627ffffe; valaddr_reg:x3; val_offset:64509*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64509*0 + 3*167*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2128122170,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2128130834,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167168,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167169,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167171,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167175,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167183,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167199,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167231,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167295,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167423,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644167679,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644168191,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644169215,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644171263,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644175359,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644183551,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644199935,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644232703,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644298239,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644429311,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1644691455,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1645215743,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1646264319,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1648361471,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1648361472,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1650458624,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1651507200,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652031488,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652293632,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652424704,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652490240,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652523008,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652539392,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652547584,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652551680,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652553728,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652554752,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555264,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555520,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555648,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555712,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555744,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555760,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555768,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555772,32,FLEN)
NAN_BOXED(2128131762,32,FLEN)
NAN_BOXED(1075262529,32,FLEN)
NAN_BOXED(1652555774,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
