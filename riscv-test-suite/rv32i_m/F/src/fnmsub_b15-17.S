
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2048:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe8000ff; valaddr_reg:x3; val_offset:6144*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6144*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2049:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe8001ff; valaddr_reg:x3; val_offset:6147*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6147*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2050:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe8003ff; valaddr_reg:x3; val_offset:6150*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6150*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2051:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe8007ff; valaddr_reg:x3; val_offset:6153*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6153*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2052:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe800fff; valaddr_reg:x3; val_offset:6156*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6156*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2053:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe801fff; valaddr_reg:x3; val_offset:6159*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6159*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2054:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe803fff; valaddr_reg:x3; val_offset:6162*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6162*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2055:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe807fff; valaddr_reg:x3; val_offset:6165*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6165*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2056:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe80ffff; valaddr_reg:x3; val_offset:6168*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6168*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2057:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe81ffff; valaddr_reg:x3; val_offset:6171*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6171*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2058:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe83ffff; valaddr_reg:x3; val_offset:6174*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6174*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2059:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe87ffff; valaddr_reg:x3; val_offset:6177*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6177*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2060:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe8fffff; valaddr_reg:x3; val_offset:6180*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6180*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2061:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfe9fffff; valaddr_reg:x3; val_offset:6183*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6183*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2062:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfebfffff; valaddr_reg:x3; val_offset:6186*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6186*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2063:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfec00000; valaddr_reg:x3; val_offset:6189*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6189*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2064:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfee00000; valaddr_reg:x3; val_offset:6192*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6192*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2065:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfef00000; valaddr_reg:x3; val_offset:6195*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6195*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2066:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfef80000; valaddr_reg:x3; val_offset:6198*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6198*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2067:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefc0000; valaddr_reg:x3; val_offset:6201*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6201*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2068:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefe0000; valaddr_reg:x3; val_offset:6204*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6204*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2069:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeff0000; valaddr_reg:x3; val_offset:6207*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6207*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2070:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeff8000; valaddr_reg:x3; val_offset:6210*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6210*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2071:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffc000; valaddr_reg:x3; val_offset:6213*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6213*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2072:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffe000; valaddr_reg:x3; val_offset:6216*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6216*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2073:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefff000; valaddr_reg:x3; val_offset:6219*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6219*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2074:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefff800; valaddr_reg:x3; val_offset:6222*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6222*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2075:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffc00; valaddr_reg:x3; val_offset:6225*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6225*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2076:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffe00; valaddr_reg:x3; val_offset:6228*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6228*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2077:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffff00; valaddr_reg:x3; val_offset:6231*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6231*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2078:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffff80; valaddr_reg:x3; val_offset:6234*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6234*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2079:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffffc0; valaddr_reg:x3; val_offset:6237*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6237*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2080:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffffe0; valaddr_reg:x3; val_offset:6240*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6240*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2081:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffff0; valaddr_reg:x3; val_offset:6243*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6243*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2082:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffff8; valaddr_reg:x3; val_offset:6246*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6246*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2083:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffffc; valaddr_reg:x3; val_offset:6249*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6249*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2084:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfefffffe; valaddr_reg:x3; val_offset:6252*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6252*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2085:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xfeffffff; valaddr_reg:x3; val_offset:6255*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6255*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2086:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff000001; valaddr_reg:x3; val_offset:6258*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6258*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2087:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff000003; valaddr_reg:x3; val_offset:6261*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6261*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2088:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff000007; valaddr_reg:x3; val_offset:6264*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6264*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2089:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff199999; valaddr_reg:x3; val_offset:6267*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6267*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2090:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff249249; valaddr_reg:x3; val_offset:6270*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6270*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2091:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff333333; valaddr_reg:x3; val_offset:6273*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6273*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2092:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:6276*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6276*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2093:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:6279*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6279*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2094:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff444444; valaddr_reg:x3; val_offset:6282*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6282*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2095:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:6285*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6285*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2096:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:6288*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6288*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2097:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff666666; valaddr_reg:x3; val_offset:6291*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6291*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2098:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:6294*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6294*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2099:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:6297*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6297*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2100:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:6300*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6300*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2101:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x1f68e8 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x4d8ee8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d1f68e8; op2val:0xc1cd8ee8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:6303*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6303*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2102:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbf800001; valaddr_reg:x3; val_offset:6306*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6306*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2103:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbf800003; valaddr_reg:x3; val_offset:6309*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6309*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2104:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbf800007; valaddr_reg:x3; val_offset:6312*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6312*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2105:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbf999999; valaddr_reg:x3; val_offset:6315*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6315*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2106:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:6318*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6318*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2107:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:6321*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6321*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2108:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:6324*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6324*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2109:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:6327*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6327*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2110:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:6330*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6330*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2111:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:6333*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6333*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2112:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:6336*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6336*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2113:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:6339*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6339*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2114:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:6342*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6342*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2115:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:6345*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6345*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2116:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:6348*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6348*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2117:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:6351*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6351*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2118:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1800000; valaddr_reg:x3; val_offset:6354*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6354*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2119:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1800001; valaddr_reg:x3; val_offset:6357*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6357*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2120:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1800003; valaddr_reg:x3; val_offset:6360*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6360*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2121:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1800007; valaddr_reg:x3; val_offset:6363*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6363*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2122:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc180000f; valaddr_reg:x3; val_offset:6366*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6366*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2123:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc180001f; valaddr_reg:x3; val_offset:6369*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6369*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2124:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc180003f; valaddr_reg:x3; val_offset:6372*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6372*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2125:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc180007f; valaddr_reg:x3; val_offset:6375*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6375*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2126:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:6378*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6378*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2127:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:6381*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6381*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2128:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:6384*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6384*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2129:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:6387*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6387*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2130:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:6390*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6390*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2131:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:6393*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6393*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2132:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:6396*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6396*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2133:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:6399*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6399*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2134:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:6402*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6402*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2135:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:6405*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6405*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2136:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:6408*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6408*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2137:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:6411*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6411*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2138:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:6414*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6414*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2139:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:6417*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6417*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2140:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:6420*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6420*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2141:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:6423*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6423*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2142:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:6426*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6426*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2143:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:6429*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6429*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2144:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:6432*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6432*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2145:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:6435*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6435*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2146:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:6438*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6438*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2147:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:6441*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6441*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2148:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:6444*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6444*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2149:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:6447*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6447*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2150:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:6450*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6450*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2151:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:6453*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6453*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2152:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:6456*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6456*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2153:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:6459*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6459*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2154:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:6462*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6462*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2155:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:6465*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6465*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2156:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:6468*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6468*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2157:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:6471*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6471*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2158:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:6474*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6474*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2159:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:6477*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6477*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2160:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:6480*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6480*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2161:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:6483*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6483*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2162:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:6486*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6486*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2163:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x2872e3 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x428729 and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d2872e3; op2val:0x81c28729;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:6489*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6489*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2164:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf6000000; valaddr_reg:x3; val_offset:6492*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6492*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2165:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf6000001; valaddr_reg:x3; val_offset:6495*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6495*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2166:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf6000003; valaddr_reg:x3; val_offset:6498*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6498*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2167:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf6000007; valaddr_reg:x3; val_offset:6501*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6501*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2168:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf600000f; valaddr_reg:x3; val_offset:6504*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6504*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2169:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf600001f; valaddr_reg:x3; val_offset:6507*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6507*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2170:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf600003f; valaddr_reg:x3; val_offset:6510*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6510*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2171:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf600007f; valaddr_reg:x3; val_offset:6513*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6513*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2172:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf60000ff; valaddr_reg:x3; val_offset:6516*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6516*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2173:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf60001ff; valaddr_reg:x3; val_offset:6519*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6519*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2174:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf60003ff; valaddr_reg:x3; val_offset:6522*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6522*0 + 3*16*FLEN/8, x4, x1, x2)

inst_2175:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x3773f1 and fs2 == 1 and fe2 == 0x83 and fm2 == 0x329e38 and fs3 == 1 and fe3 == 0xec and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d3773f1; op2val:0xc1b29e38;
op3val:0xf60007ff; valaddr_reg:x3; val_offset:6525*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 6525*0 + 3*16*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801727,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269801983,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269802495,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269803519,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269805567,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269809663,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269817855,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269834239,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269867007,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4269932543,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4270063615,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4270325759,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4270850047,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4271898623,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4273995775,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4273995776,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4276092928,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4277141504,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4277665792,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4277927936,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278059008,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278124544,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278157312,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278173696,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278181888,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278185984,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278188032,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278189056,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278189568,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278189824,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278189952,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190016,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190048,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190064,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190072,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190076,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190078,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190079,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2099210472,32,FLEN)
NAN_BOXED(3251474152,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391296,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391297,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391299,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391303,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391311,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391327,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391359,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391423,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391551,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246391807,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246392319,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246393343,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246395391,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246399487,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246407679,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246424063,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246456831,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246522367,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246653439,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3246915583,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3247439871,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3248488447,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3250585599,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3250585600,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3252682752,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3253731328,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254255616,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254517760,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254648832,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254714368,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254747136,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254763520,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254771712,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254775808,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254777856,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254778880,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779392,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779648,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779776,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779840,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779872,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779888,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779896,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779900,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779902,32,FLEN)
NAN_BOXED(2099802851,32,FLEN)
NAN_BOXED(2177009449,32,FLEN)
NAN_BOXED(3254779903,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195136,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195137,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195139,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195143,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195151,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195167,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195199,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195263,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195391,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127195647,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127196159,32,FLEN)
NAN_BOXED(2100786161,32,FLEN)
NAN_BOXED(3249708600,32,FLEN)
NAN_BOXED(4127197183,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
