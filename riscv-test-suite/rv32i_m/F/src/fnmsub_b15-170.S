
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_21632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ff000; valaddr_reg:x3; val_offset:64896*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64896*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ff800; valaddr_reg:x3; val_offset:64899*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64899*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffc00; valaddr_reg:x3; val_offset:64902*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64902*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffe00; valaddr_reg:x3; val_offset:64905*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64905*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817fff00; valaddr_reg:x3; val_offset:64908*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64908*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817fff80; valaddr_reg:x3; val_offset:64911*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64911*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817fffc0; valaddr_reg:x3; val_offset:64914*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64914*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817fffe0; valaddr_reg:x3; val_offset:64917*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64917*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffff0; valaddr_reg:x3; val_offset:64920*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64920*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffff8; valaddr_reg:x3; val_offset:64923*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64923*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffffc; valaddr_reg:x3; val_offset:64926*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64926*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:64929*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64929*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x597e8a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed97e8a; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:64932*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64932*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64000000; valaddr_reg:x3; val_offset:64935*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64935*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64000001; valaddr_reg:x3; val_offset:64938*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64938*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64000003; valaddr_reg:x3; val_offset:64941*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64941*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64000007; valaddr_reg:x3; val_offset:64944*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64944*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6400000f; valaddr_reg:x3; val_offset:64947*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64947*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6400001f; valaddr_reg:x3; val_offset:64950*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64950*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6400003f; valaddr_reg:x3; val_offset:64953*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64953*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6400007f; valaddr_reg:x3; val_offset:64956*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64956*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x640000ff; valaddr_reg:x3; val_offset:64959*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64959*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x640001ff; valaddr_reg:x3; val_offset:64962*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64962*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x640003ff; valaddr_reg:x3; val_offset:64965*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64965*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x640007ff; valaddr_reg:x3; val_offset:64968*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64968*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64000fff; valaddr_reg:x3; val_offset:64971*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64971*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64001fff; valaddr_reg:x3; val_offset:64974*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64974*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64003fff; valaddr_reg:x3; val_offset:64977*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64977*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64007fff; valaddr_reg:x3; val_offset:64980*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64980*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6400ffff; valaddr_reg:x3; val_offset:64983*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64983*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6401ffff; valaddr_reg:x3; val_offset:64986*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64986*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6403ffff; valaddr_reg:x3; val_offset:64989*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64989*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x6407ffff; valaddr_reg:x3; val_offset:64992*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64992*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x640fffff; valaddr_reg:x3; val_offset:64995*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64995*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x641fffff; valaddr_reg:x3; val_offset:64998*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 64998*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x643fffff; valaddr_reg:x3; val_offset:65001*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65001*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64400000; valaddr_reg:x3; val_offset:65004*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65004*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64600000; valaddr_reg:x3; val_offset:65007*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65007*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64700000; valaddr_reg:x3; val_offset:65010*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65010*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x64780000; valaddr_reg:x3; val_offset:65013*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65013*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647c0000; valaddr_reg:x3; val_offset:65016*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65016*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647e0000; valaddr_reg:x3; val_offset:65019*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65019*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647f0000; valaddr_reg:x3; val_offset:65022*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65022*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647f8000; valaddr_reg:x3; val_offset:65025*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65025*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fc000; valaddr_reg:x3; val_offset:65028*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65028*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fe000; valaddr_reg:x3; val_offset:65031*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65031*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ff000; valaddr_reg:x3; val_offset:65034*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65034*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ff800; valaddr_reg:x3; val_offset:65037*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65037*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffc00; valaddr_reg:x3; val_offset:65040*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65040*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffe00; valaddr_reg:x3; val_offset:65043*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65043*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fff00; valaddr_reg:x3; val_offset:65046*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65046*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fff80; valaddr_reg:x3; val_offset:65049*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65049*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fffc0; valaddr_reg:x3; val_offset:65052*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65052*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fffe0; valaddr_reg:x3; val_offset:65055*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65055*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffff0; valaddr_reg:x3; val_offset:65058*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65058*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffff8; valaddr_reg:x3; val_offset:65061*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65061*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffffc; valaddr_reg:x3; val_offset:65064*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65064*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647ffffe; valaddr_reg:x3; val_offset:65067*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65067*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xc8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x647fffff; valaddr_reg:x3; val_offset:65070*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65070*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f000001; valaddr_reg:x3; val_offset:65073*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65073*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f000003; valaddr_reg:x3; val_offset:65076*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65076*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f000007; valaddr_reg:x3; val_offset:65079*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65079*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f199999; valaddr_reg:x3; val_offset:65082*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65082*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f249249; valaddr_reg:x3; val_offset:65085*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65085*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f333333; valaddr_reg:x3; val_offset:65088*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65088*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:65091*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65091*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:65094*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65094*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f444444; valaddr_reg:x3; val_offset:65097*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65097*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:65100*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65100*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:65103*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65103*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f666666; valaddr_reg:x3; val_offset:65106*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65106*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:65109*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65109*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:65112*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65112*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:65115*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65115*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x59c363 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x1679b0 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed9c363; op2val:0x401679b0;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:65118*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65118*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:65121*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65121*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:65124*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65124*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:65127*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65127*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:65130*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65130*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:65133*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65133*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:65136*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65136*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:65139*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65139*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:65142*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65142*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:65145*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65145*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:65148*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65148*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:65151*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65151*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:65154*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65154*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:65157*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65157*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:65160*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65160*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:65163*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65163*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:65166*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65166*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:65169*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65169*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:65172*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65172*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:65175*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65175*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:65178*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65178*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:65181*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65181*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:65184*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65184*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:65187*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65187*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:65190*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65190*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:65193*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65193*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:65196*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65196*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:65199*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65199*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:65202*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65202*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:65205*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65205*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:65208*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65208*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:65211*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65211*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:65214*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65214*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:65217*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65217*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:65220*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65220*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:65223*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65223*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:65226*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65226*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:65229*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65229*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:65232*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65232*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:65235*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65235*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:65238*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65238*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:65241*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65241*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:65244*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65244*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:65247*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65247*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:65250*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65250*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:65253*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65253*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:65256*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65256*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:65259*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65259*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:65262*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65262*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:65265*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65265*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:65268*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65268*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:65271*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65271*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:65274*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65274*0 + 3*169*FLEN/8, x4, x1, x2)

inst_21759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a4479 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda4479; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:65277*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 65277*0 + 3*169*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172645376,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172647424,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648448,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172648960,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649216,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649344,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649408,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649440,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649456,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649464,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649468,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2128182922,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721600,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721601,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721603,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721607,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721615,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721631,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721663,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721727,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677721855,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677722111,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677722623,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677723647,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677725695,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677729791,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677737983,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677754367,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677787135,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677852671,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1677983743,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1678245887,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1678770175,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1679818751,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1681915903,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1681915904,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1684013056,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1685061632,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1685585920,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1685848064,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1685979136,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686044672,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686077440,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686093824,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686102016,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686106112,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686108160,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686109184,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686109696,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686109952,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110080,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110144,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110176,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110192,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110200,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110204,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110206,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(1686110207,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2128200547,32,FLEN)
NAN_BOXED(1075214768,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2128233593,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
