
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_22784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3001fff; valaddr_reg:x3; val_offset:68352*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68352*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3003fff; valaddr_reg:x3; val_offset:68355*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68355*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3007fff; valaddr_reg:x3; val_offset:68358*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68358*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x300ffff; valaddr_reg:x3; val_offset:68361*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68361*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x301ffff; valaddr_reg:x3; val_offset:68364*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68364*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x303ffff; valaddr_reg:x3; val_offset:68367*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68367*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x307ffff; valaddr_reg:x3; val_offset:68370*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68370*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x30fffff; valaddr_reg:x3; val_offset:68373*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68373*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x31fffff; valaddr_reg:x3; val_offset:68376*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68376*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x33fffff; valaddr_reg:x3; val_offset:68379*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68379*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3400000; valaddr_reg:x3; val_offset:68382*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68382*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3600000; valaddr_reg:x3; val_offset:68385*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68385*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3700000; valaddr_reg:x3; val_offset:68388*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68388*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x3780000; valaddr_reg:x3; val_offset:68391*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68391*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37c0000; valaddr_reg:x3; val_offset:68394*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68394*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37e0000; valaddr_reg:x3; val_offset:68397*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68397*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37f0000; valaddr_reg:x3; val_offset:68400*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68400*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37f8000; valaddr_reg:x3; val_offset:68403*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68403*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fc000; valaddr_reg:x3; val_offset:68406*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68406*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fe000; valaddr_reg:x3; val_offset:68409*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68409*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ff000; valaddr_reg:x3; val_offset:68412*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68412*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ff800; valaddr_reg:x3; val_offset:68415*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68415*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffc00; valaddr_reg:x3; val_offset:68418*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68418*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x3; val_offset:68421*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68421*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x3; val_offset:68424*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68424*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fff80; valaddr_reg:x3; val_offset:68427*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68427*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fffc0; valaddr_reg:x3; val_offset:68430*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68430*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fffe0; valaddr_reg:x3; val_offset:68433*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68433*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffff0; valaddr_reg:x3; val_offset:68436*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68436*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffff8; valaddr_reg:x3; val_offset:68439*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68439*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffffc; valaddr_reg:x3; val_offset:68442*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68442*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37ffffe; valaddr_reg:x3; val_offset:68445*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68445*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6285ba and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee285ba; op2val:0x0;
op3val:0x37fffff; valaddr_reg:x3; val_offset:68448*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68448*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61000000; valaddr_reg:x3; val_offset:68451*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68451*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61000001; valaddr_reg:x3; val_offset:68454*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68454*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61000003; valaddr_reg:x3; val_offset:68457*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68457*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61000007; valaddr_reg:x3; val_offset:68460*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68460*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6100000f; valaddr_reg:x3; val_offset:68463*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68463*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6100001f; valaddr_reg:x3; val_offset:68466*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68466*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6100003f; valaddr_reg:x3; val_offset:68469*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68469*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6100007f; valaddr_reg:x3; val_offset:68472*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68472*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x610000ff; valaddr_reg:x3; val_offset:68475*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68475*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x610001ff; valaddr_reg:x3; val_offset:68478*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68478*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x610003ff; valaddr_reg:x3; val_offset:68481*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68481*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x610007ff; valaddr_reg:x3; val_offset:68484*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68484*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61000fff; valaddr_reg:x3; val_offset:68487*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68487*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61001fff; valaddr_reg:x3; val_offset:68490*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68490*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61003fff; valaddr_reg:x3; val_offset:68493*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68493*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61007fff; valaddr_reg:x3; val_offset:68496*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68496*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6100ffff; valaddr_reg:x3; val_offset:68499*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68499*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6101ffff; valaddr_reg:x3; val_offset:68502*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68502*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6103ffff; valaddr_reg:x3; val_offset:68505*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68505*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x6107ffff; valaddr_reg:x3; val_offset:68508*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68508*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x610fffff; valaddr_reg:x3; val_offset:68511*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68511*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x611fffff; valaddr_reg:x3; val_offset:68514*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68514*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x613fffff; valaddr_reg:x3; val_offset:68517*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68517*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61400000; valaddr_reg:x3; val_offset:68520*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68520*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61600000; valaddr_reg:x3; val_offset:68523*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68523*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61700000; valaddr_reg:x3; val_offset:68526*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68526*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x61780000; valaddr_reg:x3; val_offset:68529*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68529*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617c0000; valaddr_reg:x3; val_offset:68532*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68532*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617e0000; valaddr_reg:x3; val_offset:68535*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68535*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617f0000; valaddr_reg:x3; val_offset:68538*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68538*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617f8000; valaddr_reg:x3; val_offset:68541*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68541*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fc000; valaddr_reg:x3; val_offset:68544*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68544*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fe000; valaddr_reg:x3; val_offset:68547*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68547*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ff000; valaddr_reg:x3; val_offset:68550*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68550*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ff800; valaddr_reg:x3; val_offset:68553*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68553*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffc00; valaddr_reg:x3; val_offset:68556*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68556*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffe00; valaddr_reg:x3; val_offset:68559*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68559*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fff00; valaddr_reg:x3; val_offset:68562*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68562*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fff80; valaddr_reg:x3; val_offset:68565*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68565*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fffc0; valaddr_reg:x3; val_offset:68568*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68568*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fffe0; valaddr_reg:x3; val_offset:68571*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68571*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffff0; valaddr_reg:x3; val_offset:68574*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68574*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffff8; valaddr_reg:x3; val_offset:68577*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68577*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffffc; valaddr_reg:x3; val_offset:68580*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68580*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617ffffe; valaddr_reg:x3; val_offset:68583*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68583*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xc2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x617fffff; valaddr_reg:x3; val_offset:68586*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68586*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f000001; valaddr_reg:x3; val_offset:68589*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68589*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f000003; valaddr_reg:x3; val_offset:68592*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68592*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f000007; valaddr_reg:x3; val_offset:68595*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68595*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f199999; valaddr_reg:x3; val_offset:68598*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68598*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f249249; valaddr_reg:x3; val_offset:68601*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68601*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f333333; valaddr_reg:x3; val_offset:68604*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68604*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:68607*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68607*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:68610*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68610*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f444444; valaddr_reg:x3; val_offset:68613*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68613*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:68616*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68616*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:68619*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68619*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f666666; valaddr_reg:x3; val_offset:68622*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68622*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:68625*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68625*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:68628*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68628*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:68631*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68631*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x629b09 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x109a88 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee29b09; op2val:0x40109a88;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:68634*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68634*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c000000; valaddr_reg:x3; val_offset:68637*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68637*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c000001; valaddr_reg:x3; val_offset:68640*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68640*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c000003; valaddr_reg:x3; val_offset:68643*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68643*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c000007; valaddr_reg:x3; val_offset:68646*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68646*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c00000f; valaddr_reg:x3; val_offset:68649*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68649*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c00001f; valaddr_reg:x3; val_offset:68652*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68652*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c00003f; valaddr_reg:x3; val_offset:68655*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68655*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c00007f; valaddr_reg:x3; val_offset:68658*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68658*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c0000ff; valaddr_reg:x3; val_offset:68661*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68661*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c0001ff; valaddr_reg:x3; val_offset:68664*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68664*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c0003ff; valaddr_reg:x3; val_offset:68667*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68667*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c0007ff; valaddr_reg:x3; val_offset:68670*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68670*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c000fff; valaddr_reg:x3; val_offset:68673*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68673*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c001fff; valaddr_reg:x3; val_offset:68676*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68676*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c003fff; valaddr_reg:x3; val_offset:68679*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68679*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c007fff; valaddr_reg:x3; val_offset:68682*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68682*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c00ffff; valaddr_reg:x3; val_offset:68685*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68685*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c01ffff; valaddr_reg:x3; val_offset:68688*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68688*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c03ffff; valaddr_reg:x3; val_offset:68691*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68691*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c07ffff; valaddr_reg:x3; val_offset:68694*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68694*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c0fffff; valaddr_reg:x3; val_offset:68697*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68697*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c1fffff; valaddr_reg:x3; val_offset:68700*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68700*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c3fffff; valaddr_reg:x3; val_offset:68703*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68703*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c400000; valaddr_reg:x3; val_offset:68706*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68706*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c600000; valaddr_reg:x3; val_offset:68709*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68709*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c700000; valaddr_reg:x3; val_offset:68712*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68712*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c780000; valaddr_reg:x3; val_offset:68715*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68715*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7c0000; valaddr_reg:x3; val_offset:68718*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68718*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7e0000; valaddr_reg:x3; val_offset:68721*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68721*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7f0000; valaddr_reg:x3; val_offset:68724*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68724*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7f8000; valaddr_reg:x3; val_offset:68727*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68727*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7fc000; valaddr_reg:x3; val_offset:68730*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68730*0 + 3*178*FLEN/8, x4, x1, x2)

inst_22911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x639603 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47fd88 and fs3 == 0 and fe3 == 0x78 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee39603; op2val:0x47fd88;
op3val:0x3c7fe000; valaddr_reg:x3; val_offset:68733*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 68733*0 + 3*178*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50339839,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50348031,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50364415,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50397183,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50462719,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50593791,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50855935,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(51380223,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(52428799,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525951,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525952,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(56623104,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(57671680,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58195968,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58458112,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58589184,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58654720,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58687488,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58703872,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58712064,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58716160,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58718208,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719232,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719744,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720000,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720128,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720192,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720224,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720240,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720248,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720252,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720254,32,FLEN)
NAN_BOXED(2128774586,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720255,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389952,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389953,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389955,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389959,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389967,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627389983,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627390015,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627390079,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627390207,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627390463,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627390975,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627391999,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627394047,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627398143,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627406335,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627422719,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627455487,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627521023,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627652095,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1627914239,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1628438527,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1629487103,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1631584255,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1631584256,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1633681408,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1634729984,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635254272,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635516416,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635647488,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635713024,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635745792,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635762176,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635770368,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635774464,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635776512,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635777536,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778048,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778304,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778432,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778496,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778528,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778544,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778552,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778556,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778558,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(1635778559,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2128780041,32,FLEN)
NAN_BOXED(1074829960,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632960,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632961,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632963,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632967,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632975,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006632991,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006633023,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006633087,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006633215,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006633471,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006633983,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006635007,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006637055,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006641151,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006649343,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006665727,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006698495,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006764031,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1006895103,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1007157247,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1007681535,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1008730111,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1010827263,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1010827264,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1012924416,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1013972992,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1014497280,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1014759424,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1014890496,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1014956032,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1014988800,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1015005184,32,FLEN)
NAN_BOXED(2128844291,32,FLEN)
NAN_BOXED(4717960,32,FLEN)
NAN_BOXED(1015013376,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
