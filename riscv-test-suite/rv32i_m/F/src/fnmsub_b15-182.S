
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_23168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x2cfffff0; valaddr_reg:x3; val_offset:69504*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69504*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x2cfffff8; valaddr_reg:x3; val_offset:69507*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69507*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x2cfffffc; valaddr_reg:x3; val_offset:69510*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69510*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x2cfffffe; valaddr_reg:x3; val_offset:69513*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69513*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x59 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x2cffffff; valaddr_reg:x3; val_offset:69516*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69516*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3f800001; valaddr_reg:x3; val_offset:69519*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69519*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3f800003; valaddr_reg:x3; val_offset:69522*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69522*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3f800007; valaddr_reg:x3; val_offset:69525*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69525*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3f999999; valaddr_reg:x3; val_offset:69528*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69528*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:69531*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69531*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:69534*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69534*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:69537*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69537*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:69540*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69540*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:69543*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69543*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:69546*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69546*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:69549*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69549*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:69552*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69552*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:69555*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69555*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:69558*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69558*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:69561*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69561*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64bacc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x47a162 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4bacc; op2val:0x47a162;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:69564*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69564*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee000000; valaddr_reg:x3; val_offset:69567*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69567*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee000001; valaddr_reg:x3; val_offset:69570*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69570*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee000003; valaddr_reg:x3; val_offset:69573*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69573*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee000007; valaddr_reg:x3; val_offset:69576*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69576*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee00000f; valaddr_reg:x3; val_offset:69579*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69579*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee00001f; valaddr_reg:x3; val_offset:69582*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69582*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee00003f; valaddr_reg:x3; val_offset:69585*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69585*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee00007f; valaddr_reg:x3; val_offset:69588*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69588*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee0000ff; valaddr_reg:x3; val_offset:69591*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69591*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee0001ff; valaddr_reg:x3; val_offset:69594*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69594*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee0003ff; valaddr_reg:x3; val_offset:69597*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69597*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee0007ff; valaddr_reg:x3; val_offset:69600*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69600*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee000fff; valaddr_reg:x3; val_offset:69603*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69603*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee001fff; valaddr_reg:x3; val_offset:69606*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69606*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee003fff; valaddr_reg:x3; val_offset:69609*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69609*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee007fff; valaddr_reg:x3; val_offset:69612*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69612*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee00ffff; valaddr_reg:x3; val_offset:69615*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69615*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee01ffff; valaddr_reg:x3; val_offset:69618*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69618*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee03ffff; valaddr_reg:x3; val_offset:69621*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69621*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee07ffff; valaddr_reg:x3; val_offset:69624*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69624*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee0fffff; valaddr_reg:x3; val_offset:69627*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69627*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee1fffff; valaddr_reg:x3; val_offset:69630*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69630*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee3fffff; valaddr_reg:x3; val_offset:69633*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69633*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee400000; valaddr_reg:x3; val_offset:69636*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69636*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee600000; valaddr_reg:x3; val_offset:69639*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69639*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee700000; valaddr_reg:x3; val_offset:69642*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69642*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee780000; valaddr_reg:x3; val_offset:69645*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69645*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7c0000; valaddr_reg:x3; val_offset:69648*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69648*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7e0000; valaddr_reg:x3; val_offset:69651*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69651*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7f0000; valaddr_reg:x3; val_offset:69654*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69654*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7f8000; valaddr_reg:x3; val_offset:69657*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69657*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fc000; valaddr_reg:x3; val_offset:69660*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69660*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fe000; valaddr_reg:x3; val_offset:69663*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69663*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ff000; valaddr_reg:x3; val_offset:69666*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69666*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ff800; valaddr_reg:x3; val_offset:69669*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69669*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffc00; valaddr_reg:x3; val_offset:69672*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69672*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffe00; valaddr_reg:x3; val_offset:69675*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69675*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fff00; valaddr_reg:x3; val_offset:69678*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69678*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fff80; valaddr_reg:x3; val_offset:69681*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69681*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fffc0; valaddr_reg:x3; val_offset:69684*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69684*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fffe0; valaddr_reg:x3; val_offset:69687*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69687*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffff0; valaddr_reg:x3; val_offset:69690*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69690*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffff8; valaddr_reg:x3; val_offset:69693*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69693*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffffc; valaddr_reg:x3; val_offset:69696*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69696*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7ffffe; valaddr_reg:x3; val_offset:69699*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69699*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xdc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xee7fffff; valaddr_reg:x3; val_offset:69702*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69702*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff000001; valaddr_reg:x3; val_offset:69705*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69705*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff000003; valaddr_reg:x3; val_offset:69708*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69708*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff000007; valaddr_reg:x3; val_offset:69711*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69711*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff199999; valaddr_reg:x3; val_offset:69714*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69714*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff249249; valaddr_reg:x3; val_offset:69717*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69717*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff333333; valaddr_reg:x3; val_offset:69720*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69720*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:69723*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69723*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:69726*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69726*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff444444; valaddr_reg:x3; val_offset:69729*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69729*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:69732*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69732*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:69735*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69735*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff666666; valaddr_reg:x3; val_offset:69738*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69738*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:69741*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69741*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:69744*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69744*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:69747*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69747*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x650bcb and fs2 == 1 and fe2 == 0x80 and fm2 == 0x0f101a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee50bcb; op2val:0xc00f101a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:69750*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69750*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:69753*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69753*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:69756*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69756*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:69759*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69759*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:69762*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69762*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:69765*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69765*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:69768*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69768*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:69771*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69771*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:69774*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69774*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:69777*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69777*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:69780*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69780*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:69783*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69783*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:69786*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69786*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:69789*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69789*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:69792*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69792*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:69795*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69795*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:69798*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69798*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87000000; valaddr_reg:x3; val_offset:69801*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69801*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87000001; valaddr_reg:x3; val_offset:69804*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69804*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87000003; valaddr_reg:x3; val_offset:69807*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69807*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87000007; valaddr_reg:x3; val_offset:69810*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69810*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8700000f; valaddr_reg:x3; val_offset:69813*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69813*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8700001f; valaddr_reg:x3; val_offset:69816*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69816*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8700003f; valaddr_reg:x3; val_offset:69819*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69819*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8700007f; valaddr_reg:x3; val_offset:69822*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69822*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x870000ff; valaddr_reg:x3; val_offset:69825*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69825*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x870001ff; valaddr_reg:x3; val_offset:69828*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69828*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x870003ff; valaddr_reg:x3; val_offset:69831*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69831*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x870007ff; valaddr_reg:x3; val_offset:69834*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69834*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87000fff; valaddr_reg:x3; val_offset:69837*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69837*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87001fff; valaddr_reg:x3; val_offset:69840*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69840*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87003fff; valaddr_reg:x3; val_offset:69843*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69843*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87007fff; valaddr_reg:x3; val_offset:69846*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69846*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8700ffff; valaddr_reg:x3; val_offset:69849*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69849*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8701ffff; valaddr_reg:x3; val_offset:69852*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69852*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8703ffff; valaddr_reg:x3; val_offset:69855*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69855*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x8707ffff; valaddr_reg:x3; val_offset:69858*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69858*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x870fffff; valaddr_reg:x3; val_offset:69861*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69861*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x871fffff; valaddr_reg:x3; val_offset:69864*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69864*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x873fffff; valaddr_reg:x3; val_offset:69867*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69867*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87400000; valaddr_reg:x3; val_offset:69870*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69870*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87600000; valaddr_reg:x3; val_offset:69873*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69873*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87700000; valaddr_reg:x3; val_offset:69876*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69876*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x87780000; valaddr_reg:x3; val_offset:69879*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69879*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x877c0000; valaddr_reg:x3; val_offset:69882*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69882*0 + 3*181*FLEN/8, x4, x1, x2)

inst_23295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x656a07 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee56a07; op2val:0x80000000;
op3val:0x877e0000; valaddr_reg:x3; val_offset:69885*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 69885*0 + 3*181*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(754974704,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(754974712,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(754974716,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(754974718,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(754974719,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2128919244,32,FLEN)
NAN_BOXED(4694370,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977408,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977409,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977411,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977415,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977423,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977439,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977471,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977535,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977663,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992977919,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992978431,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992979455,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992981503,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992985599,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3992993791,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3993010175,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3993042943,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3993108479,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3993239551,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3993501695,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3994025983,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3995074559,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3997171711,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3997171712,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(3999268864,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4000317440,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4000841728,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001103872,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001234944,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001300480,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001333248,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001349632,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001357824,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001361920,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001363968,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001364992,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001365504,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001365760,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001365888,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001365952,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001365984,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001366000,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001366008,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001366012,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001366014,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4001366015,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2128939979,32,FLEN)
NAN_BOXED(3222212634,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924160,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924161,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924163,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924167,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924175,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924191,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924223,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924287,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924415,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924671,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264925183,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264926207,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264928255,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264932351,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264940543,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264956927,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264989695,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265055231,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265186303,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265448447,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2265972735,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2267021311,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118463,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2269118464,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2271215616,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272264192,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2272788480,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273050624,32,FLEN)
NAN_BOXED(2128964103,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2273181696,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
