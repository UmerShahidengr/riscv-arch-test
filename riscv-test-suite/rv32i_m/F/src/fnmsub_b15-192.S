
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3607ffff; valaddr_reg:x3; val_offset:73344*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73344*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x360fffff; valaddr_reg:x3; val_offset:73347*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73347*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x361fffff; valaddr_reg:x3; val_offset:73350*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73350*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x363fffff; valaddr_reg:x3; val_offset:73353*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73353*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x36400000; valaddr_reg:x3; val_offset:73356*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73356*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x36600000; valaddr_reg:x3; val_offset:73359*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73359*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x36700000; valaddr_reg:x3; val_offset:73362*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73362*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x36780000; valaddr_reg:x3; val_offset:73365*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73365*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367c0000; valaddr_reg:x3; val_offset:73368*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73368*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367e0000; valaddr_reg:x3; val_offset:73371*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73371*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367f0000; valaddr_reg:x3; val_offset:73374*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73374*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367f8000; valaddr_reg:x3; val_offset:73377*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73377*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fc000; valaddr_reg:x3; val_offset:73380*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73380*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fe000; valaddr_reg:x3; val_offset:73383*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73383*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ff000; valaddr_reg:x3; val_offset:73386*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73386*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ff800; valaddr_reg:x3; val_offset:73389*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73389*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffc00; valaddr_reg:x3; val_offset:73392*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73392*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffe00; valaddr_reg:x3; val_offset:73395*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73395*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fff00; valaddr_reg:x3; val_offset:73398*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73398*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fff80; valaddr_reg:x3; val_offset:73401*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73401*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fffc0; valaddr_reg:x3; val_offset:73404*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73404*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fffe0; valaddr_reg:x3; val_offset:73407*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73407*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffff0; valaddr_reg:x3; val_offset:73410*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73410*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffff8; valaddr_reg:x3; val_offset:73413*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73413*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffffc; valaddr_reg:x3; val_offset:73416*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73416*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367ffffe; valaddr_reg:x3; val_offset:73419*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73419*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x6c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x367fffff; valaddr_reg:x3; val_offset:73422*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73422*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:73425*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73425*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:73428*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73428*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:73431*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73431*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:73434*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73434*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:73437*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73437*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:73440*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73440*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:73443*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73443*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:73446*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73446*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:73449*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73449*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:73452*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73452*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:73455*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73455*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:73458*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73458*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:73461*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73461*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:73464*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73464*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:73467*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73467*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x70e623 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x44030c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef0e623; op2val:0x44030c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:73470*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73470*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc800000; valaddr_reg:x3; val_offset:73473*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73473*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc800001; valaddr_reg:x3; val_offset:73476*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73476*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc800003; valaddr_reg:x3; val_offset:73479*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73479*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc800007; valaddr_reg:x3; val_offset:73482*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73482*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc80000f; valaddr_reg:x3; val_offset:73485*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73485*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc80001f; valaddr_reg:x3; val_offset:73488*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73488*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc80003f; valaddr_reg:x3; val_offset:73491*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73491*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc80007f; valaddr_reg:x3; val_offset:73494*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73494*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc8000ff; valaddr_reg:x3; val_offset:73497*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73497*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc8001ff; valaddr_reg:x3; val_offset:73500*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73500*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc8003ff; valaddr_reg:x3; val_offset:73503*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73503*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc8007ff; valaddr_reg:x3; val_offset:73506*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73506*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc800fff; valaddr_reg:x3; val_offset:73509*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73509*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc801fff; valaddr_reg:x3; val_offset:73512*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73512*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc803fff; valaddr_reg:x3; val_offset:73515*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73515*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc807fff; valaddr_reg:x3; val_offset:73518*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73518*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc80ffff; valaddr_reg:x3; val_offset:73521*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73521*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc81ffff; valaddr_reg:x3; val_offset:73524*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73524*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc83ffff; valaddr_reg:x3; val_offset:73527*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73527*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc87ffff; valaddr_reg:x3; val_offset:73530*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73530*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc8fffff; valaddr_reg:x3; val_offset:73533*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73533*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbc9fffff; valaddr_reg:x3; val_offset:73536*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73536*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcbfffff; valaddr_reg:x3; val_offset:73539*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73539*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcc00000; valaddr_reg:x3; val_offset:73542*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73542*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbce00000; valaddr_reg:x3; val_offset:73545*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73545*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcf00000; valaddr_reg:x3; val_offset:73548*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73548*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcf80000; valaddr_reg:x3; val_offset:73551*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73551*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfc0000; valaddr_reg:x3; val_offset:73554*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73554*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfe0000; valaddr_reg:x3; val_offset:73557*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73557*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcff0000; valaddr_reg:x3; val_offset:73560*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73560*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcff8000; valaddr_reg:x3; val_offset:73563*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73563*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffc000; valaddr_reg:x3; val_offset:73566*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73566*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffe000; valaddr_reg:x3; val_offset:73569*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73569*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfff000; valaddr_reg:x3; val_offset:73572*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73572*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfff800; valaddr_reg:x3; val_offset:73575*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73575*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffc00; valaddr_reg:x3; val_offset:73578*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73578*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffe00; valaddr_reg:x3; val_offset:73581*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73581*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffff00; valaddr_reg:x3; val_offset:73584*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73584*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffff80; valaddr_reg:x3; val_offset:73587*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73587*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffffc0; valaddr_reg:x3; val_offset:73590*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73590*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffffe0; valaddr_reg:x3; val_offset:73593*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73593*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffff0; valaddr_reg:x3; val_offset:73596*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73596*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffff8; valaddr_reg:x3; val_offset:73599*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73599*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffffc; valaddr_reg:x3; val_offset:73602*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73602*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcfffffe; valaddr_reg:x3; val_offset:73605*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73605*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x79 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbcffffff; valaddr_reg:x3; val_offset:73608*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73608*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbf800001; valaddr_reg:x3; val_offset:73611*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73611*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbf800003; valaddr_reg:x3; val_offset:73614*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73614*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbf800007; valaddr_reg:x3; val_offset:73617*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73617*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbf999999; valaddr_reg:x3; val_offset:73620*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73620*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:73623*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73623*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:73626*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73626*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:73629*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73629*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:73632*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73632*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:73635*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73635*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:73638*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73638*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:73641*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73641*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:73644*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73644*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:73647*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73647*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:73650*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73650*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:73653*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73653*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x716299 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x43dffb and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef16299; op2val:0x8043dffb;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:73656*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73656*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:73659*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73659*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:73662*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73662*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:73665*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73665*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:73668*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73668*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:73671*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73671*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:73674*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73674*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:73677*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73677*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:73680*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73680*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:73683*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73683*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:73686*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73686*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:73689*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73689*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:73692*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73692*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:73695*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73695*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:73698*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73698*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:73701*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73701*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:73704*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73704*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:73707*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73707*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:73710*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73710*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:73713*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73713*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:73716*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73716*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:73719*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73719*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:73722*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73722*0 + 3*191*FLEN/8, x4, x1, x2)

inst_24575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x724276 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef24276; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:73725*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 73725*0 + 3*191*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(906493951,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(907018239,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(908066815,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(910163967,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(910163968,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(912261120,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(913309696,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(913833984,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914096128,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914227200,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914292736,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914325504,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914341888,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914350080,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914354176,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914356224,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914357248,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914357760,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358016,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358144,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358208,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358240,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358256,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358264,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358268,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358270,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(914358271,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2129716771,32,FLEN)
NAN_BOXED(4457228,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505216,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505217,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505219,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505223,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505231,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505247,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505279,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505343,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505471,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162505727,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162506239,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162507263,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162509311,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162513407,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162521599,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162537983,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162570751,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162636287,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3162767359,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3163029503,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3163553791,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3164602367,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3166699519,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3166699520,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3168796672,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3169845248,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170369536,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170631680,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170762752,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170828288,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170861056,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170877440,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170885632,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170889728,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170891776,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170892800,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893312,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893568,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893696,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893760,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893792,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893808,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893816,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893820,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893822,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3170893823,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2129748633,32,FLEN)
NAN_BOXED(2151931899,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2129805942,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
