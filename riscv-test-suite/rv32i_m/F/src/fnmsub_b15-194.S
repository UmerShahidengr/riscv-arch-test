
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727c0000; valaddr_reg:x3; val_offset:74112*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74112*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727e0000; valaddr_reg:x3; val_offset:74115*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74115*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727f0000; valaddr_reg:x3; val_offset:74118*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74118*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727f8000; valaddr_reg:x3; val_offset:74121*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74121*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fc000; valaddr_reg:x3; val_offset:74124*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74124*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fe000; valaddr_reg:x3; val_offset:74127*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74127*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ff000; valaddr_reg:x3; val_offset:74130*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74130*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ff800; valaddr_reg:x3; val_offset:74133*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74133*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffc00; valaddr_reg:x3; val_offset:74136*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74136*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffe00; valaddr_reg:x3; val_offset:74139*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74139*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fff00; valaddr_reg:x3; val_offset:74142*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74142*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fff80; valaddr_reg:x3; val_offset:74145*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74145*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fffc0; valaddr_reg:x3; val_offset:74148*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74148*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fffe0; valaddr_reg:x3; val_offset:74151*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74151*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffff0; valaddr_reg:x3; val_offset:74154*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74154*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffff8; valaddr_reg:x3; val_offset:74157*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74157*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffffc; valaddr_reg:x3; val_offset:74160*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74160*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727ffffe; valaddr_reg:x3; val_offset:74163*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74163*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xe4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x727fffff; valaddr_reg:x3; val_offset:74166*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74166*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f000001; valaddr_reg:x3; val_offset:74169*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74169*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f000003; valaddr_reg:x3; val_offset:74172*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74172*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f000007; valaddr_reg:x3; val_offset:74175*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74175*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f199999; valaddr_reg:x3; val_offset:74178*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74178*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f249249; valaddr_reg:x3; val_offset:74181*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74181*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f333333; valaddr_reg:x3; val_offset:74184*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74184*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:74187*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74187*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:74190*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74190*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f444444; valaddr_reg:x3; val_offset:74193*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74193*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:74196*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74196*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:74199*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74199*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f666666; valaddr_reg:x3; val_offset:74202*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74202*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:74205*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74205*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:74208*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74208*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:74211*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74211*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7378a9 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x069630 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef378a9; op2val:0x40069630;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:74214*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74214*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3f800001; valaddr_reg:x3; val_offset:74217*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74217*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3f800003; valaddr_reg:x3; val_offset:74220*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74220*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3f800007; valaddr_reg:x3; val_offset:74223*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74223*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3f999999; valaddr_reg:x3; val_offset:74226*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74226*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:74229*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74229*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:74232*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74232*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:74235*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74235*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:74238*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74238*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:74241*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74241*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:74244*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74244*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:74247*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74247*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:74250*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74250*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:74253*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74253*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:74256*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74256*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:74259*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74259*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:74262*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74262*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f800000; valaddr_reg:x3; val_offset:74265*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74265*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f800001; valaddr_reg:x3; val_offset:74268*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74268*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f800003; valaddr_reg:x3; val_offset:74271*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74271*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f800007; valaddr_reg:x3; val_offset:74274*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74274*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f80000f; valaddr_reg:x3; val_offset:74277*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74277*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f80001f; valaddr_reg:x3; val_offset:74280*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74280*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f80003f; valaddr_reg:x3; val_offset:74283*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74283*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f80007f; valaddr_reg:x3; val_offset:74286*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74286*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f8000ff; valaddr_reg:x3; val_offset:74289*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74289*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f8001ff; valaddr_reg:x3; val_offset:74292*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74292*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f8003ff; valaddr_reg:x3; val_offset:74295*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74295*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f8007ff; valaddr_reg:x3; val_offset:74298*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74298*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f800fff; valaddr_reg:x3; val_offset:74301*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74301*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f801fff; valaddr_reg:x3; val_offset:74304*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74304*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f803fff; valaddr_reg:x3; val_offset:74307*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74307*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f807fff; valaddr_reg:x3; val_offset:74310*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74310*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f80ffff; valaddr_reg:x3; val_offset:74313*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74313*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f81ffff; valaddr_reg:x3; val_offset:74316*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74316*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f83ffff; valaddr_reg:x3; val_offset:74319*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74319*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f87ffff; valaddr_reg:x3; val_offset:74322*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74322*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f8fffff; valaddr_reg:x3; val_offset:74325*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74325*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4f9fffff; valaddr_reg:x3; val_offset:74328*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74328*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fbfffff; valaddr_reg:x3; val_offset:74331*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74331*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fc00000; valaddr_reg:x3; val_offset:74334*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74334*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fe00000; valaddr_reg:x3; val_offset:74337*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74337*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ff00000; valaddr_reg:x3; val_offset:74340*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74340*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ff80000; valaddr_reg:x3; val_offset:74343*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74343*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffc0000; valaddr_reg:x3; val_offset:74346*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74346*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffe0000; valaddr_reg:x3; val_offset:74349*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74349*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fff0000; valaddr_reg:x3; val_offset:74352*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74352*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fff8000; valaddr_reg:x3; val_offset:74355*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74355*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffc000; valaddr_reg:x3; val_offset:74358*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74358*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffe000; valaddr_reg:x3; val_offset:74361*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74361*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffff000; valaddr_reg:x3; val_offset:74364*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74364*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffff800; valaddr_reg:x3; val_offset:74367*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74367*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffc00; valaddr_reg:x3; val_offset:74370*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74370*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffe00; valaddr_reg:x3; val_offset:74373*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74373*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffff00; valaddr_reg:x3; val_offset:74376*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74376*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffff80; valaddr_reg:x3; val_offset:74379*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74379*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffffc0; valaddr_reg:x3; val_offset:74382*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74382*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffffe0; valaddr_reg:x3; val_offset:74385*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74385*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffff0; valaddr_reg:x3; val_offset:74388*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74388*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffff8; valaddr_reg:x3; val_offset:74391*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74391*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffffc; valaddr_reg:x3; val_offset:74394*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74394*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4ffffffe; valaddr_reg:x3; val_offset:74397*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74397*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7680ff and fs2 == 0 and fe2 == 0x00 and fm2 == 0x427729 and fs3 == 0 and fe3 == 0x9f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef680ff; op2val:0x427729;
op3val:0x4fffffff; valaddr_reg:x3; val_offset:74400*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74400*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c000000; valaddr_reg:x3; val_offset:74403*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74403*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c000001; valaddr_reg:x3; val_offset:74406*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74406*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c000003; valaddr_reg:x3; val_offset:74409*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74409*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c000007; valaddr_reg:x3; val_offset:74412*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74412*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c00000f; valaddr_reg:x3; val_offset:74415*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74415*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c00001f; valaddr_reg:x3; val_offset:74418*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74418*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c00003f; valaddr_reg:x3; val_offset:74421*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74421*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c00007f; valaddr_reg:x3; val_offset:74424*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74424*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c0000ff; valaddr_reg:x3; val_offset:74427*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74427*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c0001ff; valaddr_reg:x3; val_offset:74430*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74430*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c0003ff; valaddr_reg:x3; val_offset:74433*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74433*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c0007ff; valaddr_reg:x3; val_offset:74436*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74436*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c000fff; valaddr_reg:x3; val_offset:74439*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74439*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c001fff; valaddr_reg:x3; val_offset:74442*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74442*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c003fff; valaddr_reg:x3; val_offset:74445*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74445*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c007fff; valaddr_reg:x3; val_offset:74448*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74448*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c00ffff; valaddr_reg:x3; val_offset:74451*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74451*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c01ffff; valaddr_reg:x3; val_offset:74454*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74454*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c03ffff; valaddr_reg:x3; val_offset:74457*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74457*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c07ffff; valaddr_reg:x3; val_offset:74460*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74460*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c0fffff; valaddr_reg:x3; val_offset:74463*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74463*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c1fffff; valaddr_reg:x3; val_offset:74466*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74466*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c3fffff; valaddr_reg:x3; val_offset:74469*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74469*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c400000; valaddr_reg:x3; val_offset:74472*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74472*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c600000; valaddr_reg:x3; val_offset:74475*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74475*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c700000; valaddr_reg:x3; val_offset:74478*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74478*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c780000; valaddr_reg:x3; val_offset:74481*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74481*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7c0000; valaddr_reg:x3; val_offset:74484*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74484*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7e0000; valaddr_reg:x3; val_offset:74487*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74487*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7f0000; valaddr_reg:x3; val_offset:74490*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74490*0 + 3*193*FLEN/8, x4, x1, x2)

inst_24831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7f8000; valaddr_reg:x3; val_offset:74493*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74493*0 + 3*193*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920729088,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920860160,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920925696,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920958464,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920974848,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920983040,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920987136,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920989184,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920990208,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920990720,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920990976,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991104,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991168,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991200,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991216,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991224,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991228,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991230,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(1920991231,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2129885353,32,FLEN)
NAN_BOXED(1074173488,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788672,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788673,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788675,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788679,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788687,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788703,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788735,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788799,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333788927,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333789183,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333789695,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333790719,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333792767,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333796863,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333805055,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333821439,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333854207,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1333919743,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1334050815,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1334312959,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1334837247,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1335885823,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1337982975,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1337982976,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1340080128,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1341128704,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1341652992,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1341915136,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342046208,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342111744,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342144512,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342160896,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342169088,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342173184,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342175232,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342176256,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342176768,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177024,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177152,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177216,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177248,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177264,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177272,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177276,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177278,32,FLEN)
NAN_BOXED(2130084095,32,FLEN)
NAN_BOXED(4355881,32,FLEN)
NAN_BOXED(1342177279,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197504,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197505,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197507,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197511,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197519,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197535,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197567,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197631,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738197759,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738198015,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738198527,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738199551,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738201599,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738205695,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738213887,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738230271,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738263039,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738328575,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738459647,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(738721791,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(739246079,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(740294655,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(742391807,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(742391808,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(744488960,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(745537536,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746061824,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746323968,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746455040,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746520576,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746553344,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
