
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fc000; valaddr_reg:x3; val_offset:74496*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74496*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fe000; valaddr_reg:x3; val_offset:74499*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74499*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ff000; valaddr_reg:x3; val_offset:74502*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74502*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ff800; valaddr_reg:x3; val_offset:74505*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74505*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffc00; valaddr_reg:x3; val_offset:74508*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74508*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffe00; valaddr_reg:x3; val_offset:74511*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74511*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fff00; valaddr_reg:x3; val_offset:74514*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74514*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fff80; valaddr_reg:x3; val_offset:74517*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74517*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fffc0; valaddr_reg:x3; val_offset:74520*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74520*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fffe0; valaddr_reg:x3; val_offset:74523*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74523*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffff0; valaddr_reg:x3; val_offset:74526*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74526*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffff8; valaddr_reg:x3; val_offset:74529*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74529*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffffc; valaddr_reg:x3; val_offset:74532*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74532*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7ffffe; valaddr_reg:x3; val_offset:74535*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74535*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x2c7fffff; valaddr_reg:x3; val_offset:74538*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74538*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3f800001; valaddr_reg:x3; val_offset:74541*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74541*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3f800003; valaddr_reg:x3; val_offset:74544*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74544*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3f800007; valaddr_reg:x3; val_offset:74547*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74547*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3f999999; valaddr_reg:x3; val_offset:74550*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74550*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:74553*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74553*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:74556*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74556*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:74559*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74559*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:74562*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74562*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:74565*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74565*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:74568*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74568*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:74571*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74571*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:74574*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74574*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:74577*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74577*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:74580*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74580*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:74583*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74583*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7740d5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x424398 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef740d5; op2val:0x424398;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:74586*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74586*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:74589*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74589*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:74592*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74592*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:74595*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74595*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:74598*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74598*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:74601*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74601*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:74604*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74604*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:74607*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74607*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:74610*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74610*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:74613*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74613*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:74616*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74616*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:74619*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74619*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:74622*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74622*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:74625*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74625*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:74628*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74628*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:74631*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74631*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:74634*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74634*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:74637*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74637*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:74640*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74640*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:74643*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74643*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:74646*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74646*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:74649*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74649*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:74652*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74652*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:74655*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74655*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:74658*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74658*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:74661*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74661*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:74664*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74664*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:74667*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74667*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:74670*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74670*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:74673*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74673*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:74676*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74676*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4803fff; valaddr_reg:x3; val_offset:74679*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74679*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4807fff; valaddr_reg:x3; val_offset:74682*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74682*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x480ffff; valaddr_reg:x3; val_offset:74685*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74685*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x481ffff; valaddr_reg:x3; val_offset:74688*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74688*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x483ffff; valaddr_reg:x3; val_offset:74691*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74691*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x487ffff; valaddr_reg:x3; val_offset:74694*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74694*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x48fffff; valaddr_reg:x3; val_offset:74697*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74697*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x49fffff; valaddr_reg:x3; val_offset:74700*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74700*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4bfffff; valaddr_reg:x3; val_offset:74703*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74703*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4c00000; valaddr_reg:x3; val_offset:74706*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74706*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4e00000; valaddr_reg:x3; val_offset:74709*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74709*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4f00000; valaddr_reg:x3; val_offset:74712*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74712*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4f80000; valaddr_reg:x3; val_offset:74715*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74715*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fc0000; valaddr_reg:x3; val_offset:74718*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74718*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fe0000; valaddr_reg:x3; val_offset:74721*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74721*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ff0000; valaddr_reg:x3; val_offset:74724*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74724*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ff8000; valaddr_reg:x3; val_offset:74727*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74727*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffc000; valaddr_reg:x3; val_offset:74730*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74730*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffe000; valaddr_reg:x3; val_offset:74733*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74733*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fff000; valaddr_reg:x3; val_offset:74736*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74736*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fff800; valaddr_reg:x3; val_offset:74739*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74739*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffc00; valaddr_reg:x3; val_offset:74742*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74742*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffe00; valaddr_reg:x3; val_offset:74745*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74745*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffff00; valaddr_reg:x3; val_offset:74748*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74748*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffff80; valaddr_reg:x3; val_offset:74751*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74751*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffffc0; valaddr_reg:x3; val_offset:74754*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74754*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffffe0; valaddr_reg:x3; val_offset:74757*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74757*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffff0; valaddr_reg:x3; val_offset:74760*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74760*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffff8; valaddr_reg:x3; val_offset:74763*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74763*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffffc; valaddr_reg:x3; val_offset:74766*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74766*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4fffffe; valaddr_reg:x3; val_offset:74769*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74769*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77699b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7699b; op2val:0x0;
op3val:0x4ffffff; valaddr_reg:x3; val_offset:74772*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74772*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:74775*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74775*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:74778*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74778*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:74781*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74781*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:74784*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74784*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:74787*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74787*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:74790*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74790*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:74793*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74793*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:74796*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74796*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:74799*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74799*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:74802*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74802*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:74805*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74805*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:74808*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74808*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:74811*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74811*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:74814*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74814*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:74817*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74817*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:74820*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74820*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:74823*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74823*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:74826*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74826*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:74829*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74829*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:74832*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74832*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:74835*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74835*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:74838*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74838*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:74841*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74841*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:74844*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74844*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:74847*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74847*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x820001ff; valaddr_reg:x3; val_offset:74850*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74850*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x820003ff; valaddr_reg:x3; val_offset:74853*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74853*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x820007ff; valaddr_reg:x3; val_offset:74856*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74856*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82000fff; valaddr_reg:x3; val_offset:74859*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74859*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82001fff; valaddr_reg:x3; val_offset:74862*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74862*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82003fff; valaddr_reg:x3; val_offset:74865*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74865*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82007fff; valaddr_reg:x3; val_offset:74868*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74868*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8200ffff; valaddr_reg:x3; val_offset:74871*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74871*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8201ffff; valaddr_reg:x3; val_offset:74874*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74874*0 + 3*194*FLEN/8, x4, x1, x2)

inst_24959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8203ffff; valaddr_reg:x3; val_offset:74877*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74877*0 + 3*194*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746569728,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746577920,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746582016,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746584064,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746585088,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746585600,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746585856,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746585984,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586048,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586080,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586096,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586104,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586108,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586110,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(746586111,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130133205,32,FLEN)
NAN_BOXED(4342680,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75513855,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75530239,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75563007,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75628543,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75759615,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76021759,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(76546047,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(77594623,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691775,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(79691776,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(81788928,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(82837504,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83361792,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83623936,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83755008,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83820544,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83853312,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83869696,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83877888,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83881984,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83884032,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885056,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885568,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885824,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83885952,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886016,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886048,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886064,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886072,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886076,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886078,32,FLEN)
NAN_BOXED(2130143643,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886079,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038591,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181039103,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181040127,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181042175,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181046271,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181054463,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181070847,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181103615,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181169151,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181300223,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
