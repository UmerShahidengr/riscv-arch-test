
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_24960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x8207ffff; valaddr_reg:x3; val_offset:74880*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74880*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x820fffff; valaddr_reg:x3; val_offset:74883*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74883*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x821fffff; valaddr_reg:x3; val_offset:74886*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74886*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x823fffff; valaddr_reg:x3; val_offset:74889*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74889*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82400000; valaddr_reg:x3; val_offset:74892*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74892*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82600000; valaddr_reg:x3; val_offset:74895*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74895*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82700000; valaddr_reg:x3; val_offset:74898*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74898*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x82780000; valaddr_reg:x3; val_offset:74901*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74901*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827c0000; valaddr_reg:x3; val_offset:74904*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74904*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827e0000; valaddr_reg:x3; val_offset:74907*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74907*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827f0000; valaddr_reg:x3; val_offset:74910*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74910*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827f8000; valaddr_reg:x3; val_offset:74913*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74913*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fc000; valaddr_reg:x3; val_offset:74916*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74916*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fe000; valaddr_reg:x3; val_offset:74919*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74919*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ff000; valaddr_reg:x3; val_offset:74922*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74922*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ff800; valaddr_reg:x3; val_offset:74925*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74925*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffc00; valaddr_reg:x3; val_offset:74928*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74928*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffe00; valaddr_reg:x3; val_offset:74931*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74931*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fff00; valaddr_reg:x3; val_offset:74934*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74934*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fff80; valaddr_reg:x3; val_offset:74937*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74937*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fffc0; valaddr_reg:x3; val_offset:74940*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74940*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fffe0; valaddr_reg:x3; val_offset:74943*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74943*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffff0; valaddr_reg:x3; val_offset:74946*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74946*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffff8; valaddr_reg:x3; val_offset:74949*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74949*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffffc; valaddr_reg:x3; val_offset:74952*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74952*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827ffffe; valaddr_reg:x3; val_offset:74955*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74955*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x77efb9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef7efb9; op2val:0x80000000;
op3val:0x827fffff; valaddr_reg:x3; val_offset:74958*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74958*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbf800001; valaddr_reg:x3; val_offset:74961*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74961*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbf800003; valaddr_reg:x3; val_offset:74964*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74964*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbf800007; valaddr_reg:x3; val_offset:74967*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74967*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbf999999; valaddr_reg:x3; val_offset:74970*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74970*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:74973*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74973*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:74976*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74976*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:74979*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74979*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:74982*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74982*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:74985*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74985*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:74988*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74988*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:74991*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74991*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:74994*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74994*0 + 3*195*FLEN/8, x4, x1, x2)

inst_24999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:74997*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 74997*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:75000*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75000*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:75003*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75003*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:75006*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75006*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7000000; valaddr_reg:x3; val_offset:75009*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75009*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7000001; valaddr_reg:x3; val_offset:75012*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75012*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7000003; valaddr_reg:x3; val_offset:75015*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75015*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7000007; valaddr_reg:x3; val_offset:75018*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75018*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc700000f; valaddr_reg:x3; val_offset:75021*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75021*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc700001f; valaddr_reg:x3; val_offset:75024*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75024*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc700003f; valaddr_reg:x3; val_offset:75027*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75027*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc700007f; valaddr_reg:x3; val_offset:75030*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75030*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc70000ff; valaddr_reg:x3; val_offset:75033*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75033*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc70001ff; valaddr_reg:x3; val_offset:75036*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75036*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc70003ff; valaddr_reg:x3; val_offset:75039*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75039*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc70007ff; valaddr_reg:x3; val_offset:75042*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75042*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7000fff; valaddr_reg:x3; val_offset:75045*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75045*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7001fff; valaddr_reg:x3; val_offset:75048*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75048*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7003fff; valaddr_reg:x3; val_offset:75051*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75051*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7007fff; valaddr_reg:x3; val_offset:75054*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75054*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc700ffff; valaddr_reg:x3; val_offset:75057*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75057*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc701ffff; valaddr_reg:x3; val_offset:75060*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75060*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc703ffff; valaddr_reg:x3; val_offset:75063*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75063*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc707ffff; valaddr_reg:x3; val_offset:75066*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75066*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc70fffff; valaddr_reg:x3; val_offset:75069*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75069*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc71fffff; valaddr_reg:x3; val_offset:75072*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75072*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc73fffff; valaddr_reg:x3; val_offset:75075*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75075*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7400000; valaddr_reg:x3; val_offset:75078*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75078*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7600000; valaddr_reg:x3; val_offset:75081*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75081*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7700000; valaddr_reg:x3; val_offset:75084*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75084*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc7780000; valaddr_reg:x3; val_offset:75087*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75087*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77c0000; valaddr_reg:x3; val_offset:75090*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75090*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77e0000; valaddr_reg:x3; val_offset:75093*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75093*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77f0000; valaddr_reg:x3; val_offset:75096*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75096*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77f8000; valaddr_reg:x3; val_offset:75099*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75099*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fc000; valaddr_reg:x3; val_offset:75102*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75102*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fe000; valaddr_reg:x3; val_offset:75105*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75105*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ff000; valaddr_reg:x3; val_offset:75108*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75108*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ff800; valaddr_reg:x3; val_offset:75111*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75111*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffc00; valaddr_reg:x3; val_offset:75114*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75114*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffe00; valaddr_reg:x3; val_offset:75117*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75117*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fff00; valaddr_reg:x3; val_offset:75120*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75120*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fff80; valaddr_reg:x3; val_offset:75123*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75123*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fffc0; valaddr_reg:x3; val_offset:75126*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75126*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fffe0; valaddr_reg:x3; val_offset:75129*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75129*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffff0; valaddr_reg:x3; val_offset:75132*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75132*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffff8; valaddr_reg:x3; val_offset:75135*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75135*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffffc; valaddr_reg:x3; val_offset:75138*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75138*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77ffffe; valaddr_reg:x3; val_offset:75141*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75141*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x786a31 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x41f446 and fs3 == 1 and fe3 == 0x8e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef86a31; op2val:0x8041f446;
op3val:0xc77fffff; valaddr_reg:x3; val_offset:75144*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75144*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:75147*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75147*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:75150*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75150*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:75153*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75153*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:75156*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75156*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:75159*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75159*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:75162*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75162*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:75165*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75165*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:75168*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75168*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:75171*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75171*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:75174*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75174*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:75177*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75177*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:75180*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75180*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:75183*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75183*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:75186*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75186*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:75189*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75189*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:75192*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75192*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:75195*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75195*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:75198*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75198*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:75201*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75201*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:75204*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75204*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:75207*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75207*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:75210*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75210*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:75213*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75213*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:75216*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75216*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:75219*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75219*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:75222*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75222*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:75225*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75225*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:75228*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75228*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:75231*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75231*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:75234*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75234*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:75237*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75237*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:75240*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75240*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:75243*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75243*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:75246*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75246*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:75249*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75249*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:75252*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75252*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:75255*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75255*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:75258*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75258*0 + 3*195*FLEN/8, x4, x1, x2)

inst_25087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x78a28a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef8a28a; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:75261*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75261*0 + 3*195*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181562367,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2182086655,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2183135231,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232383,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2185232384,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2187329536,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188378112,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2188902400,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189164544,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189295616,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189361152,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189393920,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189410304,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189418496,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189422592,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189424640,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189425664,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426176,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426432,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426560,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426624,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426656,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426672,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426680,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426684,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426686,32,FLEN)
NAN_BOXED(2130177977,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426687,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338665984,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338665985,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338665987,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338665991,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338665999,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338666015,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338666047,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338666111,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338666239,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338666495,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338667007,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338668031,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338670079,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338674175,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338682367,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338698751,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338731519,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338797055,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3338928127,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3339190271,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3339714559,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3340763135,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3342860287,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3342860288,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3344957440,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3346006016,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3346530304,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3346792448,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3346923520,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3346989056,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347021824,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347038208,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347046400,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347050496,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347052544,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347053568,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054080,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054336,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054464,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054528,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054560,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054576,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054584,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054588,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054590,32,FLEN)
NAN_BOXED(2130209329,32,FLEN)
NAN_BOXED(2151806022,32,FLEN)
NAN_BOXED(3347054591,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2130223754,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
