
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fc0000; valaddr_reg:x3; val_offset:75648*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75648*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fe0000; valaddr_reg:x3; val_offset:75651*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75651*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ff0000; valaddr_reg:x3; val_offset:75654*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75654*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ff8000; valaddr_reg:x3; val_offset:75657*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75657*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffc000; valaddr_reg:x3; val_offset:75660*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75660*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffe000; valaddr_reg:x3; val_offset:75663*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75663*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fff000; valaddr_reg:x3; val_offset:75666*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75666*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fff800; valaddr_reg:x3; val_offset:75669*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75669*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffc00; valaddr_reg:x3; val_offset:75672*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75672*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffe00; valaddr_reg:x3; val_offset:75675*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75675*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffff00; valaddr_reg:x3; val_offset:75678*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75678*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffff80; valaddr_reg:x3; val_offset:75681*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75681*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffffc0; valaddr_reg:x3; val_offset:75684*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75684*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffffe0; valaddr_reg:x3; val_offset:75687*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75687*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffff0; valaddr_reg:x3; val_offset:75690*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75690*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffff8; valaddr_reg:x3; val_offset:75693*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75693*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffffc; valaddr_reg:x3; val_offset:75696*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75696*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49fffffe; valaddr_reg:x3; val_offset:75699*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75699*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x79b070 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x419e19 and fs3 == 0 and fe3 == 0x93 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef9b070; op2val:0x419e19;
op3val:0x49ffffff; valaddr_reg:x3; val_offset:75702*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75702*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:75705*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75705*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:75708*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75708*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:75711*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75711*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:75714*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75714*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:75717*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75717*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:75720*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75720*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:75723*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75723*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:75726*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75726*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:75729*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75729*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:75732*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75732*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:75735*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75735*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:75738*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75738*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:75741*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75741*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:75744*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75744*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:75747*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75747*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:75750*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75750*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84000000; valaddr_reg:x3; val_offset:75753*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75753*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84000001; valaddr_reg:x3; val_offset:75756*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75756*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84000003; valaddr_reg:x3; val_offset:75759*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75759*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84000007; valaddr_reg:x3; val_offset:75762*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75762*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8400000f; valaddr_reg:x3; val_offset:75765*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75765*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8400001f; valaddr_reg:x3; val_offset:75768*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75768*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8400003f; valaddr_reg:x3; val_offset:75771*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75771*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8400007f; valaddr_reg:x3; val_offset:75774*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75774*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x840000ff; valaddr_reg:x3; val_offset:75777*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75777*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x840001ff; valaddr_reg:x3; val_offset:75780*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75780*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x840003ff; valaddr_reg:x3; val_offset:75783*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75783*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x840007ff; valaddr_reg:x3; val_offset:75786*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75786*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84000fff; valaddr_reg:x3; val_offset:75789*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75789*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84001fff; valaddr_reg:x3; val_offset:75792*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75792*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84003fff; valaddr_reg:x3; val_offset:75795*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75795*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84007fff; valaddr_reg:x3; val_offset:75798*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75798*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8400ffff; valaddr_reg:x3; val_offset:75801*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75801*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8401ffff; valaddr_reg:x3; val_offset:75804*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75804*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8403ffff; valaddr_reg:x3; val_offset:75807*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75807*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x8407ffff; valaddr_reg:x3; val_offset:75810*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75810*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x840fffff; valaddr_reg:x3; val_offset:75813*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75813*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x841fffff; valaddr_reg:x3; val_offset:75816*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75816*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:75819*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75819*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:75822*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75822*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:75825*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75825*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:75828*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75828*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:75831*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75831*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:75834*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75834*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:75837*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75837*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:75840*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75840*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:75843*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75843*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:75846*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75846*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:75849*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75849*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:75852*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75852*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:75855*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75855*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:75858*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75858*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:75861*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75861*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25288:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:75864*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75864*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25289:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:75867*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75867*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25290:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:75870*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75870*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25291:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:75873*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75873*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25292:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:75876*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75876*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25293:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:75879*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75879*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25294:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:75882*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75882*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25295:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:75885*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75885*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25296:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba99e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba99e; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:75888*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75888*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25297:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79000000; valaddr_reg:x3; val_offset:75891*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75891*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25298:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79000001; valaddr_reg:x3; val_offset:75894*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75894*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25299:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79000003; valaddr_reg:x3; val_offset:75897*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75897*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25300:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79000007; valaddr_reg:x3; val_offset:75900*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75900*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25301:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7900000f; valaddr_reg:x3; val_offset:75903*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75903*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25302:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7900001f; valaddr_reg:x3; val_offset:75906*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75906*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25303:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7900003f; valaddr_reg:x3; val_offset:75909*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75909*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25304:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7900007f; valaddr_reg:x3; val_offset:75912*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75912*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25305:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x790000ff; valaddr_reg:x3; val_offset:75915*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75915*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25306:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x790001ff; valaddr_reg:x3; val_offset:75918*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75918*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25307:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x790003ff; valaddr_reg:x3; val_offset:75921*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75921*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25308:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x790007ff; valaddr_reg:x3; val_offset:75924*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75924*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25309:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79000fff; valaddr_reg:x3; val_offset:75927*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75927*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25310:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79001fff; valaddr_reg:x3; val_offset:75930*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75930*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25311:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79003fff; valaddr_reg:x3; val_offset:75933*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75933*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25312:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79007fff; valaddr_reg:x3; val_offset:75936*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75936*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25313:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7900ffff; valaddr_reg:x3; val_offset:75939*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75939*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25314:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7901ffff; valaddr_reg:x3; val_offset:75942*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75942*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25315:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7903ffff; valaddr_reg:x3; val_offset:75945*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75945*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25316:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7907ffff; valaddr_reg:x3; val_offset:75948*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75948*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25317:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x790fffff; valaddr_reg:x3; val_offset:75951*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75951*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25318:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x791fffff; valaddr_reg:x3; val_offset:75954*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75954*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25319:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x793fffff; valaddr_reg:x3; val_offset:75957*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75957*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25320:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79400000; valaddr_reg:x3; val_offset:75960*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75960*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25321:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79600000; valaddr_reg:x3; val_offset:75963*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75963*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25322:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79700000; valaddr_reg:x3; val_offset:75966*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75966*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25323:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x79780000; valaddr_reg:x3; val_offset:75969*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75969*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25324:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797c0000; valaddr_reg:x3; val_offset:75972*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75972*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25325:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797e0000; valaddr_reg:x3; val_offset:75975*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75975*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25326:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797f0000; valaddr_reg:x3; val_offset:75978*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75978*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25327:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797f8000; valaddr_reg:x3; val_offset:75981*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75981*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25328:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fc000; valaddr_reg:x3; val_offset:75984*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75984*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25329:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fe000; valaddr_reg:x3; val_offset:75987*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75987*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25330:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ff000; valaddr_reg:x3; val_offset:75990*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75990*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25331:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ff800; valaddr_reg:x3; val_offset:75993*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75993*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25332:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffc00; valaddr_reg:x3; val_offset:75996*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75996*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25333:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffe00; valaddr_reg:x3; val_offset:75999*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 75999*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25334:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fff00; valaddr_reg:x3; val_offset:76002*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76002*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25335:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fff80; valaddr_reg:x3; val_offset:76005*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76005*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25336:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fffc0; valaddr_reg:x3; val_offset:76008*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76008*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25337:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fffe0; valaddr_reg:x3; val_offset:76011*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76011*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25338:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffff0; valaddr_reg:x3; val_offset:76014*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76014*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25339:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffff8; valaddr_reg:x3; val_offset:76017*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76017*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25340:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffffc; valaddr_reg:x3; val_offset:76020*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76020*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25341:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797ffffe; valaddr_reg:x3; val_offset:76023*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76023*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25342:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xf2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x797fffff; valaddr_reg:x3; val_offset:76026*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76026*0 + 3*197*FLEN/8, x4, x1, x2)

inst_25343:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:76029*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76029*0 + 3*197*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241251840,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241382912,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241448448,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241481216,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241497600,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241505792,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241509888,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241511936,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241512960,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513472,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513728,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513856,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513920,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513952,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513968,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513976,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513980,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513982,32,FLEN)
NAN_BOXED(2130292848,32,FLEN)
NAN_BOXED(4300313,32,FLEN)
NAN_BOXED(1241513983,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592512,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592513,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592515,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592519,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592527,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592543,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592575,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592639,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214592767,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593023,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214593535,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214594559,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214596607,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214600703,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214608895,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214625279,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214658047,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214723583,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2214854655,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215116799,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2215641087,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2216689663,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786815,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2218786816,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2220883968,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2221932544,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222456832,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222718976,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222850048,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222915584,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222948352,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222964736,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222972928,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222977024,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222979072,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980096,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980608,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980864,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222980992,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981056,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981088,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981104,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981112,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981116,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981118,32,FLEN)
NAN_BOXED(2130422174,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981119,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043136,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043137,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043139,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043143,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043151,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043167,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043199,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043263,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043391,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030043647,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030044159,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030045183,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030047231,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030051327,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030059519,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030075903,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030108671,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030174207,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030305279,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2030567423,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2031091711,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2032140287,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2034237439,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2034237440,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2036334592,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2037383168,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2037907456,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038169600,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038300672,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038366208,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038398976,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038415360,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038423552,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038427648,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038429696,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038430720,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431232,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431488,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431616,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431680,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431712,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431728,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431736,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431740,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431742,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2038431743,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
