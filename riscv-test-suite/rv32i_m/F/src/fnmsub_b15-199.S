
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25344:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:76032*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76032*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25345:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:76035*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76035*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25346:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:76038*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76038*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25347:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:76041*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76041*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25348:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:76044*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76044*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25349:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:76047*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76047*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25350:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:76050*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76050*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25351:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:76053*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76053*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25352:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:76056*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76056*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25353:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:76059*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76059*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25354:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:76062*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76062*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25355:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:76065*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76065*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25356:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:76068*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76068*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25357:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:76071*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76071*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25358:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7c7bf1 and fs2 == 0 and fe2 == 0x80 and fm2 == 0x01c84b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efc7bf1; op2val:0x4001c84b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:76074*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76074*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25359:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:76077*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76077*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:76080*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76080*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:76083*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76083*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:76086*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76086*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:76089*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76089*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:76092*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76092*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:76095*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76095*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:76098*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76098*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:76101*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76101*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:76104*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76104*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:76107*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76107*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:76110*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76110*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:76113*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76113*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:76116*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76116*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:76119*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76119*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:76122*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76122*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:76125*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76125*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:76128*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76128*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:76131*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76131*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:76134*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76134*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:76137*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76137*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:76140*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76140*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:76143*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76143*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:76146*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76146*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:76149*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76149*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:76152*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76152*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:76155*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76155*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:76158*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76158*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:76161*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76161*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:76164*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76164*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:76167*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76167*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:76170*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76170*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:76173*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76173*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:76176*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76176*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:76179*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76179*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:76182*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76182*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:76185*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76185*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:76188*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76188*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:76191*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76191*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:76194*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76194*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:76197*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76197*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:76200*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76200*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:76203*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76203*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:76206*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76206*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:76209*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76209*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:76212*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76212*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:76215*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76215*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:76218*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76218*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:76221*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76221*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:76224*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76224*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:76227*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76227*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:76230*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76230*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:76233*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76233*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fff00; valaddr_reg:x3; val_offset:76236*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76236*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fff80; valaddr_reg:x3; val_offset:76239*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76239*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fffc0; valaddr_reg:x3; val_offset:76242*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76242*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fffe0; valaddr_reg:x3; val_offset:76245*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76245*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffff0; valaddr_reg:x3; val_offset:76248*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76248*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffff8; valaddr_reg:x3; val_offset:76251*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76251*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffffc; valaddr_reg:x3; val_offset:76254*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76254*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107ffffe; valaddr_reg:x3; val_offset:76257*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76257*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d22ad and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd22ad; op2val:0x0;
op3val:0x107fffff; valaddr_reg:x3; val_offset:76260*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76260*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2800000; valaddr_reg:x3; val_offset:76263*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76263*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2800001; valaddr_reg:x3; val_offset:76266*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76266*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2800003; valaddr_reg:x3; val_offset:76269*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76269*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2800007; valaddr_reg:x3; val_offset:76272*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76272*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb280000f; valaddr_reg:x3; val_offset:76275*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76275*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb280001f; valaddr_reg:x3; val_offset:76278*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76278*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb280003f; valaddr_reg:x3; val_offset:76281*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76281*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb280007f; valaddr_reg:x3; val_offset:76284*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76284*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb28000ff; valaddr_reg:x3; val_offset:76287*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76287*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb28001ff; valaddr_reg:x3; val_offset:76290*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76290*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb28003ff; valaddr_reg:x3; val_offset:76293*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76293*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb28007ff; valaddr_reg:x3; val_offset:76296*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76296*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2800fff; valaddr_reg:x3; val_offset:76299*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76299*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2801fff; valaddr_reg:x3; val_offset:76302*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76302*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2803fff; valaddr_reg:x3; val_offset:76305*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76305*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2807fff; valaddr_reg:x3; val_offset:76308*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76308*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb280ffff; valaddr_reg:x3; val_offset:76311*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76311*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb281ffff; valaddr_reg:x3; val_offset:76314*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76314*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb283ffff; valaddr_reg:x3; val_offset:76317*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76317*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb287ffff; valaddr_reg:x3; val_offset:76320*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76320*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb28fffff; valaddr_reg:x3; val_offset:76323*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76323*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb29fffff; valaddr_reg:x3; val_offset:76326*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76326*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2bfffff; valaddr_reg:x3; val_offset:76329*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76329*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2c00000; valaddr_reg:x3; val_offset:76332*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76332*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2e00000; valaddr_reg:x3; val_offset:76335*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76335*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2f00000; valaddr_reg:x3; val_offset:76338*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76338*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2f80000; valaddr_reg:x3; val_offset:76341*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76341*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fc0000; valaddr_reg:x3; val_offset:76344*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76344*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fe0000; valaddr_reg:x3; val_offset:76347*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76347*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ff0000; valaddr_reg:x3; val_offset:76350*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76350*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ff8000; valaddr_reg:x3; val_offset:76353*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76353*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffc000; valaddr_reg:x3; val_offset:76356*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76356*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffe000; valaddr_reg:x3; val_offset:76359*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76359*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fff000; valaddr_reg:x3; val_offset:76362*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76362*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fff800; valaddr_reg:x3; val_offset:76365*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76365*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffc00; valaddr_reg:x3; val_offset:76368*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76368*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffe00; valaddr_reg:x3; val_offset:76371*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76371*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffff00; valaddr_reg:x3; val_offset:76374*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76374*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffff80; valaddr_reg:x3; val_offset:76377*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76377*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffffc0; valaddr_reg:x3; val_offset:76380*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76380*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffffe0; valaddr_reg:x3; val_offset:76383*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76383*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffff0; valaddr_reg:x3; val_offset:76386*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76386*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffff8; valaddr_reg:x3; val_offset:76389*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76389*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffffc; valaddr_reg:x3; val_offset:76392*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76392*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2fffffe; valaddr_reg:x3; val_offset:76395*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76395*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x65 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xb2ffffff; valaddr_reg:x3; val_offset:76398*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76398*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xbf800001; valaddr_reg:x3; val_offset:76401*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76401*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xbf800003; valaddr_reg:x3; val_offset:76404*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76404*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xbf800007; valaddr_reg:x3; val_offset:76407*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76407*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xbf999999; valaddr_reg:x3; val_offset:76410*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76410*0 + 3*198*FLEN/8, x4, x1, x2)

inst_25471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e8d56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x405d31 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe8d56; op2val:0x80405d31;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:76413*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 76413*0 + 3*198*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130476017,32,FLEN)
NAN_BOXED(1073858635,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823808,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823936,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824000,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824032,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824048,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824056,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824060,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824062,32,FLEN)
NAN_BOXED(2130518701,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824063,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733056,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733057,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733059,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733063,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733071,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733087,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733119,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733183,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733311,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994733567,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994734079,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994735103,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994737151,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994741247,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994749439,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994765823,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994798591,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994864127,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2994995199,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2995257343,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2995781631,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2996830207,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2998927359,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(2998927360,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3001024512,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3002073088,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3002597376,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3002859520,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3002990592,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003056128,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003088896,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003105280,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003113472,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003117568,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003119616,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003120640,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121152,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121408,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121536,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121600,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121632,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121648,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121656,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121660,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121662,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3003121663,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2130611542,32,FLEN)
NAN_BOXED(2151701809,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
