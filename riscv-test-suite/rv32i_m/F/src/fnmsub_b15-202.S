
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_25728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x002fea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fa04d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f002fea; op2val:0x3fffa04d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:77184*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77184*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x002fea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fa04d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f002fea; op2val:0x3fffa04d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:77187*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77187*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x002fea and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7fa04d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f002fea; op2val:0x3fffa04d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:77190*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77190*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:77193*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77193*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:77196*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77196*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:77199*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77199*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:77202*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77202*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:77205*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77205*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:77208*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77208*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:77211*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77211*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:77214*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77214*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:77217*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77217*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:77220*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77220*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:77223*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77223*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:77226*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77226*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:77229*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77229*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:77232*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77232*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:77235*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77235*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:77238*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77238*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd000000; valaddr_reg:x3; val_offset:77241*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77241*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd000001; valaddr_reg:x3; val_offset:77244*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77244*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd000003; valaddr_reg:x3; val_offset:77247*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77247*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd000007; valaddr_reg:x3; val_offset:77250*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77250*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd00000f; valaddr_reg:x3; val_offset:77253*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77253*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd00001f; valaddr_reg:x3; val_offset:77256*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77256*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd00003f; valaddr_reg:x3; val_offset:77259*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77259*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd00007f; valaddr_reg:x3; val_offset:77262*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77262*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd0000ff; valaddr_reg:x3; val_offset:77265*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77265*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd0001ff; valaddr_reg:x3; val_offset:77268*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77268*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd0003ff; valaddr_reg:x3; val_offset:77271*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77271*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd0007ff; valaddr_reg:x3; val_offset:77274*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77274*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd000fff; valaddr_reg:x3; val_offset:77277*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77277*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd001fff; valaddr_reg:x3; val_offset:77280*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77280*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd003fff; valaddr_reg:x3; val_offset:77283*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77283*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd007fff; valaddr_reg:x3; val_offset:77286*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77286*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd00ffff; valaddr_reg:x3; val_offset:77289*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77289*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd01ffff; valaddr_reg:x3; val_offset:77292*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77292*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd03ffff; valaddr_reg:x3; val_offset:77295*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77295*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd07ffff; valaddr_reg:x3; val_offset:77298*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77298*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd0fffff; valaddr_reg:x3; val_offset:77301*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77301*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd1fffff; valaddr_reg:x3; val_offset:77304*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77304*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd3fffff; valaddr_reg:x3; val_offset:77307*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77307*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd400000; valaddr_reg:x3; val_offset:77310*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77310*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd600000; valaddr_reg:x3; val_offset:77313*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77313*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd700000; valaddr_reg:x3; val_offset:77316*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77316*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd780000; valaddr_reg:x3; val_offset:77319*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77319*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7c0000; valaddr_reg:x3; val_offset:77322*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77322*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7e0000; valaddr_reg:x3; val_offset:77325*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77325*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7f0000; valaddr_reg:x3; val_offset:77328*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77328*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7f8000; valaddr_reg:x3; val_offset:77331*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77331*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fc000; valaddr_reg:x3; val_offset:77334*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77334*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fe000; valaddr_reg:x3; val_offset:77337*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77337*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ff000; valaddr_reg:x3; val_offset:77340*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77340*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ff800; valaddr_reg:x3; val_offset:77343*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77343*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffc00; valaddr_reg:x3; val_offset:77346*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77346*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffe00; valaddr_reg:x3; val_offset:77349*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77349*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fff00; valaddr_reg:x3; val_offset:77352*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77352*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fff80; valaddr_reg:x3; val_offset:77355*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77355*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fffc0; valaddr_reg:x3; val_offset:77358*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77358*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fffe0; valaddr_reg:x3; val_offset:77361*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77361*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffff0; valaddr_reg:x3; val_offset:77364*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77364*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffff8; valaddr_reg:x3; val_offset:77367*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77367*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffffc; valaddr_reg:x3; val_offset:77370*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77370*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7ffffe; valaddr_reg:x3; val_offset:77373*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77373*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00a233 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00a233; op2val:0x0;
op3val:0xd7fffff; valaddr_reg:x3; val_offset:77376*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77376*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64800000; valaddr_reg:x3; val_offset:77379*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77379*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64800001; valaddr_reg:x3; val_offset:77382*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77382*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64800003; valaddr_reg:x3; val_offset:77385*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77385*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64800007; valaddr_reg:x3; val_offset:77388*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77388*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6480000f; valaddr_reg:x3; val_offset:77391*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77391*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6480001f; valaddr_reg:x3; val_offset:77394*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77394*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6480003f; valaddr_reg:x3; val_offset:77397*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77397*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6480007f; valaddr_reg:x3; val_offset:77400*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77400*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x648000ff; valaddr_reg:x3; val_offset:77403*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77403*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x648001ff; valaddr_reg:x3; val_offset:77406*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77406*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x648003ff; valaddr_reg:x3; val_offset:77409*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77409*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x648007ff; valaddr_reg:x3; val_offset:77412*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77412*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64800fff; valaddr_reg:x3; val_offset:77415*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77415*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64801fff; valaddr_reg:x3; val_offset:77418*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77418*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64803fff; valaddr_reg:x3; val_offset:77421*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77421*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64807fff; valaddr_reg:x3; val_offset:77424*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77424*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6480ffff; valaddr_reg:x3; val_offset:77427*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77427*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6481ffff; valaddr_reg:x3; val_offset:77430*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77430*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6483ffff; valaddr_reg:x3; val_offset:77433*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77433*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x6487ffff; valaddr_reg:x3; val_offset:77436*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77436*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x648fffff; valaddr_reg:x3; val_offset:77439*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77439*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x649fffff; valaddr_reg:x3; val_offset:77442*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77442*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64bfffff; valaddr_reg:x3; val_offset:77445*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77445*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64c00000; valaddr_reg:x3; val_offset:77448*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77448*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64e00000; valaddr_reg:x3; val_offset:77451*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77451*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64f00000; valaddr_reg:x3; val_offset:77454*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77454*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64f80000; valaddr_reg:x3; val_offset:77457*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77457*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fc0000; valaddr_reg:x3; val_offset:77460*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77460*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fe0000; valaddr_reg:x3; val_offset:77463*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77463*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ff0000; valaddr_reg:x3; val_offset:77466*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77466*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ff8000; valaddr_reg:x3; val_offset:77469*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77469*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffc000; valaddr_reg:x3; val_offset:77472*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77472*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffe000; valaddr_reg:x3; val_offset:77475*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77475*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fff000; valaddr_reg:x3; val_offset:77478*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77478*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fff800; valaddr_reg:x3; val_offset:77481*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77481*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffc00; valaddr_reg:x3; val_offset:77484*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77484*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffe00; valaddr_reg:x3; val_offset:77487*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77487*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffff00; valaddr_reg:x3; val_offset:77490*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77490*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffff80; valaddr_reg:x3; val_offset:77493*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77493*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffffc0; valaddr_reg:x3; val_offset:77496*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77496*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffffe0; valaddr_reg:x3; val_offset:77499*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77499*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffff0; valaddr_reg:x3; val_offset:77502*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77502*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffff8; valaddr_reg:x3; val_offset:77505*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77505*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffffc; valaddr_reg:x3; val_offset:77508*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77508*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64fffffe; valaddr_reg:x3; val_offset:77511*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77511*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x64ffffff; valaddr_reg:x3; val_offset:77514*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77514*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:77517*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77517*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:77520*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77520*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:77523*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77523*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:77526*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77526*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:77529*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77529*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:77532*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77532*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:77535*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77535*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:77538*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77538*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:77541*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77541*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:77544*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77544*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:77547*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77547*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:77550*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77550*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:77553*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77553*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:77556*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77556*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:77559*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77559*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00ab2b and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7eab6e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00ab2b; op2val:0x3ffeab6e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:77562*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77562*0 + 3*201*FLEN/8, x4, x1, x2)

inst_25855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x00e26f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f00e26f; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:77565*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 77565*0 + 3*201*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130718698,32,FLEN)
NAN_BOXED(1073717325,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130718698,32,FLEN)
NAN_BOXED(1073717325,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130718698,32,FLEN)
NAN_BOXED(1073717325,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103808,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103809,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103811,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103815,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103823,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103839,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103871,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103935,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104063,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104319,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218104831,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218105855,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218107903,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218111999,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218120191,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218136575,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218169343,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218234879,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218365951,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218628095,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(219152383,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(220200959,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298111,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(222298112,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(224395264,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225443840,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(225968128,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226230272,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226361344,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226426880,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226459648,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226476032,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226484224,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226488320,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226490368,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491392,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226491904,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492160,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492288,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492352,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492384,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492400,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492408,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492412,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492414,32,FLEN)
NAN_BOXED(2130747955,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492415,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110208,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110209,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110211,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110215,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110223,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110239,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110271,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110335,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110463,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686110719,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686111231,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686112255,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686114303,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686118399,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686126591,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686142975,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686175743,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686241279,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686372351,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1686634495,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1687158783,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1688207359,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1690304511,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1690304512,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1692401664,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1693450240,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1693974528,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694236672,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694367744,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694433280,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694466048,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694482432,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694490624,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694494720,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694496768,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694497792,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498304,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498560,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498688,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498752,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498784,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498800,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498808,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498812,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498814,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(1694498815,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2130750251,32,FLEN)
NAN_BOXED(1073654638,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2130764399,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
