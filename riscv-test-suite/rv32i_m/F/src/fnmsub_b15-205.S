
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a0001ff; valaddr_reg:x3; val_offset:78336*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78336*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a0003ff; valaddr_reg:x3; val_offset:78339*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78339*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a0007ff; valaddr_reg:x3; val_offset:78342*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78342*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a000fff; valaddr_reg:x3; val_offset:78345*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78345*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a001fff; valaddr_reg:x3; val_offset:78348*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78348*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a003fff; valaddr_reg:x3; val_offset:78351*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78351*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a007fff; valaddr_reg:x3; val_offset:78354*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78354*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a00ffff; valaddr_reg:x3; val_offset:78357*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78357*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a01ffff; valaddr_reg:x3; val_offset:78360*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78360*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a03ffff; valaddr_reg:x3; val_offset:78363*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78363*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a07ffff; valaddr_reg:x3; val_offset:78366*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78366*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a0fffff; valaddr_reg:x3; val_offset:78369*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78369*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a1fffff; valaddr_reg:x3; val_offset:78372*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78372*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a3fffff; valaddr_reg:x3; val_offset:78375*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78375*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a400000; valaddr_reg:x3; val_offset:78378*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78378*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a600000; valaddr_reg:x3; val_offset:78381*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78381*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a700000; valaddr_reg:x3; val_offset:78384*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78384*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a780000; valaddr_reg:x3; val_offset:78387*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78387*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7c0000; valaddr_reg:x3; val_offset:78390*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78390*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7e0000; valaddr_reg:x3; val_offset:78393*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78393*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7f0000; valaddr_reg:x3; val_offset:78396*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78396*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7f8000; valaddr_reg:x3; val_offset:78399*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78399*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fc000; valaddr_reg:x3; val_offset:78402*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78402*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fe000; valaddr_reg:x3; val_offset:78405*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78405*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ff000; valaddr_reg:x3; val_offset:78408*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78408*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ff800; valaddr_reg:x3; val_offset:78411*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78411*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffc00; valaddr_reg:x3; val_offset:78414*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78414*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffe00; valaddr_reg:x3; val_offset:78417*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78417*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fff00; valaddr_reg:x3; val_offset:78420*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78420*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fff80; valaddr_reg:x3; val_offset:78423*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78423*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fffc0; valaddr_reg:x3; val_offset:78426*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78426*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fffe0; valaddr_reg:x3; val_offset:78429*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78429*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffff0; valaddr_reg:x3; val_offset:78432*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78432*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffff8; valaddr_reg:x3; val_offset:78435*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78435*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffffc; valaddr_reg:x3; val_offset:78438*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78438*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7ffffe; valaddr_reg:x3; val_offset:78441*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78441*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3a7fffff; valaddr_reg:x3; val_offset:78444*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78444*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:78447*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78447*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:78450*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78450*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:78453*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78453*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:78456*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78456*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:78459*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78459*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:78462*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78462*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:78465*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78465*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:78468*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78468*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:78471*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78471*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:78474*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78474*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:78477*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78477*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:78480*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78480*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:78483*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78483*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:78486*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78486*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:78489*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78489*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01cbbf and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3f1d4e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01cbbf; op2val:0x3f1d4e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:78492*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78492*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:78495*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78495*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:78498*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78498*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:78501*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78501*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:78504*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78504*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:78507*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78507*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:78510*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78510*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:78513*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78513*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:78516*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78516*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:78519*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78519*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:78522*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78522*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:78525*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78525*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:78528*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78528*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:78531*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78531*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:78534*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78534*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:78537*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78537*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:78540*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78540*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb000000; valaddr_reg:x3; val_offset:78543*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78543*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb000001; valaddr_reg:x3; val_offset:78546*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78546*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb000003; valaddr_reg:x3; val_offset:78549*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78549*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb000007; valaddr_reg:x3; val_offset:78552*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78552*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb00000f; valaddr_reg:x3; val_offset:78555*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78555*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb00001f; valaddr_reg:x3; val_offset:78558*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78558*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb00003f; valaddr_reg:x3; val_offset:78561*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78561*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:78564*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78564*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:78567*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78567*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:78570*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78570*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:78573*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78573*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:78576*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78576*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:78579*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78579*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:78582*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78582*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:78585*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78585*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:78588*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78588*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:78591*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78591*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:78594*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78594*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:78597*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78597*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:78600*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78600*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:78603*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78603*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:78606*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78606*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:78609*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78609*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:78612*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78612*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:78615*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78615*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:78618*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78618*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:78621*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78621*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:78624*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78624*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:78627*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78627*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:78630*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78630*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:78633*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78633*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:78636*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78636*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:78639*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78639*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:78642*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78642*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:78645*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78645*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:78648*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78648*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:78651*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78651*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:78654*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78654*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:78657*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78657*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:78660*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78660*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:78663*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78663*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:78666*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78666*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:78669*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78669*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:78672*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78672*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:78675*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78675*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02421b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02421b; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:78678*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78678*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x80800000; valaddr_reg:x3; val_offset:78681*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78681*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:78684*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78684*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:78687*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78687*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:78690*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78690*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x8080000f; valaddr_reg:x3; val_offset:78693*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78693*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x8080001f; valaddr_reg:x3; val_offset:78696*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78696*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x8080003f; valaddr_reg:x3; val_offset:78699*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78699*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x8080007f; valaddr_reg:x3; val_offset:78702*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78702*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x808000ff; valaddr_reg:x3; val_offset:78705*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78705*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x808001ff; valaddr_reg:x3; val_offset:78708*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78708*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x808003ff; valaddr_reg:x3; val_offset:78711*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78711*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x808007ff; valaddr_reg:x3; val_offset:78714*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78714*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0247c9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0247c9; op2val:0x80000000;
op3val:0x80800fff; valaddr_reg:x3; val_offset:78717*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78717*0 + 3*204*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973079039,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973079551,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973080575,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973082623,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973086719,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973094911,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973111295,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973144063,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973209599,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973340671,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(973602815,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(974127103,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(975175679,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(977272831,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(977272832,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(979369984,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(980418560,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(980942848,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981204992,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981336064,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981401600,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981434368,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981450752,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981458944,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981463040,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981465088,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981466112,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981466624,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981466880,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467008,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467072,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467104,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467120,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467128,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467132,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467134,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(981467135,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2130824127,32,FLEN)
NAN_BOXED(4136270,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549376,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549377,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549379,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549383,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549391,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549407,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549439,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192929792,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192933888,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192935936,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192936960,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937472,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937728,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937856,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937920,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937952,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937968,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937976,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937980,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937982,32,FLEN)
NAN_BOXED(2130854427,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937983,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872256,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872271,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872287,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872319,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872383,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872511,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872767,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155873279,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155874303,32,FLEN)
NAN_BOXED(2130855881,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155876351,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
