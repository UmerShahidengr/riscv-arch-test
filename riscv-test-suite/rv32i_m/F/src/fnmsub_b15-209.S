
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fc000; valaddr_reg:x3; val_offset:79872*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79872*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fe000; valaddr_reg:x3; val_offset:79875*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79875*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ff000; valaddr_reg:x3; val_offset:79878*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79878*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ff800; valaddr_reg:x3; val_offset:79881*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79881*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffc00; valaddr_reg:x3; val_offset:79884*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79884*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffe00; valaddr_reg:x3; val_offset:79887*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79887*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fff00; valaddr_reg:x3; val_offset:79890*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79890*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fff80; valaddr_reg:x3; val_offset:79893*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79893*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fffc0; valaddr_reg:x3; val_offset:79896*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79896*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fffe0; valaddr_reg:x3; val_offset:79899*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79899*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffff0; valaddr_reg:x3; val_offset:79902*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79902*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffff8; valaddr_reg:x3; val_offset:79905*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79905*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffffc; valaddr_reg:x3; val_offset:79908*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79908*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7ffffe; valaddr_reg:x3; val_offset:79911*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79911*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x5c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xae7fffff; valaddr_reg:x3; val_offset:79914*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79914*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbf800001; valaddr_reg:x3; val_offset:79917*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79917*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbf800003; valaddr_reg:x3; val_offset:79920*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79920*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbf800007; valaddr_reg:x3; val_offset:79923*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79923*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbf999999; valaddr_reg:x3; val_offset:79926*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79926*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:79929*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79929*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:79932*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79932*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:79935*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79935*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:79938*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79938*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:79941*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79941*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:79944*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79944*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:79947*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79947*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:79950*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79950*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:79953*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79953*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:79956*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79956*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:79959*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79959*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x053104 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3d8164 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f053104; op2val:0x803d8164;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:79962*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79962*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3f800001; valaddr_reg:x3; val_offset:79965*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79965*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3f800003; valaddr_reg:x3; val_offset:79968*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79968*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3f800007; valaddr_reg:x3; val_offset:79971*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79971*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3f999999; valaddr_reg:x3; val_offset:79974*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79974*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:79977*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79977*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:79980*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79980*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:79983*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79983*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:79986*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79986*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:79989*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79989*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:79992*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79992*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:79995*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79995*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:79998*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79998*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:80001*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80001*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:80004*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80004*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:80007*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80007*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:80010*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80010*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45000000; valaddr_reg:x3; val_offset:80013*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80013*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45000001; valaddr_reg:x3; val_offset:80016*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80016*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45000003; valaddr_reg:x3; val_offset:80019*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80019*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45000007; valaddr_reg:x3; val_offset:80022*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80022*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4500000f; valaddr_reg:x3; val_offset:80025*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80025*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4500001f; valaddr_reg:x3; val_offset:80028*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80028*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4500003f; valaddr_reg:x3; val_offset:80031*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80031*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4500007f; valaddr_reg:x3; val_offset:80034*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80034*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x450000ff; valaddr_reg:x3; val_offset:80037*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80037*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x450001ff; valaddr_reg:x3; val_offset:80040*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80040*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x450003ff; valaddr_reg:x3; val_offset:80043*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80043*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x450007ff; valaddr_reg:x3; val_offset:80046*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80046*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45000fff; valaddr_reg:x3; val_offset:80049*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80049*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45001fff; valaddr_reg:x3; val_offset:80052*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80052*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45003fff; valaddr_reg:x3; val_offset:80055*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80055*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45007fff; valaddr_reg:x3; val_offset:80058*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80058*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4500ffff; valaddr_reg:x3; val_offset:80061*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80061*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4501ffff; valaddr_reg:x3; val_offset:80064*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80064*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4503ffff; valaddr_reg:x3; val_offset:80067*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80067*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x4507ffff; valaddr_reg:x3; val_offset:80070*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80070*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x450fffff; valaddr_reg:x3; val_offset:80073*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80073*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x451fffff; valaddr_reg:x3; val_offset:80076*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80076*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x453fffff; valaddr_reg:x3; val_offset:80079*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80079*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45400000; valaddr_reg:x3; val_offset:80082*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80082*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45600000; valaddr_reg:x3; val_offset:80085*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80085*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45700000; valaddr_reg:x3; val_offset:80088*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80088*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x45780000; valaddr_reg:x3; val_offset:80091*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80091*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457c0000; valaddr_reg:x3; val_offset:80094*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80094*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457e0000; valaddr_reg:x3; val_offset:80097*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80097*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457f0000; valaddr_reg:x3; val_offset:80100*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80100*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457f8000; valaddr_reg:x3; val_offset:80103*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80103*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fc000; valaddr_reg:x3; val_offset:80106*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80106*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fe000; valaddr_reg:x3; val_offset:80109*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80109*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ff000; valaddr_reg:x3; val_offset:80112*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80112*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ff800; valaddr_reg:x3; val_offset:80115*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80115*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffc00; valaddr_reg:x3; val_offset:80118*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80118*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffe00; valaddr_reg:x3; val_offset:80121*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80121*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fff00; valaddr_reg:x3; val_offset:80124*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80124*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fff80; valaddr_reg:x3; val_offset:80127*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80127*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fffc0; valaddr_reg:x3; val_offset:80130*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80130*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fffe0; valaddr_reg:x3; val_offset:80133*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80133*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffff0; valaddr_reg:x3; val_offset:80136*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80136*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffff8; valaddr_reg:x3; val_offset:80139*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80139*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffffc; valaddr_reg:x3; val_offset:80142*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80142*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457ffffe; valaddr_reg:x3; val_offset:80145*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80145*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x06075b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d1f08 and fs3 == 0 and fe3 == 0x8a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f06075b; op2val:0x3d1f08;
op3val:0x457fffff; valaddr_reg:x3; val_offset:80148*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80148*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63800000; valaddr_reg:x3; val_offset:80151*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80151*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63800001; valaddr_reg:x3; val_offset:80154*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80154*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63800003; valaddr_reg:x3; val_offset:80157*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80157*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63800007; valaddr_reg:x3; val_offset:80160*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80160*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6380000f; valaddr_reg:x3; val_offset:80163*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80163*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6380001f; valaddr_reg:x3; val_offset:80166*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80166*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6380003f; valaddr_reg:x3; val_offset:80169*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80169*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6380007f; valaddr_reg:x3; val_offset:80172*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80172*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x638000ff; valaddr_reg:x3; val_offset:80175*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80175*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x638001ff; valaddr_reg:x3; val_offset:80178*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80178*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x638003ff; valaddr_reg:x3; val_offset:80181*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80181*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x638007ff; valaddr_reg:x3; val_offset:80184*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80184*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63800fff; valaddr_reg:x3; val_offset:80187*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80187*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63801fff; valaddr_reg:x3; val_offset:80190*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80190*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63803fff; valaddr_reg:x3; val_offset:80193*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80193*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63807fff; valaddr_reg:x3; val_offset:80196*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80196*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6380ffff; valaddr_reg:x3; val_offset:80199*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80199*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6381ffff; valaddr_reg:x3; val_offset:80202*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80202*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6383ffff; valaddr_reg:x3; val_offset:80205*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80205*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x6387ffff; valaddr_reg:x3; val_offset:80208*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80208*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x638fffff; valaddr_reg:x3; val_offset:80211*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80211*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x639fffff; valaddr_reg:x3; val_offset:80214*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80214*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63bfffff; valaddr_reg:x3; val_offset:80217*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80217*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63c00000; valaddr_reg:x3; val_offset:80220*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80220*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63e00000; valaddr_reg:x3; val_offset:80223*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80223*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63f00000; valaddr_reg:x3; val_offset:80226*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80226*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63f80000; valaddr_reg:x3; val_offset:80229*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80229*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63fc0000; valaddr_reg:x3; val_offset:80232*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80232*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63fe0000; valaddr_reg:x3; val_offset:80235*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80235*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63ff0000; valaddr_reg:x3; val_offset:80238*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80238*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63ff8000; valaddr_reg:x3; val_offset:80241*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80241*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63ffc000; valaddr_reg:x3; val_offset:80244*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80244*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63ffe000; valaddr_reg:x3; val_offset:80247*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80247*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63fff000; valaddr_reg:x3; val_offset:80250*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80250*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x060c9f and fs2 == 0 and fe2 == 0x7f and fm2 == 0x747285 and fs3 == 0 and fe3 == 0xc7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f060c9f; op2val:0x3ff47285;
op3val:0x63fff800; valaddr_reg:x3; val_offset:80253*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80253*0 + 3*208*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927607808,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927616000,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927620096,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927622144,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927623168,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927623680,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927623936,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624064,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624128,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624160,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624176,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624184,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624188,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624190,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(2927624191,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131046660,32,FLEN)
NAN_BOXED(2151514468,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627904,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627905,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627907,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627911,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627919,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627935,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157627967,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157628031,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157628159,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157628415,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157628927,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157629951,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157631999,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157636095,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157644287,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157660671,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157693439,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157758975,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1157890047,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1158152191,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1158676479,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1159725055,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1161822207,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1161822208,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1163919360,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1164967936,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1165492224,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1165754368,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1165885440,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1165950976,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1165983744,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166000128,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166008320,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166012416,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166014464,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166015488,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016000,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016256,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016384,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016448,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016480,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016496,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016504,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016508,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016510,32,FLEN)
NAN_BOXED(2131101531,32,FLEN)
NAN_BOXED(4005640,32,FLEN)
NAN_BOXED(1166016511,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669332992,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669332993,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669332995,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669332999,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333007,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333023,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333055,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333119,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333247,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669333503,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669334015,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669335039,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669337087,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669341183,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669349375,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669365759,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669398527,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669464063,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669595135,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1669857279,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1670381567,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1671430143,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1673527295,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1673527296,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1675624448,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1676673024,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677197312,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677459456,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677590528,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677656064,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677688832,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677705216,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677713408,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677717504,32,FLEN)
NAN_BOXED(2131102879,32,FLEN)
NAN_BOXED(1072984709,32,FLEN)
NAN_BOXED(1677719552,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
