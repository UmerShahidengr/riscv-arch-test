
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_2560:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc30000ff; valaddr_reg:x3; val_offset:7680*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7680*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2561:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc30001ff; valaddr_reg:x3; val_offset:7683*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7683*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2562:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc30003ff; valaddr_reg:x3; val_offset:7686*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7686*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2563:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc30007ff; valaddr_reg:x3; val_offset:7689*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7689*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2564:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3000fff; valaddr_reg:x3; val_offset:7692*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7692*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2565:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3001fff; valaddr_reg:x3; val_offset:7695*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7695*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2566:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3003fff; valaddr_reg:x3; val_offset:7698*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7698*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2567:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3007fff; valaddr_reg:x3; val_offset:7701*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7701*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2568:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc300ffff; valaddr_reg:x3; val_offset:7704*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7704*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2569:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc301ffff; valaddr_reg:x3; val_offset:7707*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7707*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2570:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc303ffff; valaddr_reg:x3; val_offset:7710*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7710*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2571:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc307ffff; valaddr_reg:x3; val_offset:7713*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7713*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2572:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc30fffff; valaddr_reg:x3; val_offset:7716*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7716*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2573:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc31fffff; valaddr_reg:x3; val_offset:7719*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7719*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2574:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc33fffff; valaddr_reg:x3; val_offset:7722*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7722*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2575:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3400000; valaddr_reg:x3; val_offset:7725*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7725*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2576:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3600000; valaddr_reg:x3; val_offset:7728*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7728*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2577:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3700000; valaddr_reg:x3; val_offset:7731*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7731*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2578:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc3780000; valaddr_reg:x3; val_offset:7734*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7734*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2579:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37c0000; valaddr_reg:x3; val_offset:7737*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7737*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2580:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37e0000; valaddr_reg:x3; val_offset:7740*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7740*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2581:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37f0000; valaddr_reg:x3; val_offset:7743*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7743*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2582:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37f8000; valaddr_reg:x3; val_offset:7746*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7746*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2583:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fc000; valaddr_reg:x3; val_offset:7749*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7749*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2584:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fe000; valaddr_reg:x3; val_offset:7752*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7752*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2585:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ff000; valaddr_reg:x3; val_offset:7755*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7755*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2586:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ff800; valaddr_reg:x3; val_offset:7758*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7758*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2587:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffc00; valaddr_reg:x3; val_offset:7761*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7761*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2588:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffe00; valaddr_reg:x3; val_offset:7764*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7764*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2589:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fff00; valaddr_reg:x3; val_offset:7767*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7767*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2590:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fff80; valaddr_reg:x3; val_offset:7770*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7770*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2591:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fffc0; valaddr_reg:x3; val_offset:7773*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7773*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2592:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fffe0; valaddr_reg:x3; val_offset:7776*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7776*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2593:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffff0; valaddr_reg:x3; val_offset:7779*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7779*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2594:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffff8; valaddr_reg:x3; val_offset:7782*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7782*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2595:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffffc; valaddr_reg:x3; val_offset:7785*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7785*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2596:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37ffffe; valaddr_reg:x3; val_offset:7788*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7788*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2597:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x522d12 and fs2 == 1 and fe2 == 0x03 and fm2 == 0x1be84a and fs3 == 1 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d522d12; op2val:0x819be84a;
op3val:0xc37fffff; valaddr_reg:x3; val_offset:7791*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7791*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2598:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:7794*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7794*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2599:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:7797*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7797*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2600:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:7800*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7800*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2601:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:7803*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7803*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2602:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:7806*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7806*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2603:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:7809*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7809*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2604:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:7812*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7812*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2605:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:7815*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7815*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2606:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:7818*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7818*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2607:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:7821*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7821*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2608:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:7824*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7824*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2609:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:7827*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7827*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2610:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:7830*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7830*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2611:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:7833*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7833*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2612:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:7836*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7836*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2613:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:7839*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7839*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2614:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:7842*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7842*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2615:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:7845*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7845*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2616:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:7848*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7848*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2617:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:7851*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7851*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2618:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:7854*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7854*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2619:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:7857*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7857*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2620:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:7860*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7860*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2621:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:7863*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7863*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2622:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:7866*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7866*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2623:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:7869*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7869*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2624:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:7872*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7872*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2625:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:7875*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7875*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2626:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:7878*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7878*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2627:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:7881*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7881*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2628:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:7884*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7884*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2629:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:7887*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7887*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2630:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:7890*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7890*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2631:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:7893*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7893*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2632:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:7896*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7896*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2633:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:7899*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7899*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2634:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:7902*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7902*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2635:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:7905*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7905*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2636:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:7908*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7908*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2637:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:7911*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7911*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2638:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:7914*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7914*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2639:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:7917*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7917*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2640:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:7920*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7920*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2641:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:7923*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7923*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2642:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:7926*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7926*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2643:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:7929*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7929*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2644:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:7932*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7932*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2645:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:7935*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7935*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2646:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:7938*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7938*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2647:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:7941*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7941*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2648:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:7944*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7944*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2649:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:7947*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7947*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2650:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:7950*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7950*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2651:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:7953*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7953*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2652:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:7956*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7956*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2653:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:7959*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7959*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2654:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:7962*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7962*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2655:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:7965*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7965*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2656:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:7968*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7968*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2657:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:7971*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7971*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2658:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:7974*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7974*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2659:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x52ba4d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d52ba4d; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:7977*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7977*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2660:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f000000; valaddr_reg:x3; val_offset:7980*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7980*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2661:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f000001; valaddr_reg:x3; val_offset:7983*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7983*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2662:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f000003; valaddr_reg:x3; val_offset:7986*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7986*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2663:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f000007; valaddr_reg:x3; val_offset:7989*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7989*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2664:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f00000f; valaddr_reg:x3; val_offset:7992*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7992*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2665:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f00001f; valaddr_reg:x3; val_offset:7995*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7995*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2666:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f00003f; valaddr_reg:x3; val_offset:7998*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 7998*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2667:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f00007f; valaddr_reg:x3; val_offset:8001*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8001*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2668:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f0000ff; valaddr_reg:x3; val_offset:8004*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8004*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2669:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f0001ff; valaddr_reg:x3; val_offset:8007*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8007*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2670:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f0003ff; valaddr_reg:x3; val_offset:8010*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8010*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2671:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f0007ff; valaddr_reg:x3; val_offset:8013*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8013*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2672:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f000fff; valaddr_reg:x3; val_offset:8016*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8016*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2673:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f001fff; valaddr_reg:x3; val_offset:8019*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8019*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2674:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f003fff; valaddr_reg:x3; val_offset:8022*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8022*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2675:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f007fff; valaddr_reg:x3; val_offset:8025*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8025*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2676:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f00ffff; valaddr_reg:x3; val_offset:8028*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8028*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2677:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f01ffff; valaddr_reg:x3; val_offset:8031*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8031*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2678:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f03ffff; valaddr_reg:x3; val_offset:8034*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8034*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2679:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f07ffff; valaddr_reg:x3; val_offset:8037*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8037*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2680:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f0fffff; valaddr_reg:x3; val_offset:8040*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8040*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2681:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f1fffff; valaddr_reg:x3; val_offset:8043*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8043*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2682:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f3fffff; valaddr_reg:x3; val_offset:8046*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8046*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2683:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f400000; valaddr_reg:x3; val_offset:8049*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8049*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2684:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f600000; valaddr_reg:x3; val_offset:8052*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8052*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2685:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f700000; valaddr_reg:x3; val_offset:8055*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8055*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2686:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f780000; valaddr_reg:x3; val_offset:8058*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8058*0 + 3*20*FLEN/8, x4, x1, x2)

inst_2687:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x54ab4d and fs2 == 0 and fe2 == 0x83 and fm2 == 0x1a1466 and fs3 == 0 and fe3 == 0xbe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d54ab4d; op2val:0x419a1466;
op3val:0x5f7c0000; valaddr_reg:x3; val_offset:8061*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 8061*0 + 3*20*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271557375,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271557631,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271558143,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271559167,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271561215,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271565311,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271573503,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271589887,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271622655,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271688191,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3271819263,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3272081407,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3272605695,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3273654271,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3275751423,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3275751424,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3277848576,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3278897152,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279421440,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279683584,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279814656,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279880192,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279912960,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279929344,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279937536,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279941632,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279943680,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279944704,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945216,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945472,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945600,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945664,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945696,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945712,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945720,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945724,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945726,32,FLEN)
NAN_BOXED(2102537490,32,FLEN)
NAN_BOXED(2174478410,32,FLEN)
NAN_BOXED(3279945727,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323642368,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643392,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323643904,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644160,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644288,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644352,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644384,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644400,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644408,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644412,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644414,32,FLEN)
NAN_BOXED(2102573645,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323644415,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835520,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835521,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835523,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835527,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835535,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835551,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835583,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835647,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593835775,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593836031,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593836543,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593837567,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593839615,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593843711,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593851903,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593868287,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593901055,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1593966591,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1594097663,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1594359807,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1594884095,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1595932671,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1598029823,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1598029824,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1600126976,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1601175552,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1601699840,32,FLEN)
NAN_BOXED(2102700877,32,FLEN)
NAN_BOXED(1100616806,32,FLEN)
NAN_BOXED(1601961984,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
