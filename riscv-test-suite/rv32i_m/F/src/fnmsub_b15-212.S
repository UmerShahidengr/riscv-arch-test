
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xf87ffffc; valaddr_reg:x3; val_offset:81024*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81024*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xf87ffffe; valaddr_reg:x3; val_offset:81027*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81027*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xf87fffff; valaddr_reg:x3; val_offset:81030*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81030*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff000001; valaddr_reg:x3; val_offset:81033*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81033*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff000003; valaddr_reg:x3; val_offset:81036*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81036*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff000007; valaddr_reg:x3; val_offset:81039*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81039*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff199999; valaddr_reg:x3; val_offset:81042*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81042*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff249249; valaddr_reg:x3; val_offset:81045*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81045*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff333333; valaddr_reg:x3; val_offset:81048*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81048*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:81051*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81051*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:81054*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81054*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff444444; valaddr_reg:x3; val_offset:81057*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81057*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:81060*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81060*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:81063*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81063*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff666666; valaddr_reg:x3; val_offset:81066*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81066*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:81069*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81069*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:81072*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81072*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:81075*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81075*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x070fa4 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x729db8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f070fa4; op2val:0xbff29db8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:81078*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81078*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:81081*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81081*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:81084*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81084*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:81087*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81087*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:81090*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81090*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:81093*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81093*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:81096*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81096*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:81099*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81099*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:81102*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81102*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:81105*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81105*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:81108*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81108*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:81111*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81111*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:81114*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81114*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:81117*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81117*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:81120*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81120*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:81123*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81123*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:81126*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81126*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c800000; valaddr_reg:x3; val_offset:81129*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81129*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c800001; valaddr_reg:x3; val_offset:81132*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81132*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c800003; valaddr_reg:x3; val_offset:81135*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81135*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c800007; valaddr_reg:x3; val_offset:81138*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81138*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c80000f; valaddr_reg:x3; val_offset:81141*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81141*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c80001f; valaddr_reg:x3; val_offset:81144*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81144*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c80003f; valaddr_reg:x3; val_offset:81147*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81147*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c80007f; valaddr_reg:x3; val_offset:81150*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81150*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c8000ff; valaddr_reg:x3; val_offset:81153*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81153*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c8001ff; valaddr_reg:x3; val_offset:81156*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81156*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c8003ff; valaddr_reg:x3; val_offset:81159*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81159*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c8007ff; valaddr_reg:x3; val_offset:81162*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81162*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c800fff; valaddr_reg:x3; val_offset:81165*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81165*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c801fff; valaddr_reg:x3; val_offset:81168*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81168*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c803fff; valaddr_reg:x3; val_offset:81171*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81171*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c807fff; valaddr_reg:x3; val_offset:81174*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81174*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c80ffff; valaddr_reg:x3; val_offset:81177*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81177*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c81ffff; valaddr_reg:x3; val_offset:81180*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81180*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c83ffff; valaddr_reg:x3; val_offset:81183*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81183*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c87ffff; valaddr_reg:x3; val_offset:81186*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81186*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c8fffff; valaddr_reg:x3; val_offset:81189*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81189*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8c9fffff; valaddr_reg:x3; val_offset:81192*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81192*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cbfffff; valaddr_reg:x3; val_offset:81195*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81195*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cc00000; valaddr_reg:x3; val_offset:81198*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81198*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8ce00000; valaddr_reg:x3; val_offset:81201*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81201*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cf00000; valaddr_reg:x3; val_offset:81204*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81204*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cf80000; valaddr_reg:x3; val_offset:81207*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81207*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfc0000; valaddr_reg:x3; val_offset:81210*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81210*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfe0000; valaddr_reg:x3; val_offset:81213*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81213*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cff0000; valaddr_reg:x3; val_offset:81216*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81216*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cff8000; valaddr_reg:x3; val_offset:81219*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81219*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffc000; valaddr_reg:x3; val_offset:81222*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81222*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffe000; valaddr_reg:x3; val_offset:81225*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81225*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfff000; valaddr_reg:x3; val_offset:81228*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81228*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfff800; valaddr_reg:x3; val_offset:81231*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81231*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffc00; valaddr_reg:x3; val_offset:81234*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81234*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffe00; valaddr_reg:x3; val_offset:81237*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81237*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffff00; valaddr_reg:x3; val_offset:81240*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81240*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffff80; valaddr_reg:x3; val_offset:81243*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81243*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffffc0; valaddr_reg:x3; val_offset:81246*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81246*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffffe0; valaddr_reg:x3; val_offset:81249*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81249*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffff0; valaddr_reg:x3; val_offset:81252*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81252*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffff8; valaddr_reg:x3; val_offset:81255*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81255*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffffc; valaddr_reg:x3; val_offset:81258*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81258*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cfffffe; valaddr_reg:x3; val_offset:81261*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81261*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x074f19 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f074f19; op2val:0x80000000;
op3val:0x8cffffff; valaddr_reg:x3; val_offset:81264*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81264*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f800000; valaddr_reg:x3; val_offset:81267*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81267*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f800001; valaddr_reg:x3; val_offset:81270*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81270*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f800003; valaddr_reg:x3; val_offset:81273*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81273*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f800007; valaddr_reg:x3; val_offset:81276*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81276*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f80000f; valaddr_reg:x3; val_offset:81279*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81279*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f80001f; valaddr_reg:x3; val_offset:81282*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81282*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f80003f; valaddr_reg:x3; val_offset:81285*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81285*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f80007f; valaddr_reg:x3; val_offset:81288*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81288*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f8000ff; valaddr_reg:x3; val_offset:81291*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81291*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f8001ff; valaddr_reg:x3; val_offset:81294*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81294*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f8003ff; valaddr_reg:x3; val_offset:81297*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81297*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f8007ff; valaddr_reg:x3; val_offset:81300*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81300*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f800fff; valaddr_reg:x3; val_offset:81303*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81303*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f801fff; valaddr_reg:x3; val_offset:81306*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81306*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f803fff; valaddr_reg:x3; val_offset:81309*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81309*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f807fff; valaddr_reg:x3; val_offset:81312*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81312*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f80ffff; valaddr_reg:x3; val_offset:81315*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81315*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f81ffff; valaddr_reg:x3; val_offset:81318*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81318*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f83ffff; valaddr_reg:x3; val_offset:81321*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81321*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f87ffff; valaddr_reg:x3; val_offset:81324*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81324*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f8fffff; valaddr_reg:x3; val_offset:81327*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81327*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6f9fffff; valaddr_reg:x3; val_offset:81330*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81330*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fbfffff; valaddr_reg:x3; val_offset:81333*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81333*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fc00000; valaddr_reg:x3; val_offset:81336*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81336*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fe00000; valaddr_reg:x3; val_offset:81339*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81339*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ff00000; valaddr_reg:x3; val_offset:81342*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81342*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ff80000; valaddr_reg:x3; val_offset:81345*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81345*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffc0000; valaddr_reg:x3; val_offset:81348*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81348*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffe0000; valaddr_reg:x3; val_offset:81351*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81351*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fff0000; valaddr_reg:x3; val_offset:81354*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81354*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fff8000; valaddr_reg:x3; val_offset:81357*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81357*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffc000; valaddr_reg:x3; val_offset:81360*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81360*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffe000; valaddr_reg:x3; val_offset:81363*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81363*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffff000; valaddr_reg:x3; val_offset:81366*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81366*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffff800; valaddr_reg:x3; val_offset:81369*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81369*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffc00; valaddr_reg:x3; val_offset:81372*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81372*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffe00; valaddr_reg:x3; val_offset:81375*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81375*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffff00; valaddr_reg:x3; val_offset:81378*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81378*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffff80; valaddr_reg:x3; val_offset:81381*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81381*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffffc0; valaddr_reg:x3; val_offset:81384*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81384*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffffe0; valaddr_reg:x3; val_offset:81387*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81387*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffff0; valaddr_reg:x3; val_offset:81390*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81390*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffff8; valaddr_reg:x3; val_offset:81393*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81393*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffffc; valaddr_reg:x3; val_offset:81396*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81396*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6ffffffe; valaddr_reg:x3; val_offset:81399*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81399*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x6fffffff; valaddr_reg:x3; val_offset:81402*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81402*0 + 3*211*FLEN/8, x4, x1, x2)

inst_27135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f000001; valaddr_reg:x3; val_offset:81405*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81405*0 + 3*211*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4169138172,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4169138174,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4169138175,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131169188,32,FLEN)
NAN_BOXED(3220348344,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198848,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198849,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198851,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198855,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198863,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198879,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198911,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198975,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199103,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199359,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357199871,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357200895,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357202943,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357207039,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357215231,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357231615,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357264383,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357329919,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357460991,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357723135,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2358247423,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2359295999,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393151,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2361393152,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2363490304,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2364538880,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365063168,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365325312,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365456384,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365521920,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365554688,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365571072,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365579264,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365583360,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365585408,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586432,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365586944,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587200,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587328,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587392,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587424,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587440,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587448,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587452,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587454,32,FLEN)
NAN_BOXED(2131185433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2365587455,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659584,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659585,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659587,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659591,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659599,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659615,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659647,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659711,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870659839,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870660095,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870660607,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870661631,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870663679,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870667775,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870675967,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870692351,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870725119,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870790655,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1870921727,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1871183871,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1871708159,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1872756735,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1874853887,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1874853888,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1876951040,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1877999616,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1878523904,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1878786048,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1878917120,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1878982656,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879015424,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879031808,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879040000,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879044096,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879046144,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879047168,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879047680,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879047936,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048064,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048128,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048160,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048176,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048184,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048188,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048190,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(1879048191,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
