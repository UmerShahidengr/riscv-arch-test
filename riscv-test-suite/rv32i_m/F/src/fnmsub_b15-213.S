
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f000003; valaddr_reg:x3; val_offset:81408*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81408*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f000007; valaddr_reg:x3; val_offset:81411*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81411*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f199999; valaddr_reg:x3; val_offset:81414*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81414*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f249249; valaddr_reg:x3; val_offset:81417*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81417*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f333333; valaddr_reg:x3; val_offset:81420*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81420*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:81423*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81423*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:81426*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81426*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f444444; valaddr_reg:x3; val_offset:81429*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81429*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:81432*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81432*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:81435*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81435*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f666666; valaddr_reg:x3; val_offset:81438*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81438*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:81441*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81441*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:81444*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81444*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:81447*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81447*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bba5 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x716a45 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bba5; op2val:0x3ff16a45;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:81450*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81450*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38000000; valaddr_reg:x3; val_offset:81453*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81453*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38000001; valaddr_reg:x3; val_offset:81456*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81456*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38000003; valaddr_reg:x3; val_offset:81459*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81459*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38000007; valaddr_reg:x3; val_offset:81462*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81462*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3800000f; valaddr_reg:x3; val_offset:81465*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81465*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3800001f; valaddr_reg:x3; val_offset:81468*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81468*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3800003f; valaddr_reg:x3; val_offset:81471*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81471*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3800007f; valaddr_reg:x3; val_offset:81474*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81474*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x380000ff; valaddr_reg:x3; val_offset:81477*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81477*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x380001ff; valaddr_reg:x3; val_offset:81480*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81480*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x380003ff; valaddr_reg:x3; val_offset:81483*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81483*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x380007ff; valaddr_reg:x3; val_offset:81486*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81486*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38000fff; valaddr_reg:x3; val_offset:81489*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81489*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38001fff; valaddr_reg:x3; val_offset:81492*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81492*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38003fff; valaddr_reg:x3; val_offset:81495*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81495*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38007fff; valaddr_reg:x3; val_offset:81498*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81498*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3800ffff; valaddr_reg:x3; val_offset:81501*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81501*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3801ffff; valaddr_reg:x3; val_offset:81504*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81504*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3803ffff; valaddr_reg:x3; val_offset:81507*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81507*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3807ffff; valaddr_reg:x3; val_offset:81510*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81510*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x380fffff; valaddr_reg:x3; val_offset:81513*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81513*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x381fffff; valaddr_reg:x3; val_offset:81516*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81516*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x383fffff; valaddr_reg:x3; val_offset:81519*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81519*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38400000; valaddr_reg:x3; val_offset:81522*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81522*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38600000; valaddr_reg:x3; val_offset:81525*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81525*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38700000; valaddr_reg:x3; val_offset:81528*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81528*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x38780000; valaddr_reg:x3; val_offset:81531*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81531*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387c0000; valaddr_reg:x3; val_offset:81534*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81534*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387e0000; valaddr_reg:x3; val_offset:81537*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81537*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387f0000; valaddr_reg:x3; val_offset:81540*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81540*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387f8000; valaddr_reg:x3; val_offset:81543*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81543*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fc000; valaddr_reg:x3; val_offset:81546*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81546*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fe000; valaddr_reg:x3; val_offset:81549*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81549*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ff000; valaddr_reg:x3; val_offset:81552*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81552*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ff800; valaddr_reg:x3; val_offset:81555*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81555*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffc00; valaddr_reg:x3; val_offset:81558*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81558*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffe00; valaddr_reg:x3; val_offset:81561*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81561*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fff00; valaddr_reg:x3; val_offset:81564*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81564*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fff80; valaddr_reg:x3; val_offset:81567*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81567*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fffc0; valaddr_reg:x3; val_offset:81570*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81570*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fffe0; valaddr_reg:x3; val_offset:81573*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81573*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffff0; valaddr_reg:x3; val_offset:81576*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81576*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffff8; valaddr_reg:x3; val_offset:81579*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81579*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffffc; valaddr_reg:x3; val_offset:81582*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81582*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387ffffe; valaddr_reg:x3; val_offset:81585*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81585*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x70 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x387fffff; valaddr_reg:x3; val_offset:81588*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81588*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3f800001; valaddr_reg:x3; val_offset:81591*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81591*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3f800003; valaddr_reg:x3; val_offset:81594*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81594*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3f800007; valaddr_reg:x3; val_offset:81597*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81597*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3f999999; valaddr_reg:x3; val_offset:81600*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81600*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:81603*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81603*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:81606*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81606*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:81609*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81609*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:81612*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81612*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:81615*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81615*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:81618*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81618*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:81621*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81621*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:81624*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81624*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:81627*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81627*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:81630*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81630*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:81633*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81633*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x07bc04 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3c5a67 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f07bc04; op2val:0x3c5a67;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:81636*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81636*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:81639*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81639*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:81642*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81642*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:81645*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81645*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:81648*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81648*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:81651*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81651*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:81654*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81654*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:81657*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81657*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:81660*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81660*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:81663*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81663*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:81666*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81666*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:81669*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81669*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:81672*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81672*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:81675*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81675*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:81678*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81678*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:81681*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81681*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:81684*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81684*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:81687*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81687*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:81690*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81690*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:81693*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81693*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:81696*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81696*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:81699*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81699*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:81702*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81702*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:81705*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81705*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:81708*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81708*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:81711*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81711*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:81714*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81714*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:81717*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81717*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:81720*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81720*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:81723*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81723*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:81726*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81726*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:81729*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81729*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:81732*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81732*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:81735*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81735*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:81738*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81738*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:81741*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81741*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:81744*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81744*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:81747*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81747*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:81750*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81750*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:81753*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81753*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:81756*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81756*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:81759*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81759*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:81762*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81762*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:81765*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81765*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:81768*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81768*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:81771*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81771*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:81774*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81774*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:81777*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81777*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:81780*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81780*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:81783*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81783*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:81786*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81786*0 + 3*212*FLEN/8, x4, x1, x2)

inst_27263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x090d88 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f090d88; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:81789*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 81789*0 + 3*212*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2131213221,32,FLEN)
NAN_BOXED(1072785989,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524096,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524097,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524099,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524103,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524111,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524127,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524159,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524223,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524351,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939524607,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939525119,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939526143,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939528191,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939532287,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939540479,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939556863,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939589631,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939655167,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(939786239,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(940048383,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(940572671,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(941621247,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(943718399,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(943718400,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(945815552,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(946864128,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947388416,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947650560,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947781632,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947847168,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947879936,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947896320,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947904512,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947908608,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947910656,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947911680,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912192,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912448,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912576,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912640,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912672,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912688,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912696,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912700,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912702,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(947912703,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131213316,32,FLEN)
NAN_BOXED(3955303,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2131299720,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
