
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8affffc0; valaddr_reg:x3; val_offset:82176*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82176*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8affffe0; valaddr_reg:x3; val_offset:82179*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82179*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8afffff0; valaddr_reg:x3; val_offset:82182*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82182*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8afffff8; valaddr_reg:x3; val_offset:82185*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82185*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8afffffc; valaddr_reg:x3; val_offset:82188*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82188*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8afffffe; valaddr_reg:x3; val_offset:82191*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82191*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0970bd and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x15 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0970bd; op2val:0x80000000;
op3val:0x8affffff; valaddr_reg:x3; val_offset:82194*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82194*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf800000; valaddr_reg:x3; val_offset:82197*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82197*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf800001; valaddr_reg:x3; val_offset:82200*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82200*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf800003; valaddr_reg:x3; val_offset:82203*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82203*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf800007; valaddr_reg:x3; val_offset:82206*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82206*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf80000f; valaddr_reg:x3; val_offset:82209*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82209*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf80001f; valaddr_reg:x3; val_offset:82212*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82212*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf80003f; valaddr_reg:x3; val_offset:82215*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82215*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf80007f; valaddr_reg:x3; val_offset:82218*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82218*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf8000ff; valaddr_reg:x3; val_offset:82221*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82221*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf8001ff; valaddr_reg:x3; val_offset:82224*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82224*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf8003ff; valaddr_reg:x3; val_offset:82227*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82227*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf8007ff; valaddr_reg:x3; val_offset:82230*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82230*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf800fff; valaddr_reg:x3; val_offset:82233*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82233*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf801fff; valaddr_reg:x3; val_offset:82236*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82236*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf803fff; valaddr_reg:x3; val_offset:82239*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82239*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf807fff; valaddr_reg:x3; val_offset:82242*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82242*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf80ffff; valaddr_reg:x3; val_offset:82245*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82245*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf81ffff; valaddr_reg:x3; val_offset:82248*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82248*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf83ffff; valaddr_reg:x3; val_offset:82251*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82251*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf87ffff; valaddr_reg:x3; val_offset:82254*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82254*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf8fffff; valaddr_reg:x3; val_offset:82257*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82257*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdf9fffff; valaddr_reg:x3; val_offset:82260*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82260*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfbfffff; valaddr_reg:x3; val_offset:82263*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82263*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfc00000; valaddr_reg:x3; val_offset:82266*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82266*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfe00000; valaddr_reg:x3; val_offset:82269*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82269*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdff00000; valaddr_reg:x3; val_offset:82272*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82272*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdff80000; valaddr_reg:x3; val_offset:82275*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82275*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffc0000; valaddr_reg:x3; val_offset:82278*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82278*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffe0000; valaddr_reg:x3; val_offset:82281*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82281*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfff0000; valaddr_reg:x3; val_offset:82284*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82284*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfff8000; valaddr_reg:x3; val_offset:82287*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82287*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffc000; valaddr_reg:x3; val_offset:82290*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82290*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffe000; valaddr_reg:x3; val_offset:82293*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82293*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffff000; valaddr_reg:x3; val_offset:82296*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82296*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffff800; valaddr_reg:x3; val_offset:82299*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82299*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffc00; valaddr_reg:x3; val_offset:82302*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82302*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffe00; valaddr_reg:x3; val_offset:82305*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82305*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffff00; valaddr_reg:x3; val_offset:82308*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82308*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffff80; valaddr_reg:x3; val_offset:82311*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82311*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffffc0; valaddr_reg:x3; val_offset:82314*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82314*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffffe0; valaddr_reg:x3; val_offset:82317*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82317*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffff0; valaddr_reg:x3; val_offset:82320*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82320*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffff8; valaddr_reg:x3; val_offset:82323*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82323*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffffc; valaddr_reg:x3; val_offset:82326*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82326*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdffffffe; valaddr_reg:x3; val_offset:82329*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82329*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xbf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xdfffffff; valaddr_reg:x3; val_offset:82332*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82332*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff000001; valaddr_reg:x3; val_offset:82335*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82335*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff000003; valaddr_reg:x3; val_offset:82338*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82338*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff000007; valaddr_reg:x3; val_offset:82341*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82341*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff199999; valaddr_reg:x3; val_offset:82344*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82344*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff249249; valaddr_reg:x3; val_offset:82347*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82347*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff333333; valaddr_reg:x3; val_offset:82350*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82350*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:82353*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82353*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:82356*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82356*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff444444; valaddr_reg:x3; val_offset:82359*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82359*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:82362*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82362*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:82365*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82365*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff666666; valaddr_reg:x3; val_offset:82368*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82368*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:82371*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82371*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:82374*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82374*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:82377*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82377*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09767a and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6e6090 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09767a; op2val:0xbfee6090;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:82380*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82380*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbf800001; valaddr_reg:x3; val_offset:82383*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82383*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbf800003; valaddr_reg:x3; val_offset:82386*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82386*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbf800007; valaddr_reg:x3; val_offset:82389*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82389*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbf999999; valaddr_reg:x3; val_offset:82392*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82392*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:82395*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82395*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:82398*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82398*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:82401*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82401*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:82404*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82404*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:82407*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82407*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:82410*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82410*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:82413*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82413*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:82416*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82416*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:82419*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82419*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:82422*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82422*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:82425*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82425*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:82428*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82428*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca800000; valaddr_reg:x3; val_offset:82431*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82431*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca800001; valaddr_reg:x3; val_offset:82434*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82434*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca800003; valaddr_reg:x3; val_offset:82437*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82437*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca800007; valaddr_reg:x3; val_offset:82440*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82440*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca80000f; valaddr_reg:x3; val_offset:82443*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82443*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca80001f; valaddr_reg:x3; val_offset:82446*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82446*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca80003f; valaddr_reg:x3; val_offset:82449*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82449*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca80007f; valaddr_reg:x3; val_offset:82452*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82452*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca8000ff; valaddr_reg:x3; val_offset:82455*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82455*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca8001ff; valaddr_reg:x3; val_offset:82458*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82458*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca8003ff; valaddr_reg:x3; val_offset:82461*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82461*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca8007ff; valaddr_reg:x3; val_offset:82464*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82464*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca800fff; valaddr_reg:x3; val_offset:82467*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82467*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca801fff; valaddr_reg:x3; val_offset:82470*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82470*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca803fff; valaddr_reg:x3; val_offset:82473*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82473*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca807fff; valaddr_reg:x3; val_offset:82476*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82476*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca80ffff; valaddr_reg:x3; val_offset:82479*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82479*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca81ffff; valaddr_reg:x3; val_offset:82482*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82482*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca83ffff; valaddr_reg:x3; val_offset:82485*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82485*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca87ffff; valaddr_reg:x3; val_offset:82488*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82488*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca8fffff; valaddr_reg:x3; val_offset:82491*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82491*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xca9fffff; valaddr_reg:x3; val_offset:82494*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82494*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcabfffff; valaddr_reg:x3; val_offset:82497*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82497*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcac00000; valaddr_reg:x3; val_offset:82500*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82500*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcae00000; valaddr_reg:x3; val_offset:82503*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82503*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaf00000; valaddr_reg:x3; val_offset:82506*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82506*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaf80000; valaddr_reg:x3; val_offset:82509*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82509*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafc0000; valaddr_reg:x3; val_offset:82512*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82512*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafe0000; valaddr_reg:x3; val_offset:82515*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82515*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaff0000; valaddr_reg:x3; val_offset:82518*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82518*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaff8000; valaddr_reg:x3; val_offset:82521*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82521*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffc000; valaddr_reg:x3; val_offset:82524*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82524*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffe000; valaddr_reg:x3; val_offset:82527*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82527*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafff000; valaddr_reg:x3; val_offset:82530*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82530*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafff800; valaddr_reg:x3; val_offset:82533*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82533*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafffc00; valaddr_reg:x3; val_offset:82536*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82536*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafffe00; valaddr_reg:x3; val_offset:82539*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82539*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffff00; valaddr_reg:x3; val_offset:82542*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82542*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffff80; valaddr_reg:x3; val_offset:82545*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82545*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffffc0; valaddr_reg:x3; val_offset:82548*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82548*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcaffffe0; valaddr_reg:x3; val_offset:82551*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82551*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafffff0; valaddr_reg:x3; val_offset:82554*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82554*0 + 3*214*FLEN/8, x4, x1, x2)

inst_27519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x097aef and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3b9635 and fs3 == 1 and fe3 == 0x95 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f097aef; op2val:0x803b9635;
op3val:0xcafffff8; valaddr_reg:x3; val_offset:82557*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82557*0 + 3*214*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032960,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332032992,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033008,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033016,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033020,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033022,32,FLEN)
NAN_BOXED(2131325117,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033023,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707776,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707777,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707779,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707783,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707791,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707807,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707839,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749707903,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749708031,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749708287,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749708799,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749709823,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749711871,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749715967,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749724159,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749740543,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749773311,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749838847,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3749969919,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3750232063,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3750756351,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3751804927,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3753902079,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3753902080,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3755999232,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3757047808,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3757572096,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3757834240,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3757965312,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758030848,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758063616,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758080000,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758088192,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758092288,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758094336,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758095360,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758095872,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096128,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096256,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096320,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096352,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096368,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096376,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096380,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096382,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(3758096383,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131326586,32,FLEN)
NAN_BOXED(3220070544,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386240,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386241,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386243,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386247,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386255,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386271,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386303,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386367,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386495,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397386751,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397387263,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397388287,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397390335,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397394431,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397402623,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397419007,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397451775,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397517311,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397648383,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3397910527,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3398434815,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3399483391,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3401580543,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3401580544,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3403677696,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3404726272,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405250560,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405512704,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405643776,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405709312,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405742080,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405758464,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405766656,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405770752,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405772800,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405773824,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774336,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774592,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774720,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774784,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774816,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774832,32,FLEN)
NAN_BOXED(2131327727,32,FLEN)
NAN_BOXED(2151388725,32,FLEN)
NAN_BOXED(3405774840,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
