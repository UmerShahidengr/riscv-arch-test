
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:82944*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82944*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:82947*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82947*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:82950*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82950*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:82953*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82953*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:82956*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82956*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:82959*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82959*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:82962*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82962*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:82965*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82965*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:82968*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82968*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:82971*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82971*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:82974*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82974*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:82977*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82977*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:82980*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82980*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:82983*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82983*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:82986*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82986*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88800000; valaddr_reg:x3; val_offset:82989*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82989*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88800001; valaddr_reg:x3; val_offset:82992*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82992*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88800003; valaddr_reg:x3; val_offset:82995*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82995*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88800007; valaddr_reg:x3; val_offset:82998*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 82998*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8880000f; valaddr_reg:x3; val_offset:83001*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83001*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8880001f; valaddr_reg:x3; val_offset:83004*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83004*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8880003f; valaddr_reg:x3; val_offset:83007*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83007*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8880007f; valaddr_reg:x3; val_offset:83010*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83010*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x888000ff; valaddr_reg:x3; val_offset:83013*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83013*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x888001ff; valaddr_reg:x3; val_offset:83016*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83016*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x888003ff; valaddr_reg:x3; val_offset:83019*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83019*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x888007ff; valaddr_reg:x3; val_offset:83022*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83022*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88800fff; valaddr_reg:x3; val_offset:83025*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83025*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88801fff; valaddr_reg:x3; val_offset:83028*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83028*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88803fff; valaddr_reg:x3; val_offset:83031*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83031*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88807fff; valaddr_reg:x3; val_offset:83034*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83034*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8880ffff; valaddr_reg:x3; val_offset:83037*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83037*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8881ffff; valaddr_reg:x3; val_offset:83040*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83040*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8883ffff; valaddr_reg:x3; val_offset:83043*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83043*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x8887ffff; valaddr_reg:x3; val_offset:83046*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83046*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x888fffff; valaddr_reg:x3; val_offset:83049*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83049*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x889fffff; valaddr_reg:x3; val_offset:83052*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83052*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88bfffff; valaddr_reg:x3; val_offset:83055*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83055*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88c00000; valaddr_reg:x3; val_offset:83058*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83058*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88e00000; valaddr_reg:x3; val_offset:83061*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83061*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88f00000; valaddr_reg:x3; val_offset:83064*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83064*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88f80000; valaddr_reg:x3; val_offset:83067*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83067*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fc0000; valaddr_reg:x3; val_offset:83070*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83070*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fe0000; valaddr_reg:x3; val_offset:83073*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83073*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ff0000; valaddr_reg:x3; val_offset:83076*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83076*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ff8000; valaddr_reg:x3; val_offset:83079*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83079*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffc000; valaddr_reg:x3; val_offset:83082*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83082*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffe000; valaddr_reg:x3; val_offset:83085*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83085*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fff000; valaddr_reg:x3; val_offset:83088*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83088*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fff800; valaddr_reg:x3; val_offset:83091*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83091*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffc00; valaddr_reg:x3; val_offset:83094*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83094*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffe00; valaddr_reg:x3; val_offset:83097*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83097*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffff00; valaddr_reg:x3; val_offset:83100*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83100*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffff80; valaddr_reg:x3; val_offset:83103*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83103*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffffc0; valaddr_reg:x3; val_offset:83106*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83106*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffffe0; valaddr_reg:x3; val_offset:83109*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83109*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffff0; valaddr_reg:x3; val_offset:83112*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83112*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffff8; valaddr_reg:x3; val_offset:83115*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83115*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffffc; valaddr_reg:x3; val_offset:83118*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83118*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88fffffe; valaddr_reg:x3; val_offset:83121*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83121*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09cbd1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09cbd1; op2val:0x80000000;
op3val:0x88ffffff; valaddr_reg:x3; val_offset:83124*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83124*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:83127*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83127*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:83130*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83130*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:83133*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83133*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:83136*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83136*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:83139*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83139*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:83142*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83142*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:83145*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83145*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:83148*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83148*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:83151*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83151*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:83154*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83154*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:83157*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83157*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:83160*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83160*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:83163*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83163*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:83166*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83166*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:83169*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83169*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:83172*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83172*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:83175*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83175*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:83178*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83178*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:83181*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83181*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:83184*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83184*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:83187*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83187*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:83190*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83190*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:83193*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83193*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:83196*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83196*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:83199*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83199*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:83202*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83202*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:83205*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83205*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:83208*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83208*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:83211*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83211*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:83214*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83214*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:83217*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83217*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:83220*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83220*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:83223*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83223*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:83226*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83226*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:83229*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83229*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:83232*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83232*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:83235*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83235*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:83238*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83238*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:83241*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83241*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:83244*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83244*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:83247*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83247*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:83250*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83250*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:83253*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83253*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:83256*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83256*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:83259*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83259*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:83262*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83262*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:83265*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83265*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:83268*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83268*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:83271*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83271*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:83274*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83274*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:83277*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83277*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:83280*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83280*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:83283*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83283*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:83286*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83286*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:83289*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83289*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:83292*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83292*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:83295*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83295*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:83298*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83298*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:83301*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83301*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:83304*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83304*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:83307*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83307*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09dfb8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09dfb8; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:83310*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83310*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21000000; valaddr_reg:x3; val_offset:83313*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83313*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21000001; valaddr_reg:x3; val_offset:83316*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83316*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21000003; valaddr_reg:x3; val_offset:83319*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83319*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21000007; valaddr_reg:x3; val_offset:83322*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83322*0 + 3*216*FLEN/8, x4, x1, x2)

inst_27775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2100000f; valaddr_reg:x3; val_offset:83325*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83325*0 + 3*216*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089984,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089985,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089987,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089991,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089999,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090015,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090047,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090111,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090239,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290090495,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290091007,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290092031,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290094079,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290098175,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290106367,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290122751,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290155519,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290221055,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290352127,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290614271,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2291138559,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2292187135,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284287,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2294284288,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2296381440,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297430016,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2297954304,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298216448,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298347520,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298413056,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298445824,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298462208,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298470400,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298474496,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298476544,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298477568,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478080,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478336,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478464,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478528,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478560,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478576,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478584,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478588,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478590,32,FLEN)
NAN_BOXED(2131348433,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478591,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2131353528,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648128,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648129,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648131,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648135,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648143,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
