
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2100001f; valaddr_reg:x3; val_offset:83328*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83328*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2100003f; valaddr_reg:x3; val_offset:83331*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83331*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2100007f; valaddr_reg:x3; val_offset:83334*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83334*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x210000ff; valaddr_reg:x3; val_offset:83337*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83337*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x210001ff; valaddr_reg:x3; val_offset:83340*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83340*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x210003ff; valaddr_reg:x3; val_offset:83343*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83343*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x210007ff; valaddr_reg:x3; val_offset:83346*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83346*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21000fff; valaddr_reg:x3; val_offset:83349*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83349*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21001fff; valaddr_reg:x3; val_offset:83352*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83352*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21003fff; valaddr_reg:x3; val_offset:83355*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83355*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21007fff; valaddr_reg:x3; val_offset:83358*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83358*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2100ffff; valaddr_reg:x3; val_offset:83361*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83361*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2101ffff; valaddr_reg:x3; val_offset:83364*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83364*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2103ffff; valaddr_reg:x3; val_offset:83367*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83367*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x2107ffff; valaddr_reg:x3; val_offset:83370*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83370*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x210fffff; valaddr_reg:x3; val_offset:83373*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83373*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x211fffff; valaddr_reg:x3; val_offset:83376*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83376*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x213fffff; valaddr_reg:x3; val_offset:83379*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83379*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21400000; valaddr_reg:x3; val_offset:83382*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83382*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21600000; valaddr_reg:x3; val_offset:83385*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83385*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21700000; valaddr_reg:x3; val_offset:83388*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83388*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x21780000; valaddr_reg:x3; val_offset:83391*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83391*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217c0000; valaddr_reg:x3; val_offset:83394*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83394*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217e0000; valaddr_reg:x3; val_offset:83397*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83397*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217f0000; valaddr_reg:x3; val_offset:83400*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83400*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217f8000; valaddr_reg:x3; val_offset:83403*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83403*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fc000; valaddr_reg:x3; val_offset:83406*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83406*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fe000; valaddr_reg:x3; val_offset:83409*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83409*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ff000; valaddr_reg:x3; val_offset:83412*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83412*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ff800; valaddr_reg:x3; val_offset:83415*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83415*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffc00; valaddr_reg:x3; val_offset:83418*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83418*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffe00; valaddr_reg:x3; val_offset:83421*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83421*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fff00; valaddr_reg:x3; val_offset:83424*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83424*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fff80; valaddr_reg:x3; val_offset:83427*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83427*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fffc0; valaddr_reg:x3; val_offset:83430*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83430*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fffe0; valaddr_reg:x3; val_offset:83433*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83433*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffff0; valaddr_reg:x3; val_offset:83436*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83436*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffff8; valaddr_reg:x3; val_offset:83439*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83439*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffffc; valaddr_reg:x3; val_offset:83442*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83442*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217ffffe; valaddr_reg:x3; val_offset:83445*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83445*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x42 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x217fffff; valaddr_reg:x3; val_offset:83448*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83448*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:83451*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83451*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:83454*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83454*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:83457*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83457*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:83460*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83460*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:83463*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83463*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:83466*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83466*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:83469*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83469*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:83472*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83472*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:83475*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83475*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:83478*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83478*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:83481*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83481*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:83484*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83484*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:83487*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83487*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:83490*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83490*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:83493*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83493*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f0c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b634d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f0c8; op2val:0x3b634d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:83496*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83496*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec000000; valaddr_reg:x3; val_offset:83499*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83499*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec000001; valaddr_reg:x3; val_offset:83502*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83502*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec000003; valaddr_reg:x3; val_offset:83505*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83505*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec000007; valaddr_reg:x3; val_offset:83508*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83508*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec00000f; valaddr_reg:x3; val_offset:83511*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83511*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec00001f; valaddr_reg:x3; val_offset:83514*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83514*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec00003f; valaddr_reg:x3; val_offset:83517*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83517*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec00007f; valaddr_reg:x3; val_offset:83520*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83520*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec0000ff; valaddr_reg:x3; val_offset:83523*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83523*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec0001ff; valaddr_reg:x3; val_offset:83526*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83526*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec0003ff; valaddr_reg:x3; val_offset:83529*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83529*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec0007ff; valaddr_reg:x3; val_offset:83532*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83532*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec000fff; valaddr_reg:x3; val_offset:83535*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83535*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec001fff; valaddr_reg:x3; val_offset:83538*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83538*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec003fff; valaddr_reg:x3; val_offset:83541*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83541*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec007fff; valaddr_reg:x3; val_offset:83544*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83544*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec00ffff; valaddr_reg:x3; val_offset:83547*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83547*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec01ffff; valaddr_reg:x3; val_offset:83550*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83550*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec03ffff; valaddr_reg:x3; val_offset:83553*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83553*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec07ffff; valaddr_reg:x3; val_offset:83556*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83556*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec0fffff; valaddr_reg:x3; val_offset:83559*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83559*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec1fffff; valaddr_reg:x3; val_offset:83562*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83562*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec3fffff; valaddr_reg:x3; val_offset:83565*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83565*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec400000; valaddr_reg:x3; val_offset:83568*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83568*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec600000; valaddr_reg:x3; val_offset:83571*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83571*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec700000; valaddr_reg:x3; val_offset:83574*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83574*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec780000; valaddr_reg:x3; val_offset:83577*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83577*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7c0000; valaddr_reg:x3; val_offset:83580*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83580*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7e0000; valaddr_reg:x3; val_offset:83583*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83583*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7f0000; valaddr_reg:x3; val_offset:83586*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83586*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7f8000; valaddr_reg:x3; val_offset:83589*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83589*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fc000; valaddr_reg:x3; val_offset:83592*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83592*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fe000; valaddr_reg:x3; val_offset:83595*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83595*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ff000; valaddr_reg:x3; val_offset:83598*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83598*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ff800; valaddr_reg:x3; val_offset:83601*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83601*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffc00; valaddr_reg:x3; val_offset:83604*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83604*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffe00; valaddr_reg:x3; val_offset:83607*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83607*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fff00; valaddr_reg:x3; val_offset:83610*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83610*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fff80; valaddr_reg:x3; val_offset:83613*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83613*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fffc0; valaddr_reg:x3; val_offset:83616*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83616*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fffe0; valaddr_reg:x3; val_offset:83619*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83619*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffff0; valaddr_reg:x3; val_offset:83622*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83622*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffff8; valaddr_reg:x3; val_offset:83625*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83625*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffffc; valaddr_reg:x3; val_offset:83628*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83628*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7ffffe; valaddr_reg:x3; val_offset:83631*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83631*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xd8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xec7fffff; valaddr_reg:x3; val_offset:83634*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83634*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff000001; valaddr_reg:x3; val_offset:83637*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83637*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff000003; valaddr_reg:x3; val_offset:83640*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83640*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff000007; valaddr_reg:x3; val_offset:83643*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83643*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff199999; valaddr_reg:x3; val_offset:83646*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83646*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff249249; valaddr_reg:x3; val_offset:83649*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83649*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff333333; valaddr_reg:x3; val_offset:83652*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83652*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:83655*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83655*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:83658*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83658*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff444444; valaddr_reg:x3; val_offset:83661*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83661*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:83664*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83664*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:83667*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83667*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff666666; valaddr_reg:x3; val_offset:83670*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83670*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:83673*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83673*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:83676*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83676*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:83679*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83679*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2e4c and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6d2372 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2e4c; op2val:0xbfed2372;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:83682*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83682*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f800000; valaddr_reg:x3; val_offset:83685*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83685*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f800001; valaddr_reg:x3; val_offset:83688*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83688*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f800003; valaddr_reg:x3; val_offset:83691*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83691*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f800007; valaddr_reg:x3; val_offset:83694*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83694*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f80000f; valaddr_reg:x3; val_offset:83697*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83697*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f80001f; valaddr_reg:x3; val_offset:83700*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83700*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f80003f; valaddr_reg:x3; val_offset:83703*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83703*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f80007f; valaddr_reg:x3; val_offset:83706*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83706*0 + 3*217*FLEN/8, x4, x1, x2)

inst_27903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f8000ff; valaddr_reg:x3; val_offset:83709*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83709*0 + 3*217*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648159,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648191,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648255,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648383,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553648639,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553649151,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553650175,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553652223,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553656319,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553664511,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553680895,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553713663,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553779199,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(553910271,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(554172415,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(554696703,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(555745279,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(557842431,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(557842432,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(559939584,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(560988160,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(561512448,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(561774592,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(561905664,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(561971200,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562003968,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562020352,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562028544,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562032640,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562034688,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562035712,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036224,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036480,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036608,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036672,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036704,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036720,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036728,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036732,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036734,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(562036735,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131357896,32,FLEN)
NAN_BOXED(3892045,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959422976,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959422977,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959422979,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959422983,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959422991,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423007,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423039,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423103,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423231,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423487,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959423999,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959425023,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959427071,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959431167,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959439359,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959455743,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959488511,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959554047,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959685119,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3959947263,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3960471551,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3961520127,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3963617279,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3963617280,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3965714432,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3966763008,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967287296,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967549440,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967680512,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967746048,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967778816,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967795200,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967803392,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967807488,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967809536,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967810560,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811072,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811328,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811456,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811520,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811552,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811568,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811576,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811580,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811582,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(3967811583,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131373644,32,FLEN)
NAN_BOXED(3219989362,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917760,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917761,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917763,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917767,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917775,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917791,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917823,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796917887,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796918015,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
