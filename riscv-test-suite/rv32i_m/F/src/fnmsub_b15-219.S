
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_27904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f8001ff; valaddr_reg:x3; val_offset:83712*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83712*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f8003ff; valaddr_reg:x3; val_offset:83715*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83715*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f8007ff; valaddr_reg:x3; val_offset:83718*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83718*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f800fff; valaddr_reg:x3; val_offset:83721*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83721*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f801fff; valaddr_reg:x3; val_offset:83724*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83724*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f803fff; valaddr_reg:x3; val_offset:83727*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83727*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f807fff; valaddr_reg:x3; val_offset:83730*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83730*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f80ffff; valaddr_reg:x3; val_offset:83733*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83733*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f81ffff; valaddr_reg:x3; val_offset:83736*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83736*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f83ffff; valaddr_reg:x3; val_offset:83739*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83739*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f87ffff; valaddr_reg:x3; val_offset:83742*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83742*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f8fffff; valaddr_reg:x3; val_offset:83745*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83745*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2f9fffff; valaddr_reg:x3; val_offset:83748*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83748*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fbfffff; valaddr_reg:x3; val_offset:83751*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83751*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fc00000; valaddr_reg:x3; val_offset:83754*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83754*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fe00000; valaddr_reg:x3; val_offset:83757*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83757*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ff00000; valaddr_reg:x3; val_offset:83760*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83760*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ff80000; valaddr_reg:x3; val_offset:83763*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83763*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffc0000; valaddr_reg:x3; val_offset:83766*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83766*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffe0000; valaddr_reg:x3; val_offset:83769*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83769*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fff0000; valaddr_reg:x3; val_offset:83772*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83772*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fff8000; valaddr_reg:x3; val_offset:83775*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83775*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffc000; valaddr_reg:x3; val_offset:83778*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83778*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffe000; valaddr_reg:x3; val_offset:83781*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83781*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffff000; valaddr_reg:x3; val_offset:83784*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83784*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffff800; valaddr_reg:x3; val_offset:83787*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83787*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffc00; valaddr_reg:x3; val_offset:83790*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83790*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffe00; valaddr_reg:x3; val_offset:83793*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83793*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffff00; valaddr_reg:x3; val_offset:83796*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83796*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffff80; valaddr_reg:x3; val_offset:83799*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83799*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffffc0; valaddr_reg:x3; val_offset:83802*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83802*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffffe0; valaddr_reg:x3; val_offset:83805*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83805*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffff0; valaddr_reg:x3; val_offset:83808*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83808*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffff8; valaddr_reg:x3; val_offset:83811*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83811*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffffc; valaddr_reg:x3; val_offset:83814*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83814*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2ffffffe; valaddr_reg:x3; val_offset:83817*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83817*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x2fffffff; valaddr_reg:x3; val_offset:83820*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83820*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3f800001; valaddr_reg:x3; val_offset:83823*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83823*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3f800003; valaddr_reg:x3; val_offset:83826*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83826*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3f800007; valaddr_reg:x3; val_offset:83829*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83829*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3f999999; valaddr_reg:x3; val_offset:83832*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83832*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:83835*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83835*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:83838*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83838*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:83841*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83841*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:83844*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83844*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:83847*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83847*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:83850*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83850*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:83853*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83853*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:83856*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83856*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:83859*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83859*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:83862*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83862*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:83865*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83865*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a4cbc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3b3bd0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a4cbc; op2val:0x3b3bd0;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:83868*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83868*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:83871*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83871*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:83874*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83874*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:83877*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83877*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:83880*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83880*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:83883*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83883*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:83886*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83886*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:83889*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83889*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:83892*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83892*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:83895*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83895*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:83898*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83898*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:83901*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83901*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:83904*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83904*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:83907*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83907*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:83910*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83910*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:83913*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83913*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:83916*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83916*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86800000; valaddr_reg:x3; val_offset:83919*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83919*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86800001; valaddr_reg:x3; val_offset:83922*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83922*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86800003; valaddr_reg:x3; val_offset:83925*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83925*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86800007; valaddr_reg:x3; val_offset:83928*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83928*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8680000f; valaddr_reg:x3; val_offset:83931*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83931*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8680001f; valaddr_reg:x3; val_offset:83934*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83934*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8680003f; valaddr_reg:x3; val_offset:83937*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83937*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8680007f; valaddr_reg:x3; val_offset:83940*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83940*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x868000ff; valaddr_reg:x3; val_offset:83943*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83943*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x868001ff; valaddr_reg:x3; val_offset:83946*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83946*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x868003ff; valaddr_reg:x3; val_offset:83949*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83949*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x868007ff; valaddr_reg:x3; val_offset:83952*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83952*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:83955*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83955*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:83958*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83958*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:83961*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83961*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:83964*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83964*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:83967*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83967*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:83970*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83970*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:83973*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83973*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:83976*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83976*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:83979*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83979*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:83982*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83982*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:83985*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83985*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:83988*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83988*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:83991*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83991*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:83994*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83994*0 + 3*218*FLEN/8, x4, x1, x2)

inst_27999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:83997*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 83997*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:84000*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84000*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:84003*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84003*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:84006*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84006*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:84009*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84009*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:84012*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84012*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:84015*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84015*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:84018*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84018*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:84021*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84021*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:84024*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84024*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:84027*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84027*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:84030*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84030*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:84033*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84033*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:84036*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84036*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:84039*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84039*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:84042*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84042*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:84045*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84045*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:84048*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84048*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:84051*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84051*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a54e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a54e6; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:84054*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84054*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:84057*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84057*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:84060*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84060*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:84063*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84063*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:84066*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84066*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:84069*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84069*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:84072*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84072*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:84075*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84075*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:84078*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84078*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:84081*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84081*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:84084*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84084*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:84087*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84087*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:84090*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84090*0 + 3*218*FLEN/8, x4, x1, x2)

inst_28031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:84093*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84093*0 + 3*218*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796918271,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796918783,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796919807,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796921855,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796925951,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796934143,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796950527,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(796983295,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(797048831,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(797179903,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(797442047,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(797966335,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(799014911,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(801112063,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(801112064,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(803209216,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(804257792,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(804782080,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805044224,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805175296,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805240832,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805273600,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805289984,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805298176,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805302272,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805304320,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805305344,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805305856,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306112,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306240,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306304,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306336,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306352,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306360,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306364,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306366,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(805306367,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131381436,32,FLEN)
NAN_BOXED(3881936,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535552,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535553,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535555,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535559,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535567,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535583,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535615,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535679,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535807,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536063,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256536575,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256537599,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256539647,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256543743,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256551935,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256568319,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256601087,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256666623,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256797695,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257059839,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2257584127,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2258632703,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729855,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2260729856,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2262827008,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2263875584,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264399872,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264662016,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264793088,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264858624,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264891392,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264907776,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264915968,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264920064,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264922112,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923136,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2131383526,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
