
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:84096*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84096*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:84099*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84099*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:84102*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84102*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84800000; valaddr_reg:x3; val_offset:84105*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84105*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:84108*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84108*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:84111*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84111*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:84114*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84114*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:84117*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84117*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:84120*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84120*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:84123*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84123*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:84126*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84126*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:84129*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84129*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:84132*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84132*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:84135*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84135*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:84138*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84138*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:84141*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84141*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:84144*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84144*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:84147*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84147*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:84150*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84150*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:84153*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84153*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:84156*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84156*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:84159*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84159*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:84162*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84162*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:84165*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84165*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:84168*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84168*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:84171*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84171*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:84174*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84174*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:84177*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84177*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:84180*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84180*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:84183*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84183*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:84186*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84186*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:84189*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84189*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:84192*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84192*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:84195*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84195*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:84198*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84198*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:84201*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84201*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:84204*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84204*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:84207*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84207*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:84210*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84210*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:84213*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84213*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:84216*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84216*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:84219*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84219*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:84222*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84222*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:84225*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84225*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:84228*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84228*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:84231*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84231*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:84234*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84234*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:84237*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84237*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a6049 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a6049; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:84240*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84240*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff000000; valaddr_reg:x3; val_offset:84243*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84243*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff000001; valaddr_reg:x3; val_offset:84246*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84246*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff000003; valaddr_reg:x3; val_offset:84249*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84249*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff000007; valaddr_reg:x3; val_offset:84252*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84252*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff00000f; valaddr_reg:x3; val_offset:84255*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84255*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff00001f; valaddr_reg:x3; val_offset:84258*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84258*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff00003f; valaddr_reg:x3; val_offset:84261*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84261*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff00007f; valaddr_reg:x3; val_offset:84264*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84264*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff0000ff; valaddr_reg:x3; val_offset:84267*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84267*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff0001ff; valaddr_reg:x3; val_offset:84270*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84270*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff0003ff; valaddr_reg:x3; val_offset:84273*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84273*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff0007ff; valaddr_reg:x3; val_offset:84276*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84276*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff000fff; valaddr_reg:x3; val_offset:84279*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84279*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff001fff; valaddr_reg:x3; val_offset:84282*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84282*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff003fff; valaddr_reg:x3; val_offset:84285*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84285*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff007fff; valaddr_reg:x3; val_offset:84288*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84288*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff00ffff; valaddr_reg:x3; val_offset:84291*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84291*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff01ffff; valaddr_reg:x3; val_offset:84294*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84294*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff03ffff; valaddr_reg:x3; val_offset:84297*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84297*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff07ffff; valaddr_reg:x3; val_offset:84300*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84300*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff0fffff; valaddr_reg:x3; val_offset:84303*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84303*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff199999; valaddr_reg:x3; val_offset:84306*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84306*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff1fffff; valaddr_reg:x3; val_offset:84309*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84309*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff249249; valaddr_reg:x3; val_offset:84312*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84312*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff333333; valaddr_reg:x3; val_offset:84315*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84315*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:84318*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84318*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:84321*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84321*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff3fffff; valaddr_reg:x3; val_offset:84324*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84324*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff400000; valaddr_reg:x3; val_offset:84327*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84327*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff444444; valaddr_reg:x3; val_offset:84330*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84330*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:84333*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84333*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:84336*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84336*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff600000; valaddr_reg:x3; val_offset:84339*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84339*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff666666; valaddr_reg:x3; val_offset:84342*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84342*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:84345*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84345*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff700000; valaddr_reg:x3; val_offset:84348*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84348*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff780000; valaddr_reg:x3; val_offset:84351*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84351*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7c0000; valaddr_reg:x3; val_offset:84354*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84354*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7e0000; valaddr_reg:x3; val_offset:84357*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84357*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7f0000; valaddr_reg:x3; val_offset:84360*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84360*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7f8000; valaddr_reg:x3; val_offset:84363*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84363*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fc000; valaddr_reg:x3; val_offset:84366*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84366*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fe000; valaddr_reg:x3; val_offset:84369*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84369*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ff000; valaddr_reg:x3; val_offset:84372*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84372*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ff800; valaddr_reg:x3; val_offset:84375*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84375*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffc00; valaddr_reg:x3; val_offset:84378*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84378*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffe00; valaddr_reg:x3; val_offset:84381*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84381*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fff00; valaddr_reg:x3; val_offset:84384*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84384*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fff80; valaddr_reg:x3; val_offset:84387*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84387*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fffc0; valaddr_reg:x3; val_offset:84390*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84390*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fffe0; valaddr_reg:x3; val_offset:84393*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84393*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffff0; valaddr_reg:x3; val_offset:84396*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84396*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:84399*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84399*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:84402*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84402*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:84405*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84405*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bb6bd and fs2 == 1 and fe2 == 0x7f and fm2 == 0x6a895a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bb6bd; op2val:0xbfea895a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:84408*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84408*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:84411*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84411*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:84414*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84414*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:84417*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84417*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:84420*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84420*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:84423*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84423*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:84426*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84426*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:84429*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84429*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:84432*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84432*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:84435*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84435*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:84438*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84438*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:84441*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84441*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:84444*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84444*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:84447*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84447*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:84450*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84450*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:84453*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84453*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:84456*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84456*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:84459*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84459*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:84462*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84462*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:84465*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84465*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:84468*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84468*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:84471*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84471*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:84474*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84474*0 + 3*219*FLEN/8, x4, x1, x2)

inst_28159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0bccd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0bccd8; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:84477*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 84477*0 + 3*219*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981120,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981121,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981123,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981127,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981135,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981151,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981183,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981247,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981375,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981631,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222982143,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222983167,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222985215,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222989311,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222997503,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223013887,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223046655,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223112191,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223243263,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223505407,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2224029695,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2225078271,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175423,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175424,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2229272576,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230321152,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230845440,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231107584,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231238656,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231304192,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231336960,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231353344,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231361536,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231365632,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2131386441,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190080,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190095,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190111,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190143,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190207,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190335,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278190591,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278191103,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278192127,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278194175,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278198271,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278206463,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278222847,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278255615,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278321151,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278452223,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4278714367,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4279238655,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4280287231,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4282384383,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4282384384,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4284481536,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4285530112,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286054400,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286316544,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286447616,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286513152,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286545920,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286562304,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286570496,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286574592,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286576640,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286577664,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578176,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578432,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578560,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578624,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578656,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578672,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131474109,32,FLEN)
NAN_BOXED(3219818842,32,FLEN)
NAN_BOXED(4286578687,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2131479768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
