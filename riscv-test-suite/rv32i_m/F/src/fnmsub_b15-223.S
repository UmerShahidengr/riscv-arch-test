
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1807fff; valaddr_reg:x3; val_offset:85248*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85248*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x180ffff; valaddr_reg:x3; val_offset:85251*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85251*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x181ffff; valaddr_reg:x3; val_offset:85254*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85254*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x183ffff; valaddr_reg:x3; val_offset:85257*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85257*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x187ffff; valaddr_reg:x3; val_offset:85260*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85260*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x18fffff; valaddr_reg:x3; val_offset:85263*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85263*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x19fffff; valaddr_reg:x3; val_offset:85266*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85266*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1bfffff; valaddr_reg:x3; val_offset:85269*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85269*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1c00000; valaddr_reg:x3; val_offset:85272*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85272*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1e00000; valaddr_reg:x3; val_offset:85275*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85275*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1f00000; valaddr_reg:x3; val_offset:85278*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85278*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1f80000; valaddr_reg:x3; val_offset:85281*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85281*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fc0000; valaddr_reg:x3; val_offset:85284*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85284*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fe0000; valaddr_reg:x3; val_offset:85287*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85287*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ff0000; valaddr_reg:x3; val_offset:85290*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85290*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ff8000; valaddr_reg:x3; val_offset:85293*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85293*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffc000; valaddr_reg:x3; val_offset:85296*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85296*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffe000; valaddr_reg:x3; val_offset:85299*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85299*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fff000; valaddr_reg:x3; val_offset:85302*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85302*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fff800; valaddr_reg:x3; val_offset:85305*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85305*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffc00; valaddr_reg:x3; val_offset:85308*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85308*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffe00; valaddr_reg:x3; val_offset:85311*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85311*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffff00; valaddr_reg:x3; val_offset:85314*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85314*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffff80; valaddr_reg:x3; val_offset:85317*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85317*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffffc0; valaddr_reg:x3; val_offset:85320*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85320*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffffe0; valaddr_reg:x3; val_offset:85323*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85323*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffff0; valaddr_reg:x3; val_offset:85326*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85326*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffff8; valaddr_reg:x3; val_offset:85329*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85329*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffffc; valaddr_reg:x3; val_offset:85332*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85332*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1fffffe; valaddr_reg:x3; val_offset:85335*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85335*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cf22e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cf22e; op2val:0x0;
op3val:0x1ffffff; valaddr_reg:x3; val_offset:85338*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85338*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3f800001; valaddr_reg:x3; val_offset:85341*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85341*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3f800003; valaddr_reg:x3; val_offset:85344*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85344*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3f800007; valaddr_reg:x3; val_offset:85347*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85347*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3f999999; valaddr_reg:x3; val_offset:85350*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85350*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:85353*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85353*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:85356*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85356*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:85359*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85359*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:85362*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85362*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:85365*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85365*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:85368*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85368*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:85371*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85371*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:85374*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85374*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:85377*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85377*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:85380*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85380*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:85383*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85383*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:85386*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85386*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41800000; valaddr_reg:x3; val_offset:85389*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85389*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41800001; valaddr_reg:x3; val_offset:85392*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85392*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41800003; valaddr_reg:x3; val_offset:85395*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85395*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41800007; valaddr_reg:x3; val_offset:85398*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85398*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4180000f; valaddr_reg:x3; val_offset:85401*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85401*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4180001f; valaddr_reg:x3; val_offset:85404*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85404*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4180003f; valaddr_reg:x3; val_offset:85407*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85407*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4180007f; valaddr_reg:x3; val_offset:85410*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85410*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x418000ff; valaddr_reg:x3; val_offset:85413*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85413*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x418001ff; valaddr_reg:x3; val_offset:85416*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85416*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x418003ff; valaddr_reg:x3; val_offset:85419*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85419*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x418007ff; valaddr_reg:x3; val_offset:85422*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85422*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41800fff; valaddr_reg:x3; val_offset:85425*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85425*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41801fff; valaddr_reg:x3; val_offset:85428*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85428*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41803fff; valaddr_reg:x3; val_offset:85431*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85431*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41807fff; valaddr_reg:x3; val_offset:85434*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85434*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4180ffff; valaddr_reg:x3; val_offset:85437*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85437*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4181ffff; valaddr_reg:x3; val_offset:85440*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85440*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4183ffff; valaddr_reg:x3; val_offset:85443*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85443*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x4187ffff; valaddr_reg:x3; val_offset:85446*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85446*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x418fffff; valaddr_reg:x3; val_offset:85449*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85449*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x419fffff; valaddr_reg:x3; val_offset:85452*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85452*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41bfffff; valaddr_reg:x3; val_offset:85455*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85455*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41c00000; valaddr_reg:x3; val_offset:85458*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85458*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41e00000; valaddr_reg:x3; val_offset:85461*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85461*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41f00000; valaddr_reg:x3; val_offset:85464*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85464*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41f80000; valaddr_reg:x3; val_offset:85467*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85467*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fc0000; valaddr_reg:x3; val_offset:85470*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85470*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fe0000; valaddr_reg:x3; val_offset:85473*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85473*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ff0000; valaddr_reg:x3; val_offset:85476*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85476*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ff8000; valaddr_reg:x3; val_offset:85479*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85479*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffc000; valaddr_reg:x3; val_offset:85482*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85482*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffe000; valaddr_reg:x3; val_offset:85485*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85485*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fff000; valaddr_reg:x3; val_offset:85488*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85488*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fff800; valaddr_reg:x3; val_offset:85491*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85491*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffc00; valaddr_reg:x3; val_offset:85494*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85494*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffe00; valaddr_reg:x3; val_offset:85497*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85497*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffff00; valaddr_reg:x3; val_offset:85500*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85500*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffff80; valaddr_reg:x3; val_offset:85503*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85503*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffffc0; valaddr_reg:x3; val_offset:85506*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85506*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffffe0; valaddr_reg:x3; val_offset:85509*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85509*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffff0; valaddr_reg:x3; val_offset:85512*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85512*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffff8; valaddr_reg:x3; val_offset:85515*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85515*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffffc; valaddr_reg:x3; val_offset:85518*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85518*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41fffffe; valaddr_reg:x3; val_offset:85521*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85521*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0d273b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3a0945 and fs3 == 0 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0d273b; op2val:0x3a0945;
op3val:0x41ffffff; valaddr_reg:x3; val_offset:85524*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85524*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38800000; valaddr_reg:x3; val_offset:85527*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85527*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38800001; valaddr_reg:x3; val_offset:85530*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85530*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38800003; valaddr_reg:x3; val_offset:85533*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85533*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38800007; valaddr_reg:x3; val_offset:85536*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85536*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3880000f; valaddr_reg:x3; val_offset:85539*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85539*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3880001f; valaddr_reg:x3; val_offset:85542*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85542*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3880003f; valaddr_reg:x3; val_offset:85545*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85545*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3880007f; valaddr_reg:x3; val_offset:85548*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85548*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x388000ff; valaddr_reg:x3; val_offset:85551*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85551*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x388001ff; valaddr_reg:x3; val_offset:85554*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85554*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x388003ff; valaddr_reg:x3; val_offset:85557*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85557*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x388007ff; valaddr_reg:x3; val_offset:85560*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85560*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38800fff; valaddr_reg:x3; val_offset:85563*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85563*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38801fff; valaddr_reg:x3; val_offset:85566*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85566*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38803fff; valaddr_reg:x3; val_offset:85569*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85569*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38807fff; valaddr_reg:x3; val_offset:85572*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85572*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3880ffff; valaddr_reg:x3; val_offset:85575*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85575*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3881ffff; valaddr_reg:x3; val_offset:85578*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85578*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3883ffff; valaddr_reg:x3; val_offset:85581*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85581*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3887ffff; valaddr_reg:x3; val_offset:85584*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85584*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x388fffff; valaddr_reg:x3; val_offset:85587*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85587*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x389fffff; valaddr_reg:x3; val_offset:85590*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85590*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38bfffff; valaddr_reg:x3; val_offset:85593*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85593*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38c00000; valaddr_reg:x3; val_offset:85596*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85596*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38e00000; valaddr_reg:x3; val_offset:85599*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85599*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38f00000; valaddr_reg:x3; val_offset:85602*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85602*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38f80000; valaddr_reg:x3; val_offset:85605*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85605*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fc0000; valaddr_reg:x3; val_offset:85608*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85608*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fe0000; valaddr_reg:x3; val_offset:85611*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85611*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ff0000; valaddr_reg:x3; val_offset:85614*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85614*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ff8000; valaddr_reg:x3; val_offset:85617*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85617*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffc000; valaddr_reg:x3; val_offset:85620*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85620*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffe000; valaddr_reg:x3; val_offset:85623*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85623*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fff000; valaddr_reg:x3; val_offset:85626*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85626*0 + 3*222*FLEN/8, x4, x1, x2)

inst_28543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fff800; valaddr_reg:x3; val_offset:85629*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85629*0 + 3*222*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25198591,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25231359,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25296895,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25427967,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25690111,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(26214399,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(27262975,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360127,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(29360128,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31457280,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32505856,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33030144,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33292288,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33423360,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33488896,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33521664,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33538048,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33546240,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33550336,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33552384,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553408,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33553920,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554176,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554304,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554368,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554400,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554416,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554424,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554428,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554430,32,FLEN)
NAN_BOXED(2131554862,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554431,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907648,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907649,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907651,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907655,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907663,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907679,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907711,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907775,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098907903,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098908159,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098908671,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098909695,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098911743,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098915839,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098924031,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098940415,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1098973183,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1099038719,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1099169791,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1099431935,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1099956223,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1101004799,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1103101951,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1103101952,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1105199104,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1106247680,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1106771968,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107034112,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107165184,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107230720,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107263488,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107279872,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107288064,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107292160,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107294208,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107295232,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107295744,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296000,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296128,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296192,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296224,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296240,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296248,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296252,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296254,32,FLEN)
NAN_BOXED(2131568443,32,FLEN)
NAN_BOXED(3803461,32,FLEN)
NAN_BOXED(1107296255,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912704,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912705,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912707,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912711,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912719,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912735,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912767,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912831,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947912959,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947913215,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947913727,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947914751,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947916799,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947920895,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947929087,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947945471,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(947978239,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(948043775,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(948174847,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(948436991,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(948961279,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(950009855,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(952107007,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(952107008,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(954204160,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(955252736,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(955777024,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956039168,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956170240,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956235776,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956268544,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956284928,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956293120,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956297216,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956299264,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
