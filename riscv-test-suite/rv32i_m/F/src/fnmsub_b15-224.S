
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffc00; valaddr_reg:x3; val_offset:85632*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85632*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffe00; valaddr_reg:x3; val_offset:85635*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85635*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffff00; valaddr_reg:x3; val_offset:85638*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85638*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffff80; valaddr_reg:x3; val_offset:85641*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85641*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffffc0; valaddr_reg:x3; val_offset:85644*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85644*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffffe0; valaddr_reg:x3; val_offset:85647*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85647*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffff0; valaddr_reg:x3; val_offset:85650*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85650*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffff8; valaddr_reg:x3; val_offset:85653*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85653*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffffc; valaddr_reg:x3; val_offset:85656*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85656*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38fffffe; valaddr_reg:x3; val_offset:85659*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85659*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x71 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x38ffffff; valaddr_reg:x3; val_offset:85662*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85662*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3f800001; valaddr_reg:x3; val_offset:85665*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85665*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3f800003; valaddr_reg:x3; val_offset:85668*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85668*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3f800007; valaddr_reg:x3; val_offset:85671*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85671*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3f999999; valaddr_reg:x3; val_offset:85674*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85674*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:85677*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85677*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:85680*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85680*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:85683*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85683*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:85686*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85686*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:85689*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85689*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:85692*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85692*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:85695*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85695*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:85698*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85698*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:85701*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85701*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:85704*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85704*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:85707*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85707*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0db3dc and fs2 == 0 and fe2 == 0x00 and fm2 == 0x39cfac and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0db3dc; op2val:0x39cfac;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:85710*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85710*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:85713*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85713*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:85716*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85716*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:85719*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85719*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:85722*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85722*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:85725*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85725*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:85728*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85728*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:85731*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85731*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:85734*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85734*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:85737*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85737*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:85740*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85740*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:85743*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85743*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:85746*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85746*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:85749*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85749*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:85752*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85752*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:85755*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85755*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:85758*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85758*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:85761*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85761*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:85764*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85764*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:85767*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85767*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:85770*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85770*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:85773*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85773*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:85776*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85776*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:85779*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85779*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:85782*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85782*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:85785*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85785*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:85788*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85788*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:85791*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85791*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:85794*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85794*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:85797*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85797*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:85800*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85800*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:85803*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85803*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:85806*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85806*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:85809*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85809*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:85812*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85812*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:85815*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85815*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:85818*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85818*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:85821*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85821*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:85824*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85824*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:85827*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85827*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:85830*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85830*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:85833*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85833*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:85836*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85836*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:85839*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85839*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:85842*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85842*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:85845*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85845*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:85848*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85848*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:85851*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85851*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:85854*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85854*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:85857*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85857*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:85860*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85860*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:85863*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85863*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:85866*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85866*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:85869*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85869*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:85872*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85872*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:85875*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85875*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:85878*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85878*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:85881*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85881*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:85884*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85884*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:85887*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85887*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:85890*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85890*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:85893*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85893*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e02b8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e02b8; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:85896*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85896*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0000000; valaddr_reg:x3; val_offset:85899*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85899*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0000001; valaddr_reg:x3; val_offset:85902*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85902*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0000003; valaddr_reg:x3; val_offset:85905*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85905*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0000007; valaddr_reg:x3; val_offset:85908*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85908*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe000000f; valaddr_reg:x3; val_offset:85911*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85911*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe000001f; valaddr_reg:x3; val_offset:85914*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85914*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe000003f; valaddr_reg:x3; val_offset:85917*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85917*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe000007f; valaddr_reg:x3; val_offset:85920*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85920*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe00000ff; valaddr_reg:x3; val_offset:85923*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85923*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe00001ff; valaddr_reg:x3; val_offset:85926*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85926*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe00003ff; valaddr_reg:x3; val_offset:85929*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85929*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe00007ff; valaddr_reg:x3; val_offset:85932*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85932*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0000fff; valaddr_reg:x3; val_offset:85935*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85935*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0001fff; valaddr_reg:x3; val_offset:85938*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85938*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0003fff; valaddr_reg:x3; val_offset:85941*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85941*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0007fff; valaddr_reg:x3; val_offset:85944*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85944*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe000ffff; valaddr_reg:x3; val_offset:85947*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85947*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe001ffff; valaddr_reg:x3; val_offset:85950*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85950*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe003ffff; valaddr_reg:x3; val_offset:85953*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85953*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe007ffff; valaddr_reg:x3; val_offset:85956*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85956*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe00fffff; valaddr_reg:x3; val_offset:85959*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85959*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe01fffff; valaddr_reg:x3; val_offset:85962*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85962*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe03fffff; valaddr_reg:x3; val_offset:85965*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85965*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0400000; valaddr_reg:x3; val_offset:85968*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85968*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0600000; valaddr_reg:x3; val_offset:85971*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85971*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0700000; valaddr_reg:x3; val_offset:85974*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85974*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe0780000; valaddr_reg:x3; val_offset:85977*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85977*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07c0000; valaddr_reg:x3; val_offset:85980*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85980*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07e0000; valaddr_reg:x3; val_offset:85983*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85983*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07f0000; valaddr_reg:x3; val_offset:85986*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85986*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07f8000; valaddr_reg:x3; val_offset:85989*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85989*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fc000; valaddr_reg:x3; val_offset:85992*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85992*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fe000; valaddr_reg:x3; val_offset:85995*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85995*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ff000; valaddr_reg:x3; val_offset:85998*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 85998*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ff800; valaddr_reg:x3; val_offset:86001*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86001*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffc00; valaddr_reg:x3; val_offset:86004*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86004*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffe00; valaddr_reg:x3; val_offset:86007*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86007*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fff00; valaddr_reg:x3; val_offset:86010*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86010*0 + 3*223*FLEN/8, x4, x1, x2)

inst_28671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fff80; valaddr_reg:x3; val_offset:86013*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86013*0 + 3*223*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956300288,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956300800,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301056,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301184,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301248,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301280,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301296,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301304,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301308,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301310,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(956301311,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131604444,32,FLEN)
NAN_BOXED(3788716,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2131624632,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096384,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096385,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096387,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096391,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096399,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096415,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096447,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096511,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096639,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758096895,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758097407,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758098431,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758100479,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758104575,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758112767,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758129151,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758161919,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758227455,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758358527,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3758620671,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3759144959,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3760193535,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3762290687,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3762290688,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3764387840,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3765436416,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3765960704,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766222848,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766353920,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766419456,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766452224,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766468608,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766476800,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766480896,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766482944,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766483968,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484480,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484736,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484864,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
