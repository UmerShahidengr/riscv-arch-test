
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fffc0; valaddr_reg:x3; val_offset:86016*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86016*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fffe0; valaddr_reg:x3; val_offset:86019*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86019*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffff0; valaddr_reg:x3; val_offset:86022*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86022*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffff8; valaddr_reg:x3; val_offset:86025*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86025*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffffc; valaddr_reg:x3; val_offset:86028*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86028*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07ffffe; valaddr_reg:x3; val_offset:86031*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86031*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xc0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xe07fffff; valaddr_reg:x3; val_offset:86034*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86034*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff000001; valaddr_reg:x3; val_offset:86037*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86037*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff000003; valaddr_reg:x3; val_offset:86040*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86040*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff000007; valaddr_reg:x3; val_offset:86043*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86043*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff199999; valaddr_reg:x3; val_offset:86046*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86046*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff249249; valaddr_reg:x3; val_offset:86049*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86049*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff333333; valaddr_reg:x3; val_offset:86052*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86052*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:86055*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86055*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:86058*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86058*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff444444; valaddr_reg:x3; val_offset:86061*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86061*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:86064*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86064*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:86067*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86067*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff666666; valaddr_reg:x3; val_offset:86070*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86070*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:86073*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86073*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:86076*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86076*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:86079*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86079*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e06b2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x66b7d1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e06b2; op2val:0xbfe6b7d1;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:86082*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86082*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:86085*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86085*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:86088*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86088*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:86091*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86091*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:86094*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86094*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:86097*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86097*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:86100*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86100*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:86103*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86103*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:86106*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86106*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:86109*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86109*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:86112*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86112*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:86115*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86115*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:86118*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86118*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:86121*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86121*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:86124*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86124*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:86127*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86127*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:86130*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86130*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:86133*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86133*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:86136*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86136*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:86139*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86139*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:86142*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86142*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:86145*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86145*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:86148*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86148*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:86151*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86151*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:86154*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86154*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:86157*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86157*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:86160*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86160*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:86163*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86163*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:86166*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86166*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:86169*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86169*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:86172*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86172*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:86175*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86175*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:86178*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86178*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:86181*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86181*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:86184*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86184*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:86187*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86187*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:86190*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86190*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:86193*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86193*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:86196*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86196*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:86199*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86199*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:86202*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86202*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:86205*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86205*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:86208*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86208*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:86211*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86211*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:86214*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86214*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:86217*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86217*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:86220*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86220*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:86223*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86223*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:86226*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86226*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:86229*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86229*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:86232*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86232*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:86235*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86235*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:86238*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86238*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:86241*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86241*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:86244*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86244*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:86247*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86247*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:86250*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86250*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:86253*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86253*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:86256*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86256*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:86259*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86259*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:86262*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86262*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:86265*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86265*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e88ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e88ee; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:86268*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86268*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1000000; valaddr_reg:x3; val_offset:86271*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86271*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1000001; valaddr_reg:x3; val_offset:86274*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86274*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1000003; valaddr_reg:x3; val_offset:86277*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86277*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1000007; valaddr_reg:x3; val_offset:86280*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86280*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb100000f; valaddr_reg:x3; val_offset:86283*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86283*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb100001f; valaddr_reg:x3; val_offset:86286*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86286*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb100003f; valaddr_reg:x3; val_offset:86289*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86289*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb100007f; valaddr_reg:x3; val_offset:86292*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86292*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb10000ff; valaddr_reg:x3; val_offset:86295*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86295*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb10001ff; valaddr_reg:x3; val_offset:86298*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86298*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb10003ff; valaddr_reg:x3; val_offset:86301*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86301*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb10007ff; valaddr_reg:x3; val_offset:86304*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86304*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1000fff; valaddr_reg:x3; val_offset:86307*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86307*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1001fff; valaddr_reg:x3; val_offset:86310*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86310*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1003fff; valaddr_reg:x3; val_offset:86313*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86313*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1007fff; valaddr_reg:x3; val_offset:86316*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86316*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb100ffff; valaddr_reg:x3; val_offset:86319*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86319*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb101ffff; valaddr_reg:x3; val_offset:86322*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86322*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb103ffff; valaddr_reg:x3; val_offset:86325*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86325*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb107ffff; valaddr_reg:x3; val_offset:86328*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86328*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb10fffff; valaddr_reg:x3; val_offset:86331*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86331*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb11fffff; valaddr_reg:x3; val_offset:86334*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86334*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb13fffff; valaddr_reg:x3; val_offset:86337*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86337*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1400000; valaddr_reg:x3; val_offset:86340*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86340*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1600000; valaddr_reg:x3; val_offset:86343*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86343*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1700000; valaddr_reg:x3; val_offset:86346*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86346*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb1780000; valaddr_reg:x3; val_offset:86349*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86349*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17c0000; valaddr_reg:x3; val_offset:86352*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86352*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17e0000; valaddr_reg:x3; val_offset:86355*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86355*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17f0000; valaddr_reg:x3; val_offset:86358*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86358*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17f8000; valaddr_reg:x3; val_offset:86361*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86361*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fc000; valaddr_reg:x3; val_offset:86364*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86364*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fe000; valaddr_reg:x3; val_offset:86367*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86367*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ff000; valaddr_reg:x3; val_offset:86370*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86370*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ff800; valaddr_reg:x3; val_offset:86373*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86373*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffc00; valaddr_reg:x3; val_offset:86376*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86376*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffe00; valaddr_reg:x3; val_offset:86379*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86379*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fff00; valaddr_reg:x3; val_offset:86382*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86382*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fff80; valaddr_reg:x3; val_offset:86385*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86385*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fffc0; valaddr_reg:x3; val_offset:86388*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86388*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fffe0; valaddr_reg:x3; val_offset:86391*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86391*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffff0; valaddr_reg:x3; val_offset:86394*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86394*0 + 3*224*FLEN/8, x4, x1, x2)

inst_28799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffff8; valaddr_reg:x3; val_offset:86397*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86397*0 + 3*224*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484928,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484960,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484976,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484984,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484988,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484990,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(3766484991,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2131625650,32,FLEN)
NAN_BOXED(3219568593,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886080,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886081,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886083,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886087,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886095,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886111,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886143,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886207,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886335,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83886591,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83887103,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83888127,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83890175,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83894271,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83902463,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83918847,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(83951615,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84017151,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84148223,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84410367,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(84934655,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(85983231,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080383,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(88080384,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(90177536,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91226112,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(91750400,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92012544,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92143616,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92209152,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92241920,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92258304,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92266496,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92270592,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92272640,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92273664,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274176,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274432,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274560,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274624,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274656,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274672,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274680,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274684,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274686,32,FLEN)
NAN_BOXED(2131658990,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274687,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567232,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567233,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567235,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567239,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567247,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567263,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567295,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567359,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567487,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969567743,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969568255,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969569279,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969571327,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969575423,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969583615,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969599999,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969632767,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969698303,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2969829375,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2970091519,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2970615807,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2971664383,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2973761535,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2973761536,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2975858688,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2976907264,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977431552,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977693696,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977824768,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977890304,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977923072,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977939456,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977947648,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977951744,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977953792,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977954816,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955328,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955584,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955712,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955776,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955808,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955824,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955832,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
