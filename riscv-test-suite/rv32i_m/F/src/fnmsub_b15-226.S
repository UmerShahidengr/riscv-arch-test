
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_28800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffffc; valaddr_reg:x3; val_offset:86400*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86400*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17ffffe; valaddr_reg:x3; val_offset:86403*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86403*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x62 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xb17fffff; valaddr_reg:x3; val_offset:86406*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86406*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:86409*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86409*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:86412*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86412*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:86415*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86415*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:86418*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86418*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:86421*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86421*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:86424*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86424*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:86427*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86427*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:86430*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86430*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:86433*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86433*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:86436*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86436*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:86439*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86439*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:86442*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86442*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:86445*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86445*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:86448*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86448*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:86451*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86451*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f18e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393f6e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f18e6; op2val:0x80393f6e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:86454*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86454*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7800000; valaddr_reg:x3; val_offset:86457*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86457*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7800001; valaddr_reg:x3; val_offset:86460*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86460*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7800003; valaddr_reg:x3; val_offset:86463*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86463*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7800007; valaddr_reg:x3; val_offset:86466*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86466*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa780000f; valaddr_reg:x3; val_offset:86469*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86469*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa780001f; valaddr_reg:x3; val_offset:86472*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86472*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa780003f; valaddr_reg:x3; val_offset:86475*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86475*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa780007f; valaddr_reg:x3; val_offset:86478*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86478*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa78000ff; valaddr_reg:x3; val_offset:86481*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86481*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa78001ff; valaddr_reg:x3; val_offset:86484*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86484*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa78003ff; valaddr_reg:x3; val_offset:86487*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86487*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa78007ff; valaddr_reg:x3; val_offset:86490*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86490*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7800fff; valaddr_reg:x3; val_offset:86493*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86493*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7801fff; valaddr_reg:x3; val_offset:86496*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86496*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7803fff; valaddr_reg:x3; val_offset:86499*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86499*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7807fff; valaddr_reg:x3; val_offset:86502*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86502*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa780ffff; valaddr_reg:x3; val_offset:86505*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86505*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa781ffff; valaddr_reg:x3; val_offset:86508*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86508*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa783ffff; valaddr_reg:x3; val_offset:86511*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86511*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa787ffff; valaddr_reg:x3; val_offset:86514*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86514*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa78fffff; valaddr_reg:x3; val_offset:86517*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86517*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa79fffff; valaddr_reg:x3; val_offset:86520*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86520*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7bfffff; valaddr_reg:x3; val_offset:86523*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86523*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7c00000; valaddr_reg:x3; val_offset:86526*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86526*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7e00000; valaddr_reg:x3; val_offset:86529*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86529*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7f00000; valaddr_reg:x3; val_offset:86532*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86532*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7f80000; valaddr_reg:x3; val_offset:86535*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86535*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fc0000; valaddr_reg:x3; val_offset:86538*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86538*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fe0000; valaddr_reg:x3; val_offset:86541*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86541*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ff0000; valaddr_reg:x3; val_offset:86544*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86544*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ff8000; valaddr_reg:x3; val_offset:86547*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86547*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffc000; valaddr_reg:x3; val_offset:86550*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86550*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffe000; valaddr_reg:x3; val_offset:86553*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86553*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fff000; valaddr_reg:x3; val_offset:86556*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86556*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fff800; valaddr_reg:x3; val_offset:86559*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86559*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffc00; valaddr_reg:x3; val_offset:86562*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86562*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffe00; valaddr_reg:x3; val_offset:86565*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86565*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffff00; valaddr_reg:x3; val_offset:86568*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86568*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffff80; valaddr_reg:x3; val_offset:86571*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86571*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffffc0; valaddr_reg:x3; val_offset:86574*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86574*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffffe0; valaddr_reg:x3; val_offset:86577*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86577*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffff0; valaddr_reg:x3; val_offset:86580*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86580*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffff8; valaddr_reg:x3; val_offset:86583*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86583*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffffc; valaddr_reg:x3; val_offset:86586*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86586*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7fffffe; valaddr_reg:x3; val_offset:86589*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86589*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xa7ffffff; valaddr_reg:x3; val_offset:86592*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86592*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbf800001; valaddr_reg:x3; val_offset:86595*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86595*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbf800003; valaddr_reg:x3; val_offset:86598*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86598*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbf800007; valaddr_reg:x3; val_offset:86601*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86601*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbf999999; valaddr_reg:x3; val_offset:86604*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86604*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:86607*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86607*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:86610*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86610*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:86613*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86613*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:86616*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86616*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:86619*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86619*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:86622*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86622*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:86625*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86625*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:86628*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86628*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:86631*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86631*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:86634*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86634*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:86637*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86637*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f23f2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x393b03 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f23f2; op2val:0x80393b03;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:86640*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86640*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:86643*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86643*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:86646*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86646*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:86649*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86649*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:86652*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86652*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:86655*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86655*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:86658*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86658*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:86661*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86661*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:86664*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86664*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:86667*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86667*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:86670*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86670*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:86673*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86673*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:86676*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86676*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:86679*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86679*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:86682*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86682*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:86685*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86685*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:86688*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86688*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:86691*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86691*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:86694*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86694*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:86697*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86697*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:86700*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86700*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:86703*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86703*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:86706*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86706*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:86709*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86709*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:86712*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86712*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:86715*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86715*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:86718*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86718*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:86721*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86721*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:86724*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86724*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:86727*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86727*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:86730*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86730*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:86733*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86733*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:86736*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86736*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:86739*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86739*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:86742*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86742*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:86745*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86745*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:86748*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86748*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:86751*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86751*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:86754*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86754*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:86757*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86757*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:86760*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86760*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:86763*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86763*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:86766*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86766*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:86769*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86769*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:86772*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86772*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:86775*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86775*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:86778*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86778*0 + 3*225*FLEN/8, x4, x1, x2)

inst_28927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0f80a5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0f80a5; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:86781*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 86781*0 + 3*225*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955836,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955838,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(2977955839,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131695846,32,FLEN)
NAN_BOXED(2151235438,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183680,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183681,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183683,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183687,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183695,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183711,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183743,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183807,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810183935,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810184191,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810184703,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810185727,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810187775,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810191871,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810200063,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810216447,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810249215,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810314751,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810445823,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2810707967,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2811232255,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2812280831,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2814377983,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2814377984,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2816475136,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2817523712,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818048000,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818310144,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818441216,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818506752,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818539520,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818555904,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818564096,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818568192,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818570240,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818571264,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818571776,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572032,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572160,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572224,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572256,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572272,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572280,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572284,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572286,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(2818572287,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2131698674,32,FLEN)
NAN_BOXED(2151234307,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2131722405,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
