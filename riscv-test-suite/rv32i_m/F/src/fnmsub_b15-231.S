
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:88320*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88320*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:88323*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88323*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:88326*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88326*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:88329*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88329*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:88332*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88332*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:88335*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88335*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:88338*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88338*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:88341*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88341*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:88344*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88344*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84800000; valaddr_reg:x3; val_offset:88347*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88347*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:88350*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88350*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:88353*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88353*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:88356*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88356*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:88359*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88359*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:88362*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88362*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:88365*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88365*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:88368*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88368*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:88371*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88371*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:88374*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88374*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:88377*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88377*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:88380*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88380*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:88383*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88383*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:88386*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88386*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:88389*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88389*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:88392*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88392*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:88395*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88395*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:88398*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88398*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:88401*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88401*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:88404*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88404*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:88407*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88407*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:88410*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88410*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:88413*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88413*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:88416*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88416*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:88419*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88419*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:88422*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88422*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:88425*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88425*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:88428*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88428*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:88431*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88431*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:88434*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88434*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:88437*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88437*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:88440*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88440*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:88443*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88443*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:88446*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88446*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:88449*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88449*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:88452*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88452*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:88455*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88455*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:88458*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88458*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:88461*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88461*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:88464*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88464*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:88467*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88467*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:88470*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88470*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:88473*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88473*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:88476*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88476*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:88479*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88479*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x135827 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f135827; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:88482*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88482*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3f800001; valaddr_reg:x3; val_offset:88485*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88485*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3f800003; valaddr_reg:x3; val_offset:88488*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88488*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3f800007; valaddr_reg:x3; val_offset:88491*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88491*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3f999999; valaddr_reg:x3; val_offset:88494*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88494*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:88497*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88497*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:88500*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88500*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:88503*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88503*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:88506*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88506*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:88509*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88509*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:88512*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88512*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:88515*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88515*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:88518*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88518*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:88521*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88521*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:88524*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88524*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:88527*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88527*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:88530*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88530*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b000000; valaddr_reg:x3; val_offset:88533*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88533*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b000001; valaddr_reg:x3; val_offset:88536*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88536*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b000003; valaddr_reg:x3; val_offset:88539*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88539*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b000007; valaddr_reg:x3; val_offset:88542*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88542*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b00000f; valaddr_reg:x3; val_offset:88545*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88545*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b00001f; valaddr_reg:x3; val_offset:88548*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88548*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b00003f; valaddr_reg:x3; val_offset:88551*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88551*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b00007f; valaddr_reg:x3; val_offset:88554*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88554*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b0000ff; valaddr_reg:x3; val_offset:88557*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88557*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b0001ff; valaddr_reg:x3; val_offset:88560*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88560*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b0003ff; valaddr_reg:x3; val_offset:88563*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88563*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b0007ff; valaddr_reg:x3; val_offset:88566*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88566*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b000fff; valaddr_reg:x3; val_offset:88569*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88569*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b001fff; valaddr_reg:x3; val_offset:88572*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88572*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b003fff; valaddr_reg:x3; val_offset:88575*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88575*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b007fff; valaddr_reg:x3; val_offset:88578*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88578*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b00ffff; valaddr_reg:x3; val_offset:88581*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88581*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b01ffff; valaddr_reg:x3; val_offset:88584*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88584*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b03ffff; valaddr_reg:x3; val_offset:88587*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88587*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b07ffff; valaddr_reg:x3; val_offset:88590*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88590*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b0fffff; valaddr_reg:x3; val_offset:88593*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88593*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b1fffff; valaddr_reg:x3; val_offset:88596*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88596*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b3fffff; valaddr_reg:x3; val_offset:88599*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88599*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b400000; valaddr_reg:x3; val_offset:88602*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88602*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b600000; valaddr_reg:x3; val_offset:88605*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88605*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b700000; valaddr_reg:x3; val_offset:88608*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88608*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b780000; valaddr_reg:x3; val_offset:88611*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88611*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7c0000; valaddr_reg:x3; val_offset:88614*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88614*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7e0000; valaddr_reg:x3; val_offset:88617*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88617*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7f0000; valaddr_reg:x3; val_offset:88620*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88620*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7f8000; valaddr_reg:x3; val_offset:88623*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88623*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fc000; valaddr_reg:x3; val_offset:88626*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88626*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fe000; valaddr_reg:x3; val_offset:88629*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88629*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ff000; valaddr_reg:x3; val_offset:88632*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88632*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ff800; valaddr_reg:x3; val_offset:88635*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88635*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffc00; valaddr_reg:x3; val_offset:88638*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88638*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffe00; valaddr_reg:x3; val_offset:88641*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88641*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fff00; valaddr_reg:x3; val_offset:88644*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88644*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fff80; valaddr_reg:x3; val_offset:88647*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88647*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fffc0; valaddr_reg:x3; val_offset:88650*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88650*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fffe0; valaddr_reg:x3; val_offset:88653*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88653*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffff0; valaddr_reg:x3; val_offset:88656*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88656*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffff8; valaddr_reg:x3; val_offset:88659*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88659*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffffc; valaddr_reg:x3; val_offset:88662*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88662*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7ffffe; valaddr_reg:x3; val_offset:88665*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88665*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x139ba8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x377f92 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f139ba8; op2val:0x377f92;
op3val:0x6b7fffff; valaddr_reg:x3; val_offset:88668*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88668*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:88671*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88671*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:88674*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88674*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:88677*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88677*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:88680*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88680*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:88683*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88683*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:88686*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88686*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:88689*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88689*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:88692*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88692*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:88695*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88695*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:88698*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88698*0 + 3*230*FLEN/8, x4, x1, x2)

inst_29567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x13a10a and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f13a10a; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:88701*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 88701*0 + 3*230*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981120,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981121,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981123,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981127,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981135,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981151,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981183,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981247,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981375,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222981631,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222982143,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222983167,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222985215,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222989311,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2222997503,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223013887,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223046655,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223112191,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223243263,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2223505407,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2224029695,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2225078271,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175423,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2227175424,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2229272576,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230321152,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2230845440,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231107584,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231238656,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231304192,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231336960,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231353344,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231361536,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231365632,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231367680,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231368704,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369216,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369472,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369600,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369664,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369696,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369712,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369720,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369724,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369726,32,FLEN)
NAN_BOXED(2131974183,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2231369727,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162112,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162113,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162115,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162119,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162127,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162143,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162175,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162239,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162367,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795162623,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795163135,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795164159,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795166207,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795170303,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795178495,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795194879,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795227647,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795293183,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795424255,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1795686399,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1796210687,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1797259263,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1799356415,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1799356416,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1801453568,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1802502144,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803026432,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803288576,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803419648,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803485184,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803517952,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803534336,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803542528,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803546624,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803548672,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803549696,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550208,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550464,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550592,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550656,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550688,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550704,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550712,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550716,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550718,32,FLEN)
NAN_BOXED(2131991464,32,FLEN)
NAN_BOXED(3637138,32,FLEN)
NAN_BOXED(1803550719,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2131992842,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
