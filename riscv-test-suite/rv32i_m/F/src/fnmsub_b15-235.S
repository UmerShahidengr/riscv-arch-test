
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_29952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:89856*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89856*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:89859*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89859*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:89862*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89862*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:89865*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89865*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:89868*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89868*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:89871*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89871*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:89874*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89874*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:89877*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89877*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:89880*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89880*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:89883*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89883*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:89886*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89886*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:89889*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89889*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:89892*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89892*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:89895*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89895*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:89898*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89898*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:89901*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89901*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:89904*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89904*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:89907*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89907*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:89910*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89910*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:89913*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89913*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:89916*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89916*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:89919*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89919*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:89922*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89922*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:89925*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89925*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:89928*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89928*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:89931*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89931*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:89934*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89934*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:89937*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89937*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:89940*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89940*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:89943*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89943*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:89946*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89946*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:89949*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89949*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:89952*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89952*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:89955*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89955*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:89958*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89958*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:89961*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89961*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:89964*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89964*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:89967*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89967*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15c651 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15c651; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:89970*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89970*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75800000; valaddr_reg:x3; val_offset:89973*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89973*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75800001; valaddr_reg:x3; val_offset:89976*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89976*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75800003; valaddr_reg:x3; val_offset:89979*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89979*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75800007; valaddr_reg:x3; val_offset:89982*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89982*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7580000f; valaddr_reg:x3; val_offset:89985*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89985*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7580001f; valaddr_reg:x3; val_offset:89988*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89988*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7580003f; valaddr_reg:x3; val_offset:89991*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89991*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7580007f; valaddr_reg:x3; val_offset:89994*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89994*0 + 3*234*FLEN/8, x4, x1, x2)

inst_29999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x758000ff; valaddr_reg:x3; val_offset:89997*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 89997*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x758001ff; valaddr_reg:x3; val_offset:90000*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90000*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x758003ff; valaddr_reg:x3; val_offset:90003*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90003*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x758007ff; valaddr_reg:x3; val_offset:90006*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90006*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75800fff; valaddr_reg:x3; val_offset:90009*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90009*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75801fff; valaddr_reg:x3; val_offset:90012*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90012*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75803fff; valaddr_reg:x3; val_offset:90015*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90015*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75807fff; valaddr_reg:x3; val_offset:90018*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90018*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7580ffff; valaddr_reg:x3; val_offset:90021*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90021*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7581ffff; valaddr_reg:x3; val_offset:90024*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90024*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7583ffff; valaddr_reg:x3; val_offset:90027*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90027*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7587ffff; valaddr_reg:x3; val_offset:90030*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90030*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x758fffff; valaddr_reg:x3; val_offset:90033*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90033*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x759fffff; valaddr_reg:x3; val_offset:90036*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90036*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75bfffff; valaddr_reg:x3; val_offset:90039*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90039*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75c00000; valaddr_reg:x3; val_offset:90042*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90042*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75e00000; valaddr_reg:x3; val_offset:90045*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90045*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75f00000; valaddr_reg:x3; val_offset:90048*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90048*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75f80000; valaddr_reg:x3; val_offset:90051*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90051*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fc0000; valaddr_reg:x3; val_offset:90054*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90054*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fe0000; valaddr_reg:x3; val_offset:90057*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90057*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ff0000; valaddr_reg:x3; val_offset:90060*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90060*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ff8000; valaddr_reg:x3; val_offset:90063*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90063*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffc000; valaddr_reg:x3; val_offset:90066*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90066*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffe000; valaddr_reg:x3; val_offset:90069*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90069*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fff000; valaddr_reg:x3; val_offset:90072*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90072*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fff800; valaddr_reg:x3; val_offset:90075*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90075*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffc00; valaddr_reg:x3; val_offset:90078*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90078*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffe00; valaddr_reg:x3; val_offset:90081*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90081*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffff00; valaddr_reg:x3; val_offset:90084*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90084*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffff80; valaddr_reg:x3; val_offset:90087*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90087*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffffc0; valaddr_reg:x3; val_offset:90090*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90090*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffffe0; valaddr_reg:x3; val_offset:90093*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90093*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffff0; valaddr_reg:x3; val_offset:90096*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90096*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffff8; valaddr_reg:x3; val_offset:90099*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90099*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffffc; valaddr_reg:x3; val_offset:90102*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90102*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75fffffe; valaddr_reg:x3; val_offset:90105*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90105*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xeb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x75ffffff; valaddr_reg:x3; val_offset:90108*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90108*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f000001; valaddr_reg:x3; val_offset:90111*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90111*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f000003; valaddr_reg:x3; val_offset:90114*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90114*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f000007; valaddr_reg:x3; val_offset:90117*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90117*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f199999; valaddr_reg:x3; val_offset:90120*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90120*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f249249; valaddr_reg:x3; val_offset:90123*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90123*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f333333; valaddr_reg:x3; val_offset:90126*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90126*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:90129*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90129*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:90132*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90132*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f444444; valaddr_reg:x3; val_offset:90135*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90135*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:90138*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90138*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:90141*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90141*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f666666; valaddr_reg:x3; val_offset:90144*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90144*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:90147*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90147*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:90150*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90150*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:90153*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90153*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x162c54 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x5a3390 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f162c54; op2val:0x3fda3390;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:90156*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90156*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7000000; valaddr_reg:x3; val_offset:90159*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90159*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7000001; valaddr_reg:x3; val_offset:90162*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90162*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7000003; valaddr_reg:x3; val_offset:90165*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90165*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7000007; valaddr_reg:x3; val_offset:90168*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90168*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb700000f; valaddr_reg:x3; val_offset:90171*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90171*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb700001f; valaddr_reg:x3; val_offset:90174*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90174*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb700003f; valaddr_reg:x3; val_offset:90177*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90177*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb700007f; valaddr_reg:x3; val_offset:90180*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90180*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb70000ff; valaddr_reg:x3; val_offset:90183*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90183*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb70001ff; valaddr_reg:x3; val_offset:90186*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90186*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb70003ff; valaddr_reg:x3; val_offset:90189*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90189*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb70007ff; valaddr_reg:x3; val_offset:90192*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90192*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7000fff; valaddr_reg:x3; val_offset:90195*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90195*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7001fff; valaddr_reg:x3; val_offset:90198*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90198*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7003fff; valaddr_reg:x3; val_offset:90201*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90201*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7007fff; valaddr_reg:x3; val_offset:90204*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90204*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb700ffff; valaddr_reg:x3; val_offset:90207*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90207*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb701ffff; valaddr_reg:x3; val_offset:90210*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90210*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb703ffff; valaddr_reg:x3; val_offset:90213*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90213*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb707ffff; valaddr_reg:x3; val_offset:90216*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90216*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb70fffff; valaddr_reg:x3; val_offset:90219*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90219*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb71fffff; valaddr_reg:x3; val_offset:90222*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90222*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb73fffff; valaddr_reg:x3; val_offset:90225*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90225*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7400000; valaddr_reg:x3; val_offset:90228*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90228*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7600000; valaddr_reg:x3; val_offset:90231*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90231*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7700000; valaddr_reg:x3; val_offset:90234*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90234*0 + 3*234*FLEN/8, x4, x1, x2)

inst_30079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1634d7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3689cc and fs3 == 1 and fe3 == 0x6e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1634d7; op2val:0x803689cc;
op3val:0xb7780000; valaddr_reg:x3; val_offset:90237*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90237*0 + 3*234*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549503,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549631,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184549887,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184550399,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184551423,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184553471,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184557567,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184565759,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184582143,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184614911,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184680447,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(184811519,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185073663,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(185597951,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(186646527,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743679,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(188743680,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(190840832,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(191889408,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192413696,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192675840,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192806912,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192872448,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192905216,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192921600,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192929792,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192933888,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192935936,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192936960,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937472,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937728,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937856,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937920,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937952,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937968,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937976,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937980,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937982,32,FLEN)
NAN_BOXED(2132133457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(192937983,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322880,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322881,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322883,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322887,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322895,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322911,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971322943,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971323007,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971323135,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971323391,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971323903,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971324927,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971326975,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971331071,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971339263,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971355647,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971388415,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971453951,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971585023,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1971847167,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1972371455,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1973420031,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1975517183,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1975517184,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1977614336,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1978662912,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979187200,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979449344,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979580416,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979645952,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979678720,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979695104,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979703296,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979707392,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979709440,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979710464,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979710976,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711232,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711360,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711424,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711456,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711472,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711480,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711484,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711486,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(1979711487,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132159572,32,FLEN)
NAN_BOXED(1071264656,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230528,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230529,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230531,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230535,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230543,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230559,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230591,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230655,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070230783,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070231039,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070231551,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070232575,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070234623,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070238719,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070246911,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070263295,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070296063,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070361599,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070492671,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3070754815,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3071279103,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3072327679,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3074424831,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3074424832,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3076521984,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3077570560,32,FLEN)
NAN_BOXED(2132161751,32,FLEN)
NAN_BOXED(2151057868,32,FLEN)
NAN_BOXED(3078094848,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
