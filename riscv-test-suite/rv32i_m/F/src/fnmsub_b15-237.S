
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fc000; valaddr_reg:x3; val_offset:90624*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90624*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fe000; valaddr_reg:x3; val_offset:90627*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90627*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ff000; valaddr_reg:x3; val_offset:90630*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90630*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ff800; valaddr_reg:x3; val_offset:90633*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90633*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffc00; valaddr_reg:x3; val_offset:90636*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90636*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffe00; valaddr_reg:x3; val_offset:90639*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90639*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fff00; valaddr_reg:x3; val_offset:90642*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90642*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fff80; valaddr_reg:x3; val_offset:90645*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90645*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fffc0; valaddr_reg:x3; val_offset:90648*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90648*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fffe0; valaddr_reg:x3; val_offset:90651*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90651*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffff0; valaddr_reg:x3; val_offset:90654*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90654*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffff8; valaddr_reg:x3; val_offset:90657*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90657*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffffc; valaddr_reg:x3; val_offset:90660*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90660*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07ffffe; valaddr_reg:x3; val_offset:90663*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90663*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xe0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xf07fffff; valaddr_reg:x3; val_offset:90666*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90666*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff000001; valaddr_reg:x3; val_offset:90669*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90669*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff000003; valaddr_reg:x3; val_offset:90672*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90672*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff000007; valaddr_reg:x3; val_offset:90675*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90675*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff199999; valaddr_reg:x3; val_offset:90678*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90678*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff249249; valaddr_reg:x3; val_offset:90681*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90681*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff333333; valaddr_reg:x3; val_offset:90684*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90684*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:90687*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90687*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:90690*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90690*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff444444; valaddr_reg:x3; val_offset:90693*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90693*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:90696*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90696*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:90699*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90699*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff666666; valaddr_reg:x3; val_offset:90702*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90702*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:90705*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90705*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:90708*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90708*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:90711*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90711*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x165edf and fs2 == 1 and fe2 == 0x7f and fm2 == 0x59ea38 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f165edf; op2val:0xbfd9ea38;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:90714*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90714*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:90717*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90717*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:90720*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90720*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:90723*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90723*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:90726*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90726*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:90729*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90729*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:90732*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90732*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:90735*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90735*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:90738*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90738*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:90741*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90741*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:90744*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90744*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:90747*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90747*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:90750*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90750*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:90753*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90753*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:90756*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90756*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:90759*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90759*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:90762*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90762*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe000000; valaddr_reg:x3; val_offset:90765*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90765*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe000001; valaddr_reg:x3; val_offset:90768*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90768*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe000003; valaddr_reg:x3; val_offset:90771*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90771*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe000007; valaddr_reg:x3; val_offset:90774*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90774*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe00000f; valaddr_reg:x3; val_offset:90777*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90777*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe00001f; valaddr_reg:x3; val_offset:90780*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90780*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe00003f; valaddr_reg:x3; val_offset:90783*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90783*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe00007f; valaddr_reg:x3; val_offset:90786*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90786*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe0000ff; valaddr_reg:x3; val_offset:90789*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90789*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe0001ff; valaddr_reg:x3; val_offset:90792*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90792*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:90795*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90795*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:90798*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90798*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:90801*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90801*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:90804*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90804*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:90807*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90807*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:90810*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90810*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:90813*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90813*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:90816*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90816*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:90819*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90819*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:90822*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90822*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:90825*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90825*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:90828*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90828*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:90831*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90831*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:90834*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90834*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:90837*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90837*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:90840*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90840*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:90843*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90843*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:90846*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90846*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:90849*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90849*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:90852*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90852*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:90855*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90855*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:90858*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90858*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:90861*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90861*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:90864*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90864*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:90867*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90867*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:90870*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90870*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:90873*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90873*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:90876*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90876*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:90879*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90879*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:90882*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90882*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:90885*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90885*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:90888*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90888*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:90891*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90891*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:90894*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90894*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:90897*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90897*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17511f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17511f; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:90900*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90900*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba000000; valaddr_reg:x3; val_offset:90903*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90903*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba000001; valaddr_reg:x3; val_offset:90906*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90906*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba000003; valaddr_reg:x3; val_offset:90909*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90909*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba000007; valaddr_reg:x3; val_offset:90912*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90912*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba00000f; valaddr_reg:x3; val_offset:90915*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90915*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba00001f; valaddr_reg:x3; val_offset:90918*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90918*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba00003f; valaddr_reg:x3; val_offset:90921*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90921*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba00007f; valaddr_reg:x3; val_offset:90924*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90924*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba0000ff; valaddr_reg:x3; val_offset:90927*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90927*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba0001ff; valaddr_reg:x3; val_offset:90930*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90930*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba0003ff; valaddr_reg:x3; val_offset:90933*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90933*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba0007ff; valaddr_reg:x3; val_offset:90936*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90936*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba000fff; valaddr_reg:x3; val_offset:90939*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90939*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba001fff; valaddr_reg:x3; val_offset:90942*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90942*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba003fff; valaddr_reg:x3; val_offset:90945*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90945*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba007fff; valaddr_reg:x3; val_offset:90948*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90948*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba00ffff; valaddr_reg:x3; val_offset:90951*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90951*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba01ffff; valaddr_reg:x3; val_offset:90954*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90954*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba03ffff; valaddr_reg:x3; val_offset:90957*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90957*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba07ffff; valaddr_reg:x3; val_offset:90960*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90960*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba0fffff; valaddr_reg:x3; val_offset:90963*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90963*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba1fffff; valaddr_reg:x3; val_offset:90966*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90966*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba3fffff; valaddr_reg:x3; val_offset:90969*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90969*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba400000; valaddr_reg:x3; val_offset:90972*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90972*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba600000; valaddr_reg:x3; val_offset:90975*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90975*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba700000; valaddr_reg:x3; val_offset:90978*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90978*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba780000; valaddr_reg:x3; val_offset:90981*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90981*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7c0000; valaddr_reg:x3; val_offset:90984*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90984*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7e0000; valaddr_reg:x3; val_offset:90987*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90987*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7f0000; valaddr_reg:x3; val_offset:90990*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90990*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7f8000; valaddr_reg:x3; val_offset:90993*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90993*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fc000; valaddr_reg:x3; val_offset:90996*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90996*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fe000; valaddr_reg:x3; val_offset:90999*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 90999*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ff000; valaddr_reg:x3; val_offset:91002*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91002*0 + 3*236*FLEN/8, x4, x1, x2)

inst_30335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ff800; valaddr_reg:x3; val_offset:91005*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91005*0 + 3*236*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034904064,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034912256,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034916352,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034918400,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034919424,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034919936,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920192,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920320,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920384,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920416,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920432,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920440,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920444,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920446,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4034920447,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132172511,32,FLEN)
NAN_BOXED(3218729528,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881024,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881025,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881027,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881031,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881039,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881055,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881087,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881151,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881279,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881535,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234882047,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234883071,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234885119,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234889215,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234897407,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234913791,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234946559,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235012095,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235143167,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235405311,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235929599,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(236978175,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2132234527,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562176,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562177,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562179,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562183,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562191,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562207,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562239,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562303,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562431,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120562687,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120563199,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120564223,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120566271,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120570367,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120578559,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120594943,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120627711,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120693247,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3120824319,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3121086463,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3121610751,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3122659327,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3124756479,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3124756480,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3126853632,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3127902208,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128426496,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128688640,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128819712,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128885248,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128918016,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128934400,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128942592,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128946688,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128948736,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
