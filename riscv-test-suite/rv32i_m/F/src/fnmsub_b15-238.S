
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffc00; valaddr_reg:x3; val_offset:91008*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91008*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffe00; valaddr_reg:x3; val_offset:91011*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91011*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fff00; valaddr_reg:x3; val_offset:91014*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91014*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fff80; valaddr_reg:x3; val_offset:91017*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91017*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fffc0; valaddr_reg:x3; val_offset:91020*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91020*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fffe0; valaddr_reg:x3; val_offset:91023*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91023*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffff0; valaddr_reg:x3; val_offset:91026*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91026*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffff8; valaddr_reg:x3; val_offset:91029*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91029*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffffc; valaddr_reg:x3; val_offset:91032*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91032*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7ffffe; valaddr_reg:x3; val_offset:91035*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91035*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x74 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xba7fffff; valaddr_reg:x3; val_offset:91038*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91038*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:91041*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91041*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:91044*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91044*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:91047*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91047*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:91050*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91050*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:91053*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91053*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:91056*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91056*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:91059*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91059*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:91062*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91062*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:91065*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91065*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:91068*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91068*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:91071*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91071*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:91074*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91074*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:91077*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91077*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:91080*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91080*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:91083*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91083*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x180041 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35e4f6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f180041; op2val:0x8035e4f6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:91086*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91086*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f800000; valaddr_reg:x3; val_offset:91089*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91089*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f800001; valaddr_reg:x3; val_offset:91092*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91092*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f800003; valaddr_reg:x3; val_offset:91095*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91095*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f800007; valaddr_reg:x3; val_offset:91098*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91098*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f80000f; valaddr_reg:x3; val_offset:91101*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91101*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f80001f; valaddr_reg:x3; val_offset:91104*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91104*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f80003f; valaddr_reg:x3; val_offset:91107*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91107*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f80007f; valaddr_reg:x3; val_offset:91110*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91110*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f8000ff; valaddr_reg:x3; val_offset:91113*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91113*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f8001ff; valaddr_reg:x3; val_offset:91116*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91116*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f8003ff; valaddr_reg:x3; val_offset:91119*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91119*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f8007ff; valaddr_reg:x3; val_offset:91122*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91122*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f800fff; valaddr_reg:x3; val_offset:91125*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91125*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f801fff; valaddr_reg:x3; val_offset:91128*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91128*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f803fff; valaddr_reg:x3; val_offset:91131*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91131*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f807fff; valaddr_reg:x3; val_offset:91134*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91134*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f80ffff; valaddr_reg:x3; val_offset:91137*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91137*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f81ffff; valaddr_reg:x3; val_offset:91140*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91140*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f83ffff; valaddr_reg:x3; val_offset:91143*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91143*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f87ffff; valaddr_reg:x3; val_offset:91146*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91146*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f8fffff; valaddr_reg:x3; val_offset:91149*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91149*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9f9fffff; valaddr_reg:x3; val_offset:91152*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91152*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fbfffff; valaddr_reg:x3; val_offset:91155*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91155*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fc00000; valaddr_reg:x3; val_offset:91158*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91158*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fe00000; valaddr_reg:x3; val_offset:91161*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91161*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ff00000; valaddr_reg:x3; val_offset:91164*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91164*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ff80000; valaddr_reg:x3; val_offset:91167*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91167*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffc0000; valaddr_reg:x3; val_offset:91170*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91170*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffe0000; valaddr_reg:x3; val_offset:91173*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91173*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fff0000; valaddr_reg:x3; val_offset:91176*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91176*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fff8000; valaddr_reg:x3; val_offset:91179*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91179*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffc000; valaddr_reg:x3; val_offset:91182*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91182*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffe000; valaddr_reg:x3; val_offset:91185*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91185*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffff000; valaddr_reg:x3; val_offset:91188*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91188*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffff800; valaddr_reg:x3; val_offset:91191*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91191*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffc00; valaddr_reg:x3; val_offset:91194*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91194*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffe00; valaddr_reg:x3; val_offset:91197*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91197*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffff00; valaddr_reg:x3; val_offset:91200*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91200*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffff80; valaddr_reg:x3; val_offset:91203*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91203*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffffc0; valaddr_reg:x3; val_offset:91206*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91206*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffffe0; valaddr_reg:x3; val_offset:91209*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91209*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffff0; valaddr_reg:x3; val_offset:91212*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91212*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffff8; valaddr_reg:x3; val_offset:91215*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91215*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffffc; valaddr_reg:x3; val_offset:91218*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91218*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9ffffffe; valaddr_reg:x3; val_offset:91221*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91221*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0x9fffffff; valaddr_reg:x3; val_offset:91224*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91224*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:91227*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91227*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:91230*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91230*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:91233*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91233*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:91236*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91236*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:91239*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91239*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:91242*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91242*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:91245*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91245*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:91248*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91248*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:91251*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91251*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:91254*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91254*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:91257*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91257*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:91260*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91260*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:91263*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91263*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:91266*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91266*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:91269*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91269*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x186be6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x35bee6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f186be6; op2val:0x8035bee6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:91272*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91272*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67800000; valaddr_reg:x3; val_offset:91275*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91275*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67800001; valaddr_reg:x3; val_offset:91278*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91278*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67800003; valaddr_reg:x3; val_offset:91281*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91281*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67800007; valaddr_reg:x3; val_offset:91284*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91284*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6780000f; valaddr_reg:x3; val_offset:91287*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91287*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6780001f; valaddr_reg:x3; val_offset:91290*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91290*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6780003f; valaddr_reg:x3; val_offset:91293*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91293*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6780007f; valaddr_reg:x3; val_offset:91296*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91296*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x678000ff; valaddr_reg:x3; val_offset:91299*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91299*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x678001ff; valaddr_reg:x3; val_offset:91302*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91302*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x678003ff; valaddr_reg:x3; val_offset:91305*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91305*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x678007ff; valaddr_reg:x3; val_offset:91308*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91308*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67800fff; valaddr_reg:x3; val_offset:91311*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91311*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67801fff; valaddr_reg:x3; val_offset:91314*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91314*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67803fff; valaddr_reg:x3; val_offset:91317*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91317*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67807fff; valaddr_reg:x3; val_offset:91320*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91320*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6780ffff; valaddr_reg:x3; val_offset:91323*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91323*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6781ffff; valaddr_reg:x3; val_offset:91326*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91326*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6783ffff; valaddr_reg:x3; val_offset:91329*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91329*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x6787ffff; valaddr_reg:x3; val_offset:91332*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91332*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x678fffff; valaddr_reg:x3; val_offset:91335*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91335*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x679fffff; valaddr_reg:x3; val_offset:91338*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91338*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67bfffff; valaddr_reg:x3; val_offset:91341*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91341*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67c00000; valaddr_reg:x3; val_offset:91344*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91344*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67e00000; valaddr_reg:x3; val_offset:91347*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91347*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67f00000; valaddr_reg:x3; val_offset:91350*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91350*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67f80000; valaddr_reg:x3; val_offset:91353*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91353*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fc0000; valaddr_reg:x3; val_offset:91356*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91356*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fe0000; valaddr_reg:x3; val_offset:91359*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91359*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ff0000; valaddr_reg:x3; val_offset:91362*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91362*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ff8000; valaddr_reg:x3; val_offset:91365*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91365*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ffc000; valaddr_reg:x3; val_offset:91368*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91368*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ffe000; valaddr_reg:x3; val_offset:91371*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91371*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fff000; valaddr_reg:x3; val_offset:91374*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91374*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fff800; valaddr_reg:x3; val_offset:91377*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91377*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fffc00; valaddr_reg:x3; val_offset:91380*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91380*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67fffe00; valaddr_reg:x3; val_offset:91383*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91383*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ffff00; valaddr_reg:x3; val_offset:91386*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91386*0 + 3*237*FLEN/8, x4, x1, x2)

inst_30463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1940e9 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x55d0c9 and fs3 == 0 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1940e9; op2val:0x3fd5d0c9;
op3val:0x67ffff80; valaddr_reg:x3; val_offset:91389*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 91389*0 + 3*237*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128949760,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950272,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950528,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950656,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950720,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950752,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950768,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950776,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950780,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950782,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3128950783,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132279361,32,FLEN)
NAN_BOXED(2151015670,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965952,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965953,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965955,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965959,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965967,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675965983,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675966015,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675966079,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675966207,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675966463,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675966975,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675967999,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675970047,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675974143,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675982335,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2675998719,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2676031487,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2676097023,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2676228095,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2676490239,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2677014527,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2678063103,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2680160255,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2680160256,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2682257408,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2683305984,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2683830272,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684092416,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684223488,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684289024,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684321792,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684338176,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684346368,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684350464,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684352512,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684353536,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354048,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354304,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354432,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354496,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354528,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354544,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354552,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354556,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354558,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(2684354559,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132306918,32,FLEN)
NAN_BOXED(2151005926,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441856,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441857,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441859,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441863,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441871,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441887,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441919,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736441983,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736442111,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736442367,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736442879,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736443903,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736445951,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736450047,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736458239,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736474623,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736507391,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736572927,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736703999,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1736966143,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1737490431,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1738539007,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1740636159,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1740636160,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1742733312,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1743781888,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744306176,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744568320,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744699392,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744764928,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744797696,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744814080,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744822272,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744826368,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744828416,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744829440,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744829952,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744830208,32,FLEN)
NAN_BOXED(2132361449,32,FLEN)
NAN_BOXED(1070977225,32,FLEN)
NAN_BOXED(1744830336,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
